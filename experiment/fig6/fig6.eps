%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: fig6.pdf
%%Creator: Adobe Acrobat 9.3.4
%%For: Dell
%%CreationDate: 2021/11/18, 15:29:35
%%BoundingBox: 0 0 402 209
%%HiResBoundingBox: 0 0 401.5748 208.3465
%%CropBox: 0 0 401.5748 208.3465
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1089 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Microsoft® PowerPoint® 2016"
   dc:format="application/pdf"
   xmp:CreatorTool="Microsoft® PowerPoint® 2016"
   xmp:CreateDate="2021-11-18T15:28:25+08:00"
   xmp:ModifyDate="2021-11-18T15:29:31+08:00"
   xmp:MetadataDate="2021-11-18T15:29:31+08:00"
   xmpMM:DocumentID="uuid:947EE869-557E-4104-9A41-67104741F977"
   xmpMM:InstanceID="uuid:a4cbd7bc-a09f-4065-82b1-88a10f629f68">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint 演示文稿</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>吴 凯</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -208.346 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 208.346 li
401.575 208.346 li
401.575 0 li
cp
clp
[1 0 0 1 -280.63 0 ]ct
0 361.417 mo
960 361.417 li
960 -178.583 li
0 -178.583 li
0 361.417 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
294.923 194.388 mo
686.764 194.388 li
686.763 -2.69309 li
294.923 -2.69309 li
294.923 194.388 li
f
326.192 171.225 mo
580.299 171.225 li
580.299 6.356 li
326.192 6.35599 li
cp
f
331.144 171.225 mo
331.144 173.879 li
1 /0 /CSD get_res sepcs
1 sep
.21322 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
328.22 181.544 mo
328.22 180.514 328.376 179.626 328.69 178.883 cv
329 178.138 329.413 177.583 329.928 177.219 cv
330.33 176.931 330.743 176.786 331.17 176.786 cv
331.865 176.786 332.486 177.14 333.038 177.846 cv
333.727 178.721 334.072 179.907 334.072 181.406 cv
334.072 182.453 333.921 183.344 333.616 184.078 cv
333.314 184.81 332.93 185.342 332.46 185.673 cv
331.993 186.004 331.54 186.17 331.102 186.17 cv
330.239 186.17 329.521 185.661 328.949 184.643 cv
328.465 183.785 328.22 182.753 328.22 181.544 cv
cp
329.53 181.711 mo
329.53 182.954 329.683 183.969 329.988 184.756 cv
330.242 185.418 330.62 185.75 331.124 185.75 cv
331.364 185.75 331.611 185.642 331.868 185.427 cv
332.127 185.212 332.323 184.85 332.457 184.344 cv
332.662 183.579 332.765 182.502 332.765 181.111 cv
332.765 180.081 332.656 179.221 332.443 178.533 cv
332.283 178.021 332.078 177.659 331.825 177.446 cv
331.643 177.299 331.421 177.226 331.161 177.226 cv
330.859 177.226 330.592 177.362 330.355 177.633 cv
330.037 178.002 329.817 178.581 329.703 179.373 cv
329.587 180.164 329.53 180.943 329.53 181.711 cv
cp
f
397.145 171.225 mo
397.145 173.879 li
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
391.914 177.859 mo
394.115 176.786 li
394.334 176.786 li
394.334 184.417 li
394.334 184.923 394.357 185.239 394.4 185.363 cv
394.443 185.487 394.531 185.583 394.662 185.649 cv
394.796 185.716 395.069 185.754 395.476 185.762 cv
395.476 186.01 li
392.076 186.01 li
392.076 185.762 li
392.5 185.754 392.777 185.718 392.902 185.654 cv
393.027 185.588 393.113 185.501 393.161 185.393 cv
393.212 185.284 393.235 184.958 393.235 184.417 cv
393.235 179.54 li
393.235 178.881 393.215 178.459 393.17 178.273 cv
393.138 178.131 393.081 178.026 392.999 177.959 cv
392.916 177.893 392.816 177.859 392.703 177.859 cv
392.537 177.859 392.31 177.928 392.016 178.066 cv
cp
f
397.638 181.544 mo
397.638 180.514 397.794 179.626 398.105 178.883 cv
398.418 178.138 398.831 177.583 399.346 177.219 cv
399.748 176.931 400.161 176.786 400.588 176.786 cv
401.28 176.786 401.903 177.14 402.456 177.846 cv
403.145 178.721 403.49 179.907 403.49 181.406 cv
403.49 182.453 403.336 183.344 403.034 184.078 cv
402.732 184.81 402.348 185.342 401.878 185.673 cv
401.408 186.004 400.955 186.17 400.519 186.17 cv
399.657 186.17 398.939 185.661 398.367 184.643 cv
397.88 183.785 397.638 182.753 397.638 181.544 cv
cp
398.948 181.711 mo
398.948 182.954 399.098 183.969 399.406 184.756 cv
399.659 185.418 400.038 185.75 400.542 185.75 cv
400.779 185.75 401.029 185.642 401.285 185.428 cv
401.545 185.212 401.741 184.85 401.875 184.344 cv
402.077 183.579 402.18 182.502 402.18 181.111 cv
402.18 180.081 402.074 179.221 401.861 178.533 cv
401.701 178.021 401.493 177.659 401.24 177.446 cv
401.058 177.299 400.838 177.226 400.579 177.226 cv
400.277 177.226 400.01 177.362 399.773 177.633 cv
399.452 178.002 399.235 178.581 399.118 179.373 cv
399.004 180.164 398.948 180.943 398.948 181.711 cv
cp
f
463.146 171.225 mo
463.146 173.879 li
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
462.579 184.27 mo
461.947 186.01 li
456.61 186.01 li
456.61 185.762 li
458.179 184.332 459.284 183.164 459.925 182.259 cv
460.566 181.352 460.885 180.523 460.885 179.772 cv
460.885 179.199 460.711 178.729 460.358 178.36 cv
460.007 177.991 459.586 177.806 459.096 177.806 cv
458.652 177.806 458.253 177.936 457.9 178.196 cv
457.547 178.456 457.285 178.837 457.117 179.339 cv
456.869 179.339 li
456.98 178.518 457.268 177.887 457.726 177.448 cv
458.185 177.007 458.76 176.786 459.452 176.786 cv
460.184 176.786 460.796 177.022 461.286 177.492 cv
461.779 177.963 462.026 178.518 462.026 179.158 cv
462.026 179.616 461.918 180.073 461.705 180.531 cv
461.377 181.251 460.842 182.013 460.104 182.817 cv
458.997 184.026 458.305 184.754 458.028 185.003 cv
460.389 185.003 li
460.87 185.003 461.209 184.985 461.403 184.95 cv
461.596 184.914 461.77 184.843 461.924 184.734 cv
462.081 184.625 462.217 184.47 462.334 184.27 cv
cp
f
463.638 181.544 mo
463.638 180.514 463.795 179.626 464.108 178.883 cv
464.419 178.138 464.831 177.583 465.347 177.219 cv
465.748 176.931 466.161 176.786 466.588 176.786 cv
467.283 176.786 467.904 177.14 468.457 177.846 cv
469.146 178.721 469.49 179.907 469.49 181.406 cv
469.49 182.453 469.339 183.344 469.035 184.078 cv
468.733 184.81 468.348 185.342 467.878 185.673 cv
467.411 186.004 466.959 186.17 466.52 186.17 cv
465.657 186.17 464.94 185.661 464.367 184.643 cv
463.883 183.785 463.638 182.753 463.638 181.544 cv
cp
464.948 181.711 mo
464.948 182.954 465.102 183.969 465.407 184.756 cv
465.66 185.418 466.039 185.75 466.543 185.75 cv
466.782 185.75 467.03 185.642 467.286 185.428 cv
467.545 185.212 467.742 184.85 467.876 184.344 cv
468.081 183.579 468.183 182.502 468.183 181.111 cv
468.183 180.081 468.075 179.221 467.861 178.533 cv
467.702 178.021 467.497 177.659 467.243 177.446 cv
467.061 177.299 466.839 177.226 466.58 177.226 cv
466.278 177.226 466.01 177.362 465.774 177.633 cv
465.455 178.002 465.236 178.581 465.122 179.373 cv
465.005 180.164 464.948 180.943 464.948 181.711 cv
cp
f
529.149 171.225 mo
529.149 173.879 li
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
523.01 178.693 mo
523.269 178.085 523.593 177.615 523.986 177.283 cv
524.379 176.952 524.872 176.786 525.458 176.786 cv
526.185 176.786 526.74 177.022 527.127 177.492 cv
527.421 177.844 527.566 178.219 527.566 178.618 cv
527.566 179.277 527.153 179.957 526.327 180.659 cv
526.882 180.877 527.304 181.188 527.589 181.591 cv
527.873 181.995 528.013 182.471 528.013 183.018 cv
528.013 183.8 527.765 184.477 527.267 185.05 cv
526.618 185.796 525.678 186.17 524.445 186.17 cv
523.835 186.17 523.422 186.094 523.2 185.944 cv
522.981 185.792 522.87 185.629 522.87 185.457 cv
522.87 185.328 522.921 185.214 523.027 185.116 cv
523.132 185.018 523.257 184.969 523.402 184.969 cv
523.516 184.969 523.63 184.987 523.744 185.022 cv
523.821 185.045 523.992 185.127 524.257 185.268 cv
524.524 185.407 524.71 185.49 524.812 185.517 cv
524.977 185.565 525.151 185.59 525.339 185.59 cv
525.792 185.59 526.188 185.414 526.524 185.063 cv
526.857 184.712 527.025 184.297 527.025 183.818 cv
527.025 183.466 526.948 183.124 526.794 182.792 cv
526.677 182.543 526.552 182.354 526.412 182.224 cv
526.222 182.047 525.96 181.886 525.627 181.743 cv
525.293 181.597 524.952 181.525 524.604 181.525 cv
524.391 181.525 li
524.391 181.325 li
524.744 181.281 525.097 181.154 525.447 180.945 cv
525.803 180.736 526.059 180.485 526.219 180.192 cv
526.381 179.899 526.461 179.577 526.461 179.226 cv
526.461 178.769 526.316 178.399 526.028 178.117 cv
525.743 177.834 525.387 177.693 524.96 177.693 cv
524.268 177.693 523.693 178.062 523.232 178.8 cv
cp
f
529.642 181.544 mo
529.642 180.514 529.796 179.626 530.109 178.883 cv
530.419 178.138 530.832 177.583 531.348 177.219 cv
531.749 176.931 532.165 176.786 532.592 176.786 cv
533.284 176.786 533.908 177.14 534.46 177.846 cv
535.146 178.721 535.491 179.907 535.491 181.406 cv
535.491 182.453 535.34 183.344 535.038 184.078 cv
534.736 184.81 534.349 185.342 533.879 185.673 cv
533.412 186.004 532.959 186.17 532.524 186.17 cv
531.661 186.17 530.943 185.661 530.368 184.643 cv
529.884 183.785 529.642 182.753 529.642 181.544 cv
cp
530.949 181.711 mo
530.949 182.954 531.103 183.97 531.407 184.756 cv
531.664 185.418 532.042 185.75 532.544 185.75 cv
532.783 185.75 533.031 185.642 533.29 185.428 cv
533.549 185.212 533.745 184.85 533.879 184.344 cv
534.081 183.579 534.184 182.502 534.184 181.111 cv
534.184 180.081 534.076 179.221 533.862 178.533 cv
533.703 178.021 533.497 177.659 533.244 177.446 cv
533.062 177.299 532.843 177.226 532.583 177.226 cv
532.282 177.226 532.011 177.362 531.775 177.633 cv
531.456 178.002 531.236 178.581 531.123 179.373 cv
531.006 180.164 530.949 180.943 530.949 181.711 cv
cp
f
326.192 166.11 mo
323.535 166.11 li
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
314.542 166.383 mo
314.542 165.353 314.698 164.465 315.01 163.723 cv
315.321 162.977 315.735 162.423 316.25 162.059 cv
316.651 161.768 317.065 161.626 317.492 161.626 cv
318.185 161.626 318.808 161.979 319.36 162.684 cv
320.049 163.561 320.393 164.747 320.393 166.243 cv
320.393 167.292 320.242 168.183 319.939 168.916 cv
319.637 169.649 319.251 170.18 318.782 170.512 cv
318.313 170.843 317.861 171.009 317.424 171.009 cv
316.562 171.009 315.844 170.5 315.27 169.482 cv
314.785 168.625 314.542 167.592 314.542 166.383 cv
cp
315.851 166.549 mo
315.851 167.794 316.004 168.809 316.31 169.595 cv
316.564 170.257 316.943 170.588 317.445 170.588 cv
317.684 170.588 317.933 170.481 318.19 170.266 cv
318.449 170.05 318.646 169.689 318.78 169.183 cv
318.983 168.418 319.085 167.341 319.085 165.95 cv
319.085 164.921 318.978 164.061 318.765 163.373 cv
318.605 162.861 318.399 162.497 318.145 162.283 cv
317.964 162.138 317.743 162.064 317.484 162.064 cv
317.182 162.064 316.913 162.201 316.677 162.471 cv
316.357 162.841 316.139 163.421 316.024 164.212 cv
315.909 165.003 315.851 165.783 315.851 166.549 cv
cp
f
326.192 126.458 mo
323.535 126.458 li
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
313.148 122.159 mo
312.628 123.294 li
309.906 123.294 li
309.313 124.506 li
310.491 124.68 311.425 125.118 312.115 125.821 cv
312.706 126.424 313.001 127.135 313.001 127.951 cv
313.001 128.426 312.904 128.867 312.711 129.271 cv
312.519 129.675 312.275 130.02 311.981 130.304 cv
311.688 130.589 311.361 130.816 311.001 130.99 cv
310.49 131.234 309.965 131.357 309.426 131.357 cv
308.883 131.357 308.488 131.266 308.241 131.084 cv
307.995 130.899 307.872 130.694 307.872 130.469 cv
307.872 130.347 307.923 130.236 308.025 130.142 cv
308.128 130.045 308.257 129.997 308.412 129.997 cv
308.528 129.997 308.63 130.014 308.717 130.051 cv
308.804 130.085 308.951 130.176 309.159 130.324 cv
309.493 130.554 309.831 130.671 310.173 130.671 cv
310.694 130.671 311.15 130.475 311.543 130.082 cv
311.937 129.69 312.135 129.209 312.135 128.646 cv
312.135 128.099 311.959 127.59 311.607 127.115 cv
311.256 126.643 310.771 126.276 310.153 126.02 cv
309.668 125.821 309.008 125.704 308.173 125.673 cv
309.906 122.159 li
cp
f
314.542 126.731 mo
314.542 125.701 314.698 124.813 315.01 124.071 cv
315.321 123.326 315.735 122.771 316.25 122.407 cv
316.651 122.119 317.065 121.974 317.492 121.974 cv
318.185 121.974 318.808 122.327 319.36 123.035 cv
320.049 123.909 320.393 125.095 320.393 126.594 cv
320.393 127.641 320.242 128.532 319.939 129.266 cv
319.637 129.997 319.251 130.529 318.782 130.862 cv
318.313 131.192 317.861 131.357 317.424 131.357 cv
316.562 131.357 315.844 130.847 315.27 129.832 cv
314.785 128.973 314.542 127.94 314.542 126.731 cv
cp
315.851 126.899 mo
315.851 128.142 316.004 129.158 316.31 129.943 cv
316.564 130.606 316.943 130.938 317.445 130.938 cv
317.684 130.938 317.933 130.83 318.19 130.614 cv
318.449 130.398 318.646 130.037 318.78 129.533 cv
318.983 128.768 319.085 127.69 319.085 126.298 cv
319.085 125.269 318.978 124.409 318.765 123.721 cv
318.605 123.209 318.399 122.848 318.145 122.634 cv
317.964 122.486 317.743 122.412 317.484 122.412 cv
317.182 122.412 316.913 122.549 316.677 122.822 cv
316.357 123.189 316.139 123.769 316.024 124.56 cv
315.909 125.351 315.851 126.131 315.851 126.899 cv
cp
f
326.192 86.8088 mo
323.535 86.8088 li
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
301.989 83.3949 mo
304.189 82.3224 li
304.409 82.3224 li
304.409 89.9523 li
304.409 90.4587 304.43 90.7745 304.473 90.8997 cv
304.516 91.0249 304.604 91.1188 304.736 91.187 cv
304.87 91.2525 305.142 91.2894 305.551 91.298 cv
305.551 91.5455 li
302.149 91.5455 li
302.149 91.298 li
302.576 91.2894 302.851 91.2553 302.975 91.1899 cv
303.1 91.1244 303.187 91.0391 303.235 90.931 cv
303.285 90.82 303.31 90.4957 303.31 89.9523 cv
303.31 85.0762 li
303.31 84.4191 303.288 83.9952 303.244 83.8103 cv
303.213 83.668 303.156 83.5628 303.073 83.4945 cv
302.99 83.4291 302.892 83.3949 302.776 83.3949 cv
302.611 83.3949 302.382 83.4632 302.089 83.6026 cv
cp
f
307.712 87.0819 mo
307.712 86.0492 307.867 85.1616 308.179 84.4191 cv
308.491 83.6737 308.904 83.119 309.419 82.7548 cv
309.821 82.4675 310.235 82.3224 310.661 82.3224 cv
311.355 82.3224 311.977 82.6752 312.529 83.3835 cv
313.218 84.2569 313.562 85.4432 313.562 86.9425 cv
313.562 87.9894 313.411 88.8798 313.108 89.6138 cv
312.806 90.3449 312.42 90.8769 311.951 91.2098 cv
311.483 91.5398 311.03 91.7048 310.593 91.7048 cv
309.731 91.7048 309.013 91.1984 308.439 90.1799 cv
307.954 89.3208 307.712 88.2881 307.712 87.0819 cv
cp
309.02 87.2469 mo
309.02 88.4901 309.173 89.5057 309.479 90.2909 cv
309.734 90.9538 310.112 91.2866 310.615 91.2866 cv
310.854 91.2866 311.102 91.1785 311.36 90.9651 cv
311.619 90.7489 311.815 90.3876 311.949 89.8812 cv
312.152 89.116 312.254 88.0378 312.254 86.6466 cv
312.254 85.6168 312.147 84.7576 311.934 84.0691 cv
311.774 83.5571 311.568 83.1958 311.315 82.9824 cv
311.132 82.8345 310.912 82.7634 310.653 82.7634 cv
310.351 82.7634 310.082 82.8971 309.846 83.1702 cv
309.526 83.5372 309.308 84.1175 309.193 84.9084 cv
309.078 85.6993 309.02 86.4788 309.02 87.2469 cv
cp
f
314.542 87.0819 mo
314.542 86.0492 314.698 85.1616 315.01 84.4191 cv
315.321 83.6737 315.735 83.119 316.25 82.7548 cv
316.651 82.4675 317.065 82.3224 317.492 82.3224 cv
318.185 82.3224 318.808 82.6752 319.36 83.3835 cv
320.049 84.2569 320.393 85.4432 320.393 86.9425 cv
320.393 87.9894 320.242 88.8798 319.939 89.6138 cv
319.637 90.3449 319.251 90.8769 318.782 91.2098 cv
318.313 91.5398 317.861 91.7048 317.424 91.7048 cv
316.562 91.7048 315.844 91.1984 315.27 90.1799 cv
314.785 89.3208 314.542 88.2881 314.542 87.0819 cv
cp
315.851 87.2469 mo
315.851 88.4901 316.004 89.5057 316.31 90.2909 cv
316.564 90.9538 316.943 91.2866 317.445 91.2866 cv
317.684 91.2866 317.933 91.1785 318.19 90.9651 cv
318.449 90.7489 318.646 90.3876 318.78 89.8812 cv
318.983 89.116 319.085 88.0378 319.085 86.6466 cv
319.085 85.6168 318.978 84.7576 318.765 84.0691 cv
318.605 83.5571 318.399 83.1958 318.145 82.9824 cv
317.964 82.8345 317.743 82.7634 317.484 82.7634 cv
317.182 82.7634 316.913 82.8971 316.677 83.1702 cv
316.357 83.5372 316.139 84.1175 316.024 84.9084 cv
315.909 85.6993 315.851 86.4788 315.851 87.2469 cv
cp
f
326.192 47.1569 mo
323.535 47.1569 li
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
301.989 43.743 mo
304.189 42.6705 li
304.409 42.6705 li
304.409 50.3033 li
304.409 50.8069 304.43 51.1227 304.473 51.2478 cv
304.516 51.373 304.604 51.4669 304.736 51.5352 cv
304.87 51.6006 305.142 51.6404 305.551 51.649 cv
305.551 51.8936 li
302.149 51.8936 li
302.149 51.649 li
302.575 51.6404 302.851 51.6034 302.975 51.538 cv
303.1 51.4726 303.187 51.3872 303.235 51.2791 cv
303.285 51.1682 303.31 50.8438 303.31 50.3033 cv
303.31 45.4244 li
303.31 44.7672 303.288 44.3433 303.244 44.1584 cv
303.212 44.0162 303.156 43.9109 303.073 43.8455 cv
302.99 43.7772 302.892 43.743 302.776 43.743 cv
302.611 43.743 302.382 43.8142 302.089 43.9507 cv
cp
f
313.148 42.8583 mo
312.628 43.9906 li
309.906 43.9906 li
309.313 45.2025 li
310.491 45.376 311.425 45.8141 312.115 46.5168 cv
312.706 47.1199 313.001 47.8311 313.001 48.6505 cv
313.001 49.1227 312.904 49.5637 312.711 49.9705 cv
312.519 50.3716 312.275 50.7158 311.981 51.0003 cv
311.688 51.2848 311.361 51.5152 311.001 51.6888 cv
310.49 51.9334 309.965 52.0558 309.426 52.0558 cv
308.883 52.0558 308.488 51.9619 308.241 51.7798 cv
307.995 51.5949 307.872 51.3901 307.872 51.1682 cv
307.872 51.043 307.923 50.9349 308.025 50.8382 cv
308.128 50.7414 308.257 50.6931 308.412 50.6931 cv
308.528 50.6931 308.63 50.713 308.717 50.7471 cv
308.804 50.7841 308.951 50.8752 309.159 51.0231 cv
309.493 51.2535 309.831 51.3673 310.173 51.3673 cv
310.694 51.3673 311.15 51.171 311.543 50.7784 cv
311.937 50.3858 312.135 49.9079 312.135 49.3418 cv
312.135 48.7955 311.959 48.2863 311.607 47.8141 cv
311.256 47.339 310.771 46.9748 310.153 46.7159 cv
309.668 46.5168 309.008 46.4002 308.173 46.3689 cv
309.906 42.8583 li
cp
f
314.542 47.43 mo
314.542 46.3973 314.698 45.5126 315.01 44.7672 cv
315.321 44.0218 315.735 43.4699 316.25 43.1058 cv
316.651 42.8156 317.065 42.6705 317.492 42.6705 cv
318.185 42.6705 318.808 43.0261 319.36 43.7317 cv
320.049 44.605 320.393 45.7914 320.393 47.2906 cv
320.393 48.3375 320.242 49.228 319.939 49.9619 cv
319.637 50.6959 319.251 51.2279 318.782 51.5579 cv
318.313 51.8879 317.861 52.0558 317.424 52.0558 cv
316.562 52.0558 315.844 51.5465 315.27 50.5281 cv
314.785 49.6718 314.542 48.6391 314.542 47.43 cv
cp
315.851 47.595 mo
315.851 48.8411 316.004 49.8538 316.31 50.6419 cv
316.564 51.3047 316.943 51.6347 317.445 51.6347 cv
317.684 51.6347 317.933 51.5266 318.19 51.3132 cv
318.449 51.097 318.646 50.7357 318.78 50.2294 cv
318.983 49.4641 319.085 48.3859 319.085 46.9976 cv
319.085 45.9649 318.978 45.1057 318.765 44.4173 cv
318.605 43.9052 318.399 43.5439 318.145 43.3305 cv
317.964 43.1855 317.743 43.1115 317.484 43.1115 cv
317.182 43.1115 316.913 43.248 316.677 43.5183 cv
316.357 43.8853 316.139 44.4657 316.024 45.2594 cv
315.909 46.0502 315.851 46.8269 315.851 47.595 cv
cp
f
326.192 7.50504 mo
323.535 7.50504 li
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
306.651 10.5035 mo
306.019 12.2446 li
300.682 12.2446 li
300.682 11.9971 li
302.252 10.5661 303.357 9.39687 303.997 8.49219 cv
304.638 7.58467 304.958 6.75682 304.958 6.00577 cv
304.958 5.43396 304.782 4.9617 304.43 4.59473 cv
304.079 4.22488 303.658 4.03998 303.169 4.03998 cv
302.725 4.03998 302.326 4.17084 301.971 4.42972 cv
301.619 4.69144 301.358 5.07266 301.188 5.57335 cv
300.94 5.57335 li
301.053 4.75119 301.339 4.11963 301.799 3.68152 cv
302.258 3.24055 302.833 3.0215 303.523 3.0215 cv
304.256 3.0215 304.868 3.25479 305.359 3.72704 cv
305.851 4.19644 306.098 4.75119 306.098 5.39128 cv
306.098 5.8493 305.991 6.30733 305.777 6.76537 cv
305.449 7.48511 304.915 8.24753 304.176 9.05264 cv
303.069 10.2589 302.378 10.9872 302.102 11.2375 cv
304.463 11.2375 li
304.944 11.2375 305.281 11.2204 305.474 11.1834 cv
305.668 11.1493 305.842 11.0753 305.998 10.9672 cv
306.154 10.8591 306.29 10.7027 306.405 10.5035 cv
cp
f
307.712 7.77812 mo
307.712 6.74829 307.867 5.86069 308.179 5.11818 cv
308.491 4.37282 308.904 3.81807 309.419 3.45393 cv
309.821 3.16376 310.235 3.0215 310.661 3.0215 cv
311.355 3.0215 311.977 3.37427 312.529 4.0798 cv
313.218 4.95602 313.562 6.14233 313.562 7.63873 cv
313.562 8.68849 313.411 9.57895 313.108 10.3129 cv
312.806 11.0441 312.42 11.576 311.951 11.9061 cv
311.483 12.2389 311.03 12.4039 310.593 12.4039 cv
309.731 12.4039 309.013 11.8947 308.439 10.8762 cv
307.954 10.0199 307.712 8.98721 307.712 7.77812 cv
cp
309.02 7.94313 mo
309.02 9.18919 309.173 10.2048 309.479 10.99 cv
309.734 11.6528 310.112 11.9829 310.614 11.9829 cv
310.854 11.9829 311.102 11.8748 311.36 11.6614 cv
311.619 11.4452 311.815 11.0839 311.949 10.5775 cv
312.152 9.81223 312.254 8.73686 312.254 7.3457 cv
312.254 6.31586 312.147 5.45386 311.934 4.76825 cv
311.774 4.25618 311.568 3.89203 311.315 3.67868 cv
311.132 3.53358 310.912 3.45961 310.653 3.45961 cv
310.351 3.45961 310.082 3.59616 309.846 3.86642 cv
309.526 4.23627 309.308 4.8166 309.193 5.60748 cv
309.078 6.39836 309.02 7.17786 309.02 7.94313 cv
cp
f
314.542 7.77812 mo
314.542 6.74829 314.698 5.86069 315.01 5.11818 cv
315.321 4.37282 315.735 3.81807 316.25 3.45393 cv
316.651 3.16376 317.065 3.0215 317.492 3.0215 cv
318.185 3.0215 318.808 3.37427 319.36 4.0798 cv
320.049 4.95602 320.393 6.14233 320.393 7.63873 cv
320.393 8.68849 320.242 9.57895 319.939 10.3129 cv
319.637 11.0441 319.251 11.576 318.782 11.9061 cv
318.313 12.2389 317.861 12.4039 317.424 12.4039 cv
316.562 12.4039 315.844 11.8947 315.27 10.8762 cv
314.785 10.0199 314.542 8.98721 314.542 7.77812 cv
cp
315.851 7.94313 mo
315.851 9.18919 316.004 10.2048 316.31 10.99 cv
316.564 11.6528 316.943 11.9829 317.445 11.9829 cv
317.684 11.9829 317.933 11.8748 318.19 11.6614 cv
318.449 11.4452 318.646 11.0839 318.78 10.5775 cv
318.983 9.81223 319.085 8.73686 319.085 7.3457 cv
319.085 6.31586 318.978 5.45386 318.765 4.76825 cv
318.605 4.25618 318.399 3.89203 318.145 3.67868 cv
317.963 3.53358 317.743 3.45961 317.484 3.45961 cv
317.182 3.45961 316.913 3.59616 316.677 3.86642 cv
316.357 4.23627 316.139 4.8166 316.024 5.60748 cv
315.909 6.39836 315.851 7.17786 315.851 7.94313 cv
cp
f
337.742 163.731 mo
344.343 115.357 li
350.944 13.8491 li
357.542 64.6017 li
364.143 13.8491 li
370.744 64.6017 li
377.345 13.8491 li
383.943 64.6017 li
390.544 13.8491 li
397.145 64.6017 li
403.746 13.8491 li
410.344 64.6017 li
416.945 13.8491 li
423.546 64.6017 li
430.147 13.8491 li
436.745 64.6017 li
443.346 13.8491 li
449.947 64.6017 li
456.545 13.8491 li
463.146 64.6017 li
469.746 13.8491 li
476.347 64.6017 li
482.945 13.8491 li
489.546 64.6017 li
496.147 13.8491 li
502.748 64.6017 li
509.346 13.8491 li
515.947 64.6017 li
522.548 13.8491 li
529.149 64.6017 li
535.747 13.8491 li
542.348 64.6017 li
548.949 13.8491 li
555.547 64.6017 li
562.148 115.357 li
568.749 163.731 li
/1 
[/DeviceCMYK] /CSA add_res
.90573 .514275 .0514229 .00137331 cmyk
.39979 lw
2 lc
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
337.742 163.731 mo
344.343 154.215 li
350.944 145.493 li
357.542 133.596 li
364.143 109.013 li
370.744 120.114 li
377.345 92.3591 li
383.943 112.979 li
390.544 81.2556 li
397.145 109.013 li
403.746 76.499 li
410.344 107.426 li
416.945 71.7395 li
423.546 106.635 li
430.147 71.7395 li
436.745 106.635 li
443.346 65.3954 li
449.947 106.635 li
456.545 65.3954 li
463.146 106.635 li
469.746 61.4297 li
476.347 106.635 li
482.945 59.8451 li
489.546 106.635 li
496.147 61.4297 li
502.748 106.635 li
509.346 59.0513 li
515.947 106.635 li
522.548 60.6388 li
529.149 107.426 li
535.747 61.4297 li
542.348 107.426 li
548.949 63.8108 li
555.547 106.635 li
562.148 115.357 li
568.749 163.731 li
0 .642634 1 0 cmyk
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
337.742 163.731 mo
344.343 157.387 li
350.944 154.215 li
357.542 148.665 li
364.143 140.733 li
370.744 140.733 li
377.345 129.63 li
383.943 132.011 li
390.544 114.563 li
397.145 124.873 li
403.746 105.841 li
410.344 120.114 li
416.945 96.3249 li
423.546 117.735 li
430.147 95.5312 li
436.745 115.357 li
443.346 87.5997 li
449.947 114.563 li
456.545 82.843 li
463.146 113.77 li
469.746 79.671 li
476.347 112.979 li
482.945 75.7052 li
489.546 112.979 li
496.147 76.4989 li
502.748 112.979 li
509.346 73.3269 li
515.947 113.77 li
522.548 76.499 li
529.149 113.77 li
535.747 78.8773 li
542.348 113.77 li
548.949 81.2556 li
555.547 112.979 li
562.148 115.357 li
568.749 163.731 li
.831937 .113405 1 .0184939 cmyk
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
337.742 163.731 mo
344.343 158.181 li
350.944 155.009 li
357.542 150.249 li
364.143 143.905 li
370.744 143.112 li
377.345 134.389 li
383.943 135.183 li
390.544 120.114 li
397.145 128.045 li
403.746 110.598 li
410.344 122.495 li
416.945 100.288 li
423.546 119.323 li
430.147 99.4969 li
436.745 116.942 li
443.346 91.5654 li
449.947 116.151 li
456.545 86.8088 li
463.146 114.563 li
469.746 82.843 li
476.347 114.563 li
482.945 79.671 li
489.546 114.563 li
496.147 78.8773 li
502.748 114.563 li
509.346 76.4989 li
515.947 114.563 li
522.548 79.671 li
529.149 114.563 li
535.747 82.0493 li
542.348 114.563 li
548.949 84.4276 li
555.547 113.77 li
562.148 115.357 li
568.749 163.731 li
.0995499 1 1 .024567 cmyk
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
337.742 163.731 mo
344.343 158.972 li
350.944 156.594 li
357.542 151.837 li
364.143 146.284 li
370.744 146.284 li
377.345 137.561 li
383.943 139.146 li
390.544 126.458 li
397.145 131.217 li
403.746 116.942 li
410.344 125.667 li
416.945 106.635 li
423.546 122.495 li
430.147 105.047 li
436.745 120.114 li
443.346 98.7032 li
449.947 117.735 li
456.545 93.1529 li
463.146 116.942 li
469.746 89.9808 li
476.347 116.151 li
482.945 84.4276 li
489.546 115.357 li
496.147 84.4276 li
502.748 115.357 li
509.346 83.6367 li
515.947 115.357 li
522.548 85.2214 li
529.149 115.357 li
535.747 86.8088 li
542.348 115.357 li
548.949 89.9808 li
555.547 115.357 li
562.148 115.357 li
568.749 163.731 li
.505974 .716274 0 0 cmyk
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
337.742 163.731 mo
344.343 158.972 li
350.944 157.387 li
357.542 152.628 li
364.143 148.665 li
370.744 147.871 li
377.345 141.527 li
383.943 141.527 li
390.544 129.63 li
397.145 133.596 li
403.746 119.323 li
410.344 127.252 li
416.945 108.219 li
423.546 124.079 li
430.147 106.635 li
436.745 120.907 li
443.346 99.4969 li
449.947 119.323 li
456.545 93.1529 li
463.146 117.735 li
469.746 89.9808 li
476.347 116.942 li
482.945 85.2214 li
489.546 116.942 li
496.147 85.2214 li
502.748 116.151 li
509.346 82.0493 li
515.947 116.151 li
522.548 85.2214 li
529.149 116.151 li
535.747 87.5997 li
542.348 116.151 li
548.949 89.9808 li
555.547 116.151 li
562.148 115.357 li
568.749 163.731 li
.340307 .716396 .722744 .271855 cmyk
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
337.742 163.731 mo
344.343 159.766 li
350.944 158.181 li
357.542 154.215 li
364.143 150.249 li
370.744 149.456 li
377.345 143.905 li
383.943 143.905 li
390.544 133.596 li
397.145 135.974 li
403.746 124.079 li
410.344 129.63 li
416.945 112.185 li
423.546 126.458 li
430.147 109.807 li
436.745 123.286 li
443.346 102.669 li
449.947 120.907 li
456.545 97.1158 li
463.146 119.323 li
469.746 93.1529 li
476.347 118.529 li
482.945 88.3934 li
489.546 117.735 li
496.147 88.3934 li
502.748 117.735 li
509.346 84.4276 li
515.947 117.735 li
522.548 88.3934 li
529.149 116.942 li
535.747 89.9808 li
542.348 116.942 li
548.949 93.1528 li
555.547 116.942 li
562.148 115.357 li
568.749 163.731 li
.126528 .663783 0 0 cmyk
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
326.192 171.225 mo
326.192 6.3557 li
1 /0 /CSD get_res sepcs
1 sep
.21322 lw
0 lj
4 ml
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
580.308 171.225 mo
580.308 6.35571 li
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
326.192 171.225 mo
580.308 171.225 li
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
326.192 6.3557 mo
580.308 6.35571 li
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
682.198 153.029 mo
585.946 153.029 li
585.946 12.4921 li
682.198 12.4921 li
682.198 153.029 li
gsave
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 280.63 208.346 ]ct
[97.3906 -3.35953e-6 -1.94223e-5 141.675 304.747 54.7485 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 171 
/H 249 
/M[171 0 0 -249 0 249 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 171 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 171 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 171 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 171 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
q>^KsM@85J!!i)q!!9S8YmCC7o)JaliX(;F!X8W)JcNmm!!9b?X:#"5o)Jalk6Z_H!XT/;o)JalPR5eF
!!]\.RfENo)CR'$*eGI0*WmW:,80eP!sB;Z+.3ni('>L!)\2ZD!sB;[+N5.k(BYU#)\;$1JcP'9!s^%\
!hB>3!!3?@+8Z$?"rdmNaT.e1!X')OqZ$^&)[ZZ>!.k4=!!399(mk<6!!+/KbQ*k-!?)LH!!*l@p],mG
k5YMs%/^)+(^Qr<])VjG%*AR,!!*6LquD<KiW&uc+8l0?"<4<?[K$=4(]==7"<>qlM?!_`(]XPf!7LoK
%NVhTXT/A(-iF#G$PqS!JcGiP"!7C@!=K^%!7UuL!ZnTHU&Y3*)<1^K!;ZZq.fB>J%24g'c2[hfr;Zj-
'YFF?!!"5&!.k4?!!*WKPlSo+!%RpI!=]^Y!1a)i+oMBA%2A10JcP9?!$[X-^An9G)9)ZD!!"MI!!*NB
nc47AlMpo.r;Zj-'V>B?!!"4^!0.$[&/k3BJcOp5!%RpI!=]^<!4i.1+oMBA%2@.hNW9&'p&K[Eg].?d
)6!VD!!"MI!!*NBeGtF+![.OD!rr<1'SZV?!!"4E!2fet&/j=)JcGiP!%RpI!=]^#!7LoJ+oMBA%2?8O
VZ6]@h#N$,o`,"()3=jD!!"MI!!*NB]E"Z+!$V:@!=]b,!.k4D!!"4(!5nj<&/i:aSH&X>r;Zj-'C>dO
!:Tsg+oMBA%2>62_uKc]^]9Pu!>$.>!.k4:!!"MI!!*NBT)cV+!$V:@!=]ad!0[B_,4PYb!9!nY&/h8D
\c;^[r;Zj-'@6`>!!"2@!!*NCquD<Ki;`j%UB%Lu!>$.!!/U[W.KBGN!!!HAL&fj+!$V:@!=]aK!3?/#
,1lmI!;ZZr&/gB+df9@tr;Zj-'=Rt>!!"2@!!*NCirFZ2q>^L>M?(`u!>$-]!29Gn.fB>J%27q*JcPHD
!$V:@!=]a.!6G3@,.diB!!*WKm/V_<n,NG<r;Zj-':Jp>!!"2@!!*NC`W2A+!$^b0JcOp5!>$-@!5AL6
.fB>J%26nbP5kS+r;Zj-'__TZ!9O7],+\eB!!*WKciB(+!%RpI!=]_?!.k40!!"2@!!*NCW;s=+!$]_h
L&_;U!"^$&!8%8O.fB>J%26#IX8i5Dr;Zj-']&hA!!3-#,)$$B!!*WK[fE<+!%RpI!=]_&!.k4I!!"2@
!!*NCO9!Q+!$\iOSH&[%)<_'P!;-<l.fB>J%25!,aT);ar;Zj-'Ysd?!!"5+!.k4:!!*WKRK18+!%RpI
!=]^^!13`d+oMBA%2A@5JcP*:!$[g2\c;aB)9W#D!!"MI!!*NBpAfdFjo>B)r;Zj-'Vk`?!!"4c!/U[V
&/kBGJcOa0!%RpI!=]^A!4;e,+oMBA%2@=mM#[T$!!%TNdf9C[)6s7D!!"MI!!*NBh>i--!WW3Dr;Zj-
'T2t?!!"4J!29Go&/jL.JcPWI!%RpI!=]^(!6tQE+oMBA%2?GTU&Y0;iW+Q1n,NJ#)3k3D!!"MI!!*NB
_#U#+!$V:@!=]b1!.k4?!!"4-!5AL7&/iIfQiI+9r;Zj-'Cl-T!:'Ub+oMBA%2>E7^An6X`;knu!>$.C
!.k45!!"MI!!*NBU]@t+!$V:@!=]ai!0.$Z,5)"g!8IPT&/hGI[/^1Vr;Zj-'@d)>!!4;D!!<3$%2=Ns
fDkmqX8o-u!>$.*!.k1P!!"MI!!*NBMZD3+!$V:@!=]aP!2fes,2E6N!;-<m&/gQ0c2[hor;Zj-'>+=>
!!"2@!!*NCkQ$27o`+t9Nr[)u!>$-b!1a)i.fB>J%28+/JcP9?!$V:@!=]a3!5nj;,/=2B!!*WKnc47A
lMpo7r;Zj-';#9>!!"2@!!*NCb5d_+!$^q5JcOa0!>$-E!4i.1.fB>J%27(gNW9&&r;Zj-'`7r_!9!nX
,,5.B!!*WKeGtF+!\+0M!rr<1'8?M>!!"2@!!*NCZ2gs+!$^%qJcPWI!>$-,!7LoJ.fB>J%262NVZ6]?
r;Zj-']T1F!;ZZq,)QBB!!*WK]E"Z+!%RpI!=]_+!.k4D!!"2@!!*NCPlSo+!$]#TQiI-u)=7EU!:Tsg
.fB>J%2501_uKc\r;Zj-'ZL-?!!"50!.k45!!*WKT)cV+!%RpI!=]^c!0[B_+oMBA%2AO:JcOp5!$\!7
[/^4=):/AD!!"MI!!*NBquD<Ki;`j$r;Zj-'WD)?!!"4h!/:IU!!!QJL&fj+!%RpI!=]^J!3?/#+oMBA
%2@Y!JcGiP!$[*sc2[kV)7KUD!!"MI!!*NBirFZ2q>^L=r;Zj-'T`=?!!"4O!1a)j&/j[3JcPHD!%RpI
!=]^-!6G3@+oMBA%2?VYSH&X6k5^)6lMpqs)4CQD!!"MI!!*NB`W2A+!$V:@!=]b6!.k4:!!"42!4i.2
&/iXkP5kS4r;Zj-'DDKY!9O7]+oMBA%2>T<\c;^SaoI7u!>$.H!.k40!!"MI!!*NBW;s=+!$V:@!=]an
!/U[W+ohUp!7LoK&/hbRX8i5Mr;Zj-'A`_@!!3-#+oMBA%2=^#df9@lYlLKu!>$./!.k4I!!"MI!!*NB
O9!Q+!$V:@!=]aU!29Gn,2rTS!:Tsh&/g`5aT);jr;Zj-'>X[>!!"2@!!*NCm/V_<n,NG4PQ8Gu!>$-g
!13`d.fB>J%28:4JcP*:!$V:@!=]a8!5AL6,/jPB!!*WKpAfdFjo>B2r;Zj-';PW>!!"2@!!*NCciB(+
!$_+:JcOR+!>$-J!4;e,.fB>J%277lM#[T#!!!*$!"BWs!8%8O,-1dB!!*WKh>i--!WW3Mr;Zj-'8lk>
!!"2@!!*NC[fE<+!$^5!JcPHD!>$-1!6tQE.fB>J%26ASU&Y0:r;Zj-'^,OK!;-<l,*)`B!!*WK_#U#+
!%RpI!=]_0!.k4?!!"2@!!*NCRK18+!$]2YP5kUp)=dcZ!:'Ub.fB>J%25?6^An6Wr;Zj-'[$K?!!"55
!.k40!!*WKU]@t+!%RpI!=]^h!0.$Z+oMBA%2A^?JcOa0!$\0<YQ+\8):\_D!!4VM!!<3$%24HrfDkmp
r;Zj-'X@_?!!"4q!.k4I!!*WKMZD3+!%RpI!=]^O!2fes+oMBA%2@h&JcPWI!$[:#aT)>Q)8#sD!!"MI
!!*NBkQ$27o`+t8r;Zj-'U8[?!!"4T!13`e&/jj8JcP9?!%RpI!=]^2!5nj;+oMBA%2?e^QiI+1li;V;
jo>Dn)4poD!!"MI!!*NBb5d_+!$V:@!=]b;!.k45!!"47!4;e-&/igpNW9&/r;Zj-'Dqi^!9!nX+oMBA
%2>cA[/^1NcN&\"!rr<4)28.D!!"MI!!*NBZ2gs+!$V:@!=]b"!.k1P!!"3s!6tQF&/hqWVZ6]Hr;Zj-
'B9(E!;ZZq+oMBA%2=m(c2[hg[K)iu!>$.4!.k4D!!"MI!!*NBPlSo+!$V:@!=]aZ!1a)i,3JrX!:'Uc
&/go:_uKcer;Zj-'?1$>!!"2@!!*NCnc47AlMpo/R/jeu!>$-l!0[B_.fB>J%28I9JcOp5!$V:@!=]a=
!4i.1,0BnB!!*WKquD<Ki;`j-r;Zj-'<(u>!!"2@!!*NCeGtF+![7UEJcO7"!>$-S!3?/#.fB>J%27Ru
JcGiP!$V:@!=]a$!7LoJ,-_-B!!*WKirFZ2q>^LFr;Zj-'9E4>!!"2@!!*NC]E"Z+!$^D&JcP9?!>$-6
!6G3@.fB>J%26PXSH&X5r;Zj-'^YmP!:Tsg,*W)B!!*WK`W2A+!%RpI!=]_5!.k4:!!"2@!!*NCT)cV+
!$]A^NW9(k)>=,_!9O7].fB>J%25N;\c;^Rr;Zj-'[Qi?!!"5:!.k4+!!*WKW;s=+!%RpI!=]^m!/U[W
+TMKE!!!HBL&fj+!$\KEVZ6`/);Y@F!!3-#.fB>J%24X"df9@kr;Zj-'Xn(?!!"5!!.k4D!!*WKO9!Q+
!%RpI!=]^T!29Gn+oMBA%2A"+JcPHD!$[I(_uKfL)8Q<D!!"MI!!*NBm/V_<n,NG3r;Zj-'Uf$?!!"4Y
!0[B`&/k$=JcP*:!%RpI!=]^7!5AL6+oMBA%2?tcP5kS,nGn.@i;`li)5I8D!!"MI!!*NBciB(+!$V:@
!=]b@!.k40!!"4<!3cG(&/j!uM#[T,!!!*$!"BTr!8%8O+oMBA%2?)JX8i5EfDpL'q>^O-)2eLD!!"MI
!!*NB[fE<+!$V:@!=]b'!.k4I!!"4#!6G3A&/i+\U&Y0Cr;Zj-'BfFJ!;-<l+oMBA%2>'-aT);b])\2u
!>$.9!.k4?!!"MI!!*NBRK18+!$V:@!=]a_!13`d,4#;]!9O7^&/h)?^An6`r;Zj-'?^B>!!"2@!!*NC
pAfdFjo>B*ScH.u!>$-q!0.$Z.fB>J%28X>JcOa0!$V:@!=]aB!4;e,,0p7D!!<3$&/g3&fDkn$r;Zj-
'=%V>!!"2@!!*NCh>i--!WW3EK`KBu!>$-X!2fes.fB>J%27b%JcPWI!$V:@!=]a)!6tQE,.7KB!!*WK
kQ$27o`+tAr;Zj-'9rR>!!"2@!!*NC_#U#+!$^S+JcP*:!>$-;!5nj;.fB>J%26_]QiI+0r;Zj-'_26U
!:'Ub,+/GB!!*WKb5d_+!%RpI!=]_:!.k45!!"2@!!*NCU]@t+!$]PcM#[Pf)>jJd!9!nX.fB>J%25]@
[/^1Mr;Zj-'\*2?!!4>E!.k4"!!*WKZ2gs+!%RpI!=]_!!.k1P!!"2@!!*NCMZD3+!$\ZJU&Y3*)<1^K
!;ZZq.fB>J%24g'c2[hfr;Zj-'YFF?!!"5&!.k4?!!*WKPlSo+!%RpI!=]^Y!1a)i+oMBA%2A10JcP9?
!$[X-^An9G)9)ZD!!"MI!!*NBnc47AlMpo.r;Zj-'V>B?!!"4^!0.$[&/k3BJcOp5!%RpI!=]^<!4i.1
+oMBA%2@.hNW9&'p&K[Eg].?d)6!VD!!"MI!!*NBeGtF+![.OD!rr<1'SZV?!!"4E!2fet&/j=)JcGiP
!%RpI!=]^#!7LoJ+oMBA%2?8OVZ6]@h#N$,o`,"()3=jD!!"MI!!*NB]E"Z+!$V:@!=]b,!.k4D!!"4(
!5nj<&/i:aSH&X>r;Zj-'C>dO!:Tsg+oMBA%2>62_uKc]^]9Pu!>$.>!.k4:!!"MI!!*NBT)cV+!$V:@
!=]ad!0[B_,4PYb!9!nY&/h8D\c;^[r;Zj-'@6`>!!"2@!!*NCquD<Ki;`j%UB%Lu!>$.!!/U[W.KBGN
!!!HAL&fj+!$V:@!=]aK!3?/#,1lmI!;ZZr&/gB+df9@tr;Zj-'=Rt>!!"2@!!*NCirFZ2q>^L>M?(`u
!>$-]!29Gn.fB>J%27q*JcPHD!$V:@!=]a.!6G3@,.diB!!*WKm/V_<n,NG<r;Zj-':Jp>!!"2@!!*NC
`W2A+!$^b0JcOp5!>$-@!5AL6.fB>J%26nbP5kS+r;Zj-'__TZ!9O7],+\eB!!*WKciB(+!%RpI!=]_?
!.k40!!"2@!!*NCW;s=+!$]_hL&_;U!"^$&!8%8O.fB>J%26#IX8i5Dr;Zj-']&hA!!3-#,)$$B!!*WK
[fE<+!%RpI!=]_&!.k4I!!"2@!!*NCO9!Q+!$\iOSH&[%)<_'P!;-<l.fB>J%25!,aT);ar;Zj-'Ysd?
!!"5+!.k4:!!*WKRK18+!%RpI!=]^^!13`d+oMBA%2A@5JcP*:!$[g2\c;aB)9W#D!!"MI!!*NBpAfdF
jo>B)r;Zj-'Vk`?!!"4c!/U[V&/kBGJcOa0!%RpI!=]^A!4;e,+oMBA%2@=mM#[T$!!%TNdf9C[)6s7D
!!"MI!!*NBh>i--!WW3Dr;Zj-'T2t?!!"4J!29Go&/jL.JcPWI!%RpI!=]^(!6tQE+oMBA%2?GTU&Y0;
iW+Q1n,NJ#)3k3D!!"MI!!*NB_#U#+!$V:@!=]b1!.k4?!!"4-!5AL7&/iIfQiI+9r;Zj-'Cl-T!:'Ub
+oMBA%2>E7^An6X`;knu!>$.C!.k45!!"MI!!*NBU]@t+!$V:@!=]ai!0.$Z,5)"g!8IPT&/hGI[/^1V
r;Zj-'@d)>!!4;D!!<3$%2=NsfDkmqX8o-u!>$.*!.k1P!!"MI!!*NBMZD3+!$V:@!=]aP!2fes,2E6N
!;-<m&/gQ0c2[hor;Zj-'>+=>!!"2@!!*NCkQ$27o`+t9Nr[)u!>$-b!1a)i.fB>J%28+/JcP9?!$V:@
!=]a3!5nj;,/=2B!!*WKnc47AlMpo7r;Zj-';#9>!!"2@!!*NCb5d_+!$^q5JcOa0!>$-E!4i.1.fB>J
%27(gNW9&&r;Zj-'`7r_!9!nX,,5.B!!*WKeGtF+!\+0M!rr<1'8?M>!!"2@!!*NCZ2gs+!$^%qJcPWI
!>$-,!7LoJ.fB>J%262NVZ6]?r;Zj-']T1F!;ZZq,)QBB!!*WK]E"Z+!%RpI!=]_+!.k4D!!"2@!!*NC
PlSo+!$]#TQiI-u)=7EU!:Tsg.fB>J%2501_uKc\r;Zj-'ZL-?!!"50!.k45!!*WKT)cV+!%RpI!=]^c
!0[B_+oMBA%2AO:JcOp5!$\!7[/^4=):/AD!!"MI!!*NBquD<Ki;`j$r;Zj-'WD)?!!"4h!/:IU!!!QJ
L&fj+!%RpI!=]^J!3?/#+oMBA%2@Y!JcGiP!$[*sc2[kV)7KUD!!"MI!!*NBirFZ2q>^L=r;Zj-'T`=?
!!"4O!1a)j&/j[3JcPHD!%RpI!=]^-!6G3@+oMBA%2?VYSH&X6k5^)6lMpqs)4CQD!!"MI!!*NB`W2A+
!$V:@!=]b6!.k4:!!"42!4i.2&/iXkP5kS4r;Zj-'DDKY!9O7]+oMBA%2>T<\c;^SaoI7u!>$.H!.k40
!!"MI!!*NBW;s=+!$V:@!=]an!/U[W+ohUp!7LoK&/hbRX8i5Mr;Zj-'A`_@!!3-#+oMBA%2=^#df9@l
YlLKu!>$./!.k4I!!"MI!!*NBO9!Q+!$V:@!=]aU!29Gn,2rTS!:Tsh&/g`5aT);jr;Zj-'>X[>!!"2@
!!*NCm/V_<n,NG4PQ8Gu!>$-g!13`d.fB>J%28:4JcP*:!$V:@!=]a8!5AL6,/jPB!!*WKpAfdFjo>B2
r;Zj-';PW>!!"2@!!*NCciB(+!$_+:JcOR+!>$-J!4;e,.fB>J%277lM#[T#!!!*$!"BWs!8%8O,-1dB
!!*WKh>i--!WW3Mr;Zj-'8lk>!!"2@!!*NC[fE<+!$^5!JcPHD!>$-1!6tQE.fB>J%26ASU&Y0:r;Zj-
'^,OK!;-<l,*)`B!!*WK_#U#+!%RpI!=]_0!.k4?!!"2@!!*NCRK18+!$]2YP5kUp)=dcZ!:'Ub.fB>J
%25?6^An6Wr;Zj-'[$K?!!"55!.k40!!*WKU]@t+!%RpI!=]^h!0.$Z+oMBA%2A^?JcOa0!$\0<YQ+\8
):\_D!!4VM!!<3$%24HrfDkmpr;Zj-'X@_?!!"4q!.k4I!!*WKMZD3+!%RpI!=]^O!2fes+oMBA%2@h&
JcPWI!$[:#aT)>Q)8#sD!!"MI!!*NBkQ$27o`+t8r;Zj-'U8[?!!"4T!13`e&/jj8JcP9?!%RpI!=]^2
!5nj;+oMBA%2?e^QiI+1li;V;jo>Dn)4poD!!"MI!!*NBb5d_+!$V:@!=]b;!.k45!!"47!4;e-&/igp
NW9&/r;Zj-'Dqi^!9!nX+oMBA%2>cA[/^1NcN&\"!rr<4)28.D!!"MI!!*NBZ2gs+!$V:@!=]b"!.k1P
!!"3s!6tQF&/hqWVZ6]Hr;Zj-'B9(E!;ZZq+oMBA%2=m(c2[hg[K)iu!>$.4!.k4D!!"MI!!*NBPlSo+
!$V:@!=]aZ!1a)i,3JrX!:'Uc&/go:_uKcer;Zj-'?1$>!!"2@!!*NCnc47AlMpo/R/jeu!>$-l!0[B_
.fB>J%28I9JcOp5!$V:@!=]a=!4i.1,0BnB!!*WKquD<Ki;`j-r;Zj-'<(u>!!"2@!!*NCeGtF+![7UE
JcO7"!>$-S!3?/#.fB>J%27RuJcGiP!$V:@!=]a$!7LoJ,-_-B!!*WKirFZ2q>^LFr;Zj-'9E4>!!"2@
!!*NC]E"Z+!$^D&JcP9?!>$-6!6G3@.fB>J%26PXSH&X5r;Zj-'^YmP!:Tsg,*W)B!!*WK`W2A+!%RpI
!=]_5!.k4:!!"2@!!*NCT)cV+!$]A^NW9(k)>=,_!9O7].fB>J%25N;\c;^Rr;Zj-'[Qi?!!"5:!.k4+
!!*WKW;s=+!%RpI!=]^m!/U[W+TMKE!!!HBL&fj+!$\KEVZ6`/);Y@F!!3-#.fB>J%24X"df9@kr;Zj-
'Xn(?!!"5!!.k4D!!*WKO9!Q+!%RpI!=]^T!29Gn+oMBA%2A"+JcPHD!$[I(_uKfL)8Q<D!!"MI!!*NB
m/V_<n,NG3r;Zj-'Uf$?!!"4Y!0[B`&/k$=JcP*:!%RpI!=]^7!5AL6+oMBA%2?tcP5kS,nGn.@i;`li
)5I8D!!"MI!!*NBciB(+!$V:@!=]b@!.k40!!"4<!3cG(&/j!uM#[T,!!!*$!"BTr!8%8O+oMBA%2?)J
X8i5EfDpL'q>^O-)2eLD!!"MI!!*NB[fE<+!$V:@!=]b'!.k4I!!"4#!6G3A&/i+\U&Y0Cr;Zj-'BfFJ
!;-<l+oMBA%2>'-aT);b])\2u!>$.9!.k4?!!"MI!!*NBRK18+!$V:@!=]a_!13`d,4#;]!9O7^&/h)?
^An6`r;Zj-'?^B>!!"2@!!*NCpAfdFjo>B*ScH.u!>$-q!0.$Z.fB>J%28X>JcOa0!$V:@!=]aB!4;e,
,0p7D!!<3$&/g3&fDkn$r;Zj-'=%V>!!"2@!!*NCh>i--!WW3EK`KBu!>$-X!2fes.fB>J%27b%JcPWI
!$V:@!=]a)!6tQE,.7KB!!*WKkQ$27o`+tAr;Zj-'9rR>!!"2@!!*NC_#U#+!$^S+JcP*:!>$-;!5nj;
.fB>J%26_]QiI+0r;Zj-'_26U!:'Ub,+/GB!!*WKb5d_+!%RpI!=]_:!.k45!!"2@!!*NCU]@t+!$]Pc
M#[Pf)>jJd!9!nX.fB>J%25]@[/^1Mr;Zj-'\*2?!!4>E!.k4"!!*WKZ2gs+!%RpI!=]_!!.k1P!!"2@
!!*NCMZD3+!$\ZJU&Y3*)<1^K!;ZZq.fB>J%24g'c2[hfr;Zj-'YFF?!!"5&!.k4?!!*WKPlSo+!%RpI
!=]^Y!1a)i+oMBA%2A10JcP9?!$[X-^An9G)9)ZD!!"MI!!*NBnc47AlMpo.r;Zj-'V>B?!!"4^!0.$[
&/k3BJcOp5!%RpI!=]^<!4i.1+oMBA%2@.hNW9&'p&K[Eg].?d)6!VD!!"MI!!*NBeGtF+![.OD!rr<1
'SZV?!!"4E!2fet&/j=)JcGiP!%RpI!=]^#!7LoJ+oMBA%2?8OVZ6]@h#N$,o`,"()3=jD!!"MI!!*NB
]E"Z+!$V:@!=]b,!.k4D!!"4(!5nj<&/i:aSH&X>r;Zj-'C>dO!:Tsg+oMBA%2>62_uKc]^]9Pu!>$.>
!.k4:!!"MI!!*NBT)cV+!$V:@!=]ad!0[B_,4PYb!9!nY&/h8D\c;^[r;Zj-'@6`>!!"2@!!*NCquD<K
i;`j%UB%Lu!>$.!!/U[W.KBGN!!!HAL&fj+!$V:@!=]aK!3?/#,1lmI!;ZZr&/gB+df9@tr;Zj-'=Rt>
!!"2@!!*NCirFZ2q>^L>M?(`u!>$-]!29Gn.fB>J%27q*JcPHD!$V:@!=]a.!6G3@,.diB!!*WKm/V_<
n,NG<r;Zj-':Jp>!!"2@!!*NC`W2A+!$^b0JcOp5!>$-@!5AL6.fB>J%26nbP5kS+r;Zj-'__TZ!9O7]
,+\eB!!*WKciB(+!%RpI!=]_?!.k40!!"2@!!*NCW;s=+!$]_hL&_;U!"^$&!8%8O.fB>J%26#IX8i5D
r;Zj-']&hA!!3-#,)$$B!!*WK[fE<+!%RpI!=]_&!.k4I!!"2@!!*NCO9!Q+!$\iOSH&[%)<_'P!;-<l
.fB>J%25!,aT);ar;Zj-'Ysd?!!"5+!.k4:!!*WKRK18+!%RpI!=]^^!13`d+oMBA%2A@5JcP*:!$[g2
\c;aB)9W#D!!"MI!!*NBpAfdFjo>B)r;Zj-'Vk`?!!"4c!/U[V&/kBGJcOa0!%RpI!=]^A!4;e,+oMBA
%2@=mM#[T$!!%TNdf9C[)6s7D!!"MI!!*NBh>i--!WW3Dr;Zj-'T2t?!!"4J!29Go&/jL.JcPWI!%RpI
!=]^(!6tQE+oMBA%2?GTU&Y0;iW+Q1n,NJ#)3k3D!!"MI!!*NB_#U#+!$V:@!=]b1!.k4?!!"4-!5AL7
&/iIfQiI+9r;Zj-'Cl-T!:'Ub+oMBA%2>E7^An6X`;knu!>$.C!.k45!!"MI!!*NBU]@t+!$V:@!=]ai
!0.$Z,5)"g!8IPT&/hGI[/^1Vr;Zj-'@d)>!!4;D!!<3$%2=NsfDkmqX8o-u!>$.*!.k1P!!"MI!!*NB
MZD3+!$V:@!=]aP!2fes,2E6N!;-<m&/gQ0c2[hor;Zj-'>+=>!!"2@!!*NCkQ$27o`+t9Nr[)u!>$-b
!1a)i.fB>J%28+/JcP9?!$V:@!=]a3!5nj;,/=2B!!*WKnc47AlMpo7r;Zj-';#9>!!"2@!!*NCb5d_+
!$^q5JcOa0!>$-E!4i.1.fB>J%27(gNW9&&r;Zj-'`7r_!9!nX,,5.B!!*WKeGtF+!\+0M!rr<1'8?M>
!!"2@!!*NCZ2gs+!$^%qJcPWI!>$-,!7LoJ.fB>J%262NVZ6]?r;Zj-']T1F!;ZZq,)QBB!!*WK]E"Z+
!%RpI!=]_+!.k4D!!"2@!!*NCPlSo+!$]#TQiI-u)=7EU!:Tsg.fB>J%2501_uKc\r;Zj-'ZL-?!!"50
!.k45!!*WKT)cV+!%RpI!=]^c!0[B_+oMBA%2AO:JcOp5!$\!7[/^4=):/AD!!"MI!!*NBquD<Ki;`j$
r;Zj-'WD)?!!"4h!/:IU!!!QJL&fj+!%RpI!=]^J!3?/#+oMBA%2@Y!JcGiP!$[*sc2[kV)7KUD!!"MI
!!*NBirFZ2q>^L=r;Zj-'T`=?!!"4O!1a)j&/j[3JcPHD!%RpI!=]^-!6G3@+oMBA%2?VYSH&X6k5^)6
lMpqs)4CQD!!"MI!!*NB`W2A+!$V:@!=]b6!.k4:!!"42!4i.2&/iXkP5kS4r;Zj-'DDKY!9O7]+oMBA
%2>T<\c;^SaoI7u!>$.H!.k40!!"MI!!*NBW;s=+!$V:@!=]an!/U[W+ohUp!7LoK&/hbRX8i5Mr;Zj-
'A`_@!!3-#+oMBA%2=^#df9@lYlLKu!>$./!.k4I!!"MI!!*NBO9!Q+!$V:@!=]aU!29Gn,2rTS!:Tsh
&/g`5aT);jr;Zj-'>X[>!!"2@!!*NCm/V_<n,NG4PQ8Gu!>$-g!13`d.fB>J%28:4JcP*:!$V:@!=]a8
!5AL6,/jPB!!*WKpAfdFjo>B2r;Zj-';PW>!!"2@!!*NCciB(+!$_+:JcOR+!>$-J!4;e,.fB>J%277l
M#[T#!!!*$!"BWs!8%8O,-1dB!!*NKh>i--!WW9Mr;Zj*'oN(A!!*-Br;Zj+'t41A!!*-Ch#N$,o`,"!
,*2fN!!*9Jr;Zj')S?'F!!*3@r;Zj')s@9R!;6Bn"<3C%_uKi?,m2!aScAd((]==8!ZV=1!.k4@!!*N@
r;Zm#*!2T0`;foK'#4L1!!3TQ"7uSF!:9af$7#]N!!3KG"/,_2!!3BE!rN$"$Q9)k!0mNc#TNp9!.k4.
!!<`V*Z:mi^(USh+s.!b!!<WJ(),1-Oq%R0)A`PQ!!E]L(DIF4&EOH*(E41oU&_:q!WrfAfbTP_!=fG6
!;lfu!XT<n&_ms!$O?D+!WiZ;[Lo_U!=K._!.k4F!!361&<@UY('+mOpAb6r#n=KYWt>@?#PS3"!XT>!
&V:Vo&HN7ELB,KtJ,~>

%%EndBinary
grestore
np
592.581 23.4164 mo
619.919 23.4164 li
.90573 .514275 .0514229 .00137331 cmyk
.39979 lw
1 lj
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
638.742 19.1548 mo
638.856 21.2742 li
638.6 21.2742 li
638.543 20.9016 638.486 20.6341 638.4 20.4748 cv
638.258 20.2188 638.087 20.0282 637.859 19.9058 cv
637.631 19.7835 637.318 19.7209 636.948 19.7209 cv
635.667 19.7209 li
635.667 26.6283 li
635.667 27.1802 635.724 27.5273 635.837 27.6667 cv
636.008 27.8516 636.293 27.9455 636.635 27.9455 cv
636.948 27.9455 li
636.948 28.193 li
633.104 28.193 li
633.104 27.9455 li
633.417 27.9455 li
633.816 27.9455 634.072 27.8288 634.243 27.5984 cv
634.328 27.4561 634.385 27.1318 634.385 26.6283 cv
634.385 19.7209 li
633.303 19.7209 li
632.876 19.7209 632.591 19.7522 632.392 19.8148 cv
632.164 19.9002 631.965 20.0623 631.794 20.3013 cv
631.651 20.5431 631.537 20.8674 631.509 21.2742 cv
631.253 21.2742 li
631.367 19.1548 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
640.622 24.3894 mo
640.622 25.294 640.849 26.0053 641.305 26.5202 cv
641.732 27.0351 642.245 27.2911 642.871 27.2911 cv
643.27 27.2911 643.612 27.183 643.896 26.964 cv
644.21 26.7449 644.437 26.3665 644.637 25.8346 cv
644.865 25.9654 li
644.751 26.5742 644.494 27.129 644.039 27.6297 cv
643.583 28.1304 643.042 28.3807 642.359 28.3807 cv
641.618 28.3807 640.992 28.0934 640.479 27.5216 cv
639.938 26.9526 639.682 26.1845 639.682 25.2201 cv
639.682 24.176 639.967 23.3624 640.479 22.7792 cv
641.02 22.1931 641.704 21.9001 642.501 21.9001 cv
643.184 21.9001 643.754 22.1277 644.181 22.5772 cv
644.637 23.0295 644.865 23.6326 644.865 24.3894 cv
cp
640.622 23.9996 mo
643.469 23.9996 li
643.441 23.6099 643.384 23.3339 643.327 23.1746 cv
643.213 22.9271 643.042 22.7308 642.814 22.5886 cv
642.615 22.4463 642.359 22.3752 642.131 22.3752 cv
641.761 22.3752 641.419 22.5174 641.134 22.8048 cv
640.849 23.0921 640.678 23.4904 640.622 23.9996 cv
cp
f
649.136 27.3111 mo
648.51 27.7975 648.111 28.0763 647.94 28.1531 cv
647.712 28.2641 647.456 28.3181 647.171 28.3181 cv
646.772 28.3181 646.402 28.173 646.146 27.8857 cv
645.861 27.5956 645.719 27.2172 645.719 26.7478 cv
645.719 26.4491 645.804 26.1902 645.918 25.9711 cv
646.118 25.6724 646.431 25.3879 646.886 25.1205 cv
647.342 24.8531 648.082 24.5288 649.136 24.1476 cv
649.136 23.9086 li
649.136 23.2969 649.022 22.8816 648.851 22.654 cv
648.652 22.4292 648.367 22.3154 647.997 22.3154 cv
647.712 22.3154 647.484 22.3894 647.342 22.5402 cv
647.171 22.691 647.086 22.8645 647.086 23.0608 cv
647.086 23.4477 li
647.086 23.6525 647.029 23.809 646.943 23.92 cv
646.829 24.0309 646.687 24.0878 646.516 24.0878 cv
646.345 24.0878 646.231 24.0309 646.118 23.9143 cv
646.004 23.7976 645.975 23.6412 645.975 23.442 cv
645.975 23.058 646.146 22.7081 646.545 22.3866 cv
646.943 22.0679 647.484 21.9086 648.196 21.9086 cv
648.737 21.9086 649.193 21.9997 649.535 22.1817 cv
649.791 22.3183 649.99 22.5345 650.104 22.8275 cv
650.19 23.0181 650.218 23.4107 650.218 23.9996 cv
650.218 26.0735 li
650.218 26.6567 650.247 27.0123 650.275 27.1432 cv
650.275 27.2741 650.332 27.3623 650.361 27.4049 cv
650.56 27.4704 li
650.731 27.4277 li
650.845 27.368 651.016 27.2058 651.272 26.9384 cv
651.272 27.3111 li
650.788 27.9796 650.304 28.3125 649.848 28.3125 cv
649.62 28.3125 649.449 28.2356 649.335 28.0849 cv
649.193 27.9341 649.136 27.6781 649.136 27.3111 cv
cp
649.136 26.8786 mo
649.136 24.5544 li
648.453 24.8189 648.026 25.0096 647.826 25.1205 cv
647.484 25.3168 647.228 25.5216 647.086 25.735 cv
646.915 25.9455 646.858 26.1788 646.858 26.432 cv
646.858 26.7535 646.943 27.018 647.143 27.2314 cv
647.314 27.4419 647.541 27.5472 647.798 27.5472 cv
648.139 27.5472 648.567 27.3224 649.136 26.8786 cv
cp
f
656.91 25.8716 mo
656.768 26.6767 656.426 27.2968 655.942 27.7292 cv
655.486 28.1645 654.945 28.3807 654.347 28.3807 cv
653.664 28.3807 653.066 28.0906 652.553 27.5074 cv
652.041 26.9242 651.784 26.139 651.784 25.1461 cv
651.784 24.1874 652.069 23.4079 652.639 22.8076 cv
653.208 22.2074 653.892 21.9086 654.689 21.9086 cv
655.287 21.9086 655.771 22.0679 656.17 22.3866 cv
656.54 22.7024 656.739 23.0324 656.739 23.3737 cv
656.739 23.5416 656.682 23.6781 656.597 23.7834 cv
656.483 23.8887 656.312 23.9399 656.113 23.9399 cv
655.857 23.9399 655.657 23.8545 655.543 23.6867 cv
655.458 23.5928 655.401 23.4164 655.372 23.1547 cv
655.372 22.893 655.259 22.691 655.116 22.5544 cv
654.945 22.4207 654.746 22.3524 654.461 22.3524 cv
654.034 22.3524 653.664 22.5174 653.379 22.8474 cv
653.037 23.2827 652.838 23.8574 652.838 24.5743 cv
652.838 25.3026 653.037 25.9455 653.379 26.5031 cv
653.749 27.0607 654.233 27.3395 654.831 27.3395 cv
655.287 27.3395 655.657 27.1916 656.027 26.8929 cv
656.255 26.688 656.483 26.3182 656.739 25.7805 cv
cp
f
659.587 18.7167 mo
659.587 23.1803 li
660.071 22.6398 660.47 22.2927 660.755 22.1391 cv
661.039 21.9855 661.353 21.9086 661.637 21.9086 cv
661.979 21.9086 662.264 22.0025 662.52 22.196 cv
662.776 22.3866 662.947 22.6853 663.09 23.0921 cv
663.175 23.3766 663.204 23.8972 663.204 24.6539 cv
663.204 26.8132 li
663.204 27.2001 663.232 27.4647 663.289 27.6069 cv
663.346 27.7122 663.431 27.7975 663.517 27.8601 cv
663.631 27.9199 663.83 27.9512 664.115 27.9512 cv
664.115 28.193 li
661.096 28.193 li
661.096 27.9512 li
661.239 27.9512 li
661.523 27.9512 661.723 27.9085 661.837 27.8231 cv
661.951 27.7378 662.036 27.6098 662.065 27.4391 cv
662.093 27.368 662.093 27.1603 662.093 26.8132 cv
662.093 24.6539 li
662.093 23.9883 662.065 23.5501 662.008 23.3396 cv
661.922 23.1319 661.808 22.9755 661.666 22.8731 cv
661.523 22.7678 661.324 22.7137 661.125 22.7137 cv
660.897 22.7137 660.669 22.7735 660.441 22.8901 cv
660.214 23.0039 659.929 23.2372 659.587 23.5871 cv
659.587 26.8132 li
659.587 27.2314 659.615 27.4903 659.672 27.5927 cv
659.701 27.6951 659.786 27.7805 659.929 27.8487 cv
660.043 27.917 660.271 27.9512 660.584 27.9512 cv
660.584 28.193 li
657.537 28.193 li
657.537 27.9512 li
657.822 27.9512 658.021 27.9085 658.192 27.826 cv
658.277 27.7805 658.363 27.698 658.391 27.5728 cv
658.448 27.4476 658.476 27.1944 658.476 26.8132 cv
658.476 21.2885 li
658.476 20.5915 658.476 20.1619 658.419 20.0026 cv
658.391 19.8433 658.334 19.7352 658.277 19.6783 cv
658.22 19.6185 658.106 19.5901 657.992 19.5901 cv
657.907 19.5901 657.765 19.6242 657.537 19.6953 cv
657.451 19.4621 li
659.274 18.7167 li
cp
f
665.653 24.3894 mo
665.653 25.294 665.88 26.0053 666.308 26.5202 cv
666.763 27.0351 667.276 27.2911 667.874 27.2911 cv
668.272 27.2911 668.643 27.183 668.927 26.964 cv
669.212 26.7449 669.469 26.3666 669.668 25.8346 cv
669.867 25.9654 li
669.782 26.5742 669.525 27.129 669.07 27.6297 cv
668.614 28.1304 668.045 28.3807 667.361 28.3807 cv
666.649 28.3807 666.023 28.0934 665.482 27.5216 cv
664.969 26.9526 664.713 26.1845 664.713 25.2201 cv
664.713 24.176 664.969 23.3624 665.51 22.7792 cv
666.051 22.1931 666.706 21.9001 667.532 21.9001 cv
668.216 21.9001 668.785 22.1277 669.212 22.5772 cv
669.668 23.0295 669.867 23.6326 669.867 24.3894 cv
cp
665.653 23.9996 mo
668.472 23.9996 li
668.472 23.6099 668.415 23.3339 668.329 23.1746 cv
668.244 22.9271 668.073 22.7308 667.845 22.5886 cv
667.618 22.4463 667.39 22.3752 667.162 22.3752 cv
666.792 22.3752 666.45 22.5174 666.165 22.8048 cv
665.88 23.0921 665.71 23.4904 665.653 23.9996 cv
cp
f
672.487 21.9086 mo
672.487 23.2799 li
673 22.3667 673.512 21.9086 674.053 21.9086 cv
674.31 21.9086 674.509 21.9826 674.651 22.1305 cv
674.822 22.2785 674.908 22.452 674.908 22.6483 cv
674.908 22.8218 674.851 22.9698 674.737 23.0893 cv
674.623 23.2088 674.48 23.2685 674.31 23.2685 cv
674.167 23.2685 673.996 23.1917 673.797 23.0381 cv
673.598 22.8844 673.455 22.8076 673.37 22.8076 cv
673.284 22.8076 673.199 22.8531 673.085 22.9413 cv
672.886 23.1234 672.686 23.4221 672.487 23.8403 cv
672.487 26.7648 li
672.487 27.1034 672.516 27.3594 672.601 27.533 cv
672.658 27.6525 672.772 27.752 672.914 27.8317 cv
673.057 27.9113 673.256 27.9512 673.541 27.9512 cv
673.541 28.193 li
670.408 28.193 li
670.408 27.9512 li
670.721 27.9512 670.949 27.9028 671.12 27.8061 cv
671.234 27.735 671.291 27.6212 671.348 27.4647 cv
671.376 27.3907 671.376 27.1745 671.376 26.8189 cv
671.376 24.4548 li
671.376 23.7436 671.348 23.3197 671.319 23.186 cv
671.291 23.0494 671.263 22.9499 671.177 22.8901 cv
671.092 22.8275 671.006 22.7962 670.892 22.7962 cv
670.75 22.7962 670.579 22.8275 670.408 22.8958 cv
670.351 22.654 li
672.202 21.9086 li
cp
f
592.581 42.7132 mo
619.919 42.7132 li
0 .642634 1 0 cmyk
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
634.186 38.0249 mo
634.926 38.0249 635.581 38.4658 636.094 39.342 cv
636.606 40.2211 636.863 41.3619 636.863 42.7701 cv
636.863 44.2893 636.578 45.487 636.037 46.3632 cv
635.467 47.2394 634.812 47.6775 634.1 47.6775 cv
633.388 47.6775 632.762 47.2508 632.192 46.403 cv
631.651 45.5495 631.395 44.3974 631.395 42.938 cv
631.395 41.4757 631.651 40.2922 632.192 39.3847 cv
632.733 38.48 633.388 38.0249 634.186 38.0249 cv
cp
635.61 42.625 mo
635.61 39.8171 635.125 38.4146 634.129 38.4146 cv
633.132 38.4146 632.62 39.8171 632.62 42.625 cv
cp
632.62 43.0375 mo
632.62 44.4913 632.762 45.5609 633.018 46.2522 cv
633.303 46.9435 633.645 47.2878 634.129 47.2878 cv
635.097 47.2878 635.61 45.871 635.61 43.0375 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
641.049 41.6066 mo
648.253 41.6066 li
648.253 42.1528 li
641.049 42.1528 li
cp
641.049 43.7772 mo
648.253 43.7772 li
648.253 44.3263 li
641.049 44.3263 li
cp
f
652.411 43.0233 mo
652.411 41.9935 652.582 41.1059 652.895 40.3633 cv
653.208 39.618 653.607 39.0632 654.12 38.6991 cv
654.518 38.4118 654.945 38.2667 655.372 38.2667 cv
656.056 38.2667 656.682 38.6194 657.224 39.325 cv
657.935 40.2012 658.277 41.3875 658.277 42.8867 cv
658.277 43.9337 658.106 44.8241 657.822 45.5581 cv
657.508 46.2892 657.138 46.8212 656.654 47.1541 cv
656.198 47.4841 655.743 47.6491 655.287 47.6491 cv
654.433 47.6491 653.721 47.1398 653.151 46.1214 cv
652.667 45.2651 652.411 44.2324 652.411 43.0233 cv
cp
653.721 43.1911 mo
653.721 44.4344 653.892 45.45 654.176 46.2352 cv
654.433 46.898 654.831 47.228 655.316 47.228 cv
655.572 47.228 655.8 47.1228 656.056 46.9066 cv
656.341 46.6903 656.512 46.3291 656.654 45.8255 cv
656.853 45.0602 656.967 43.982 656.967 42.5909 cv
656.967 41.561 656.853 40.7019 656.654 40.0134 cv
656.483 39.5013 656.284 39.14 656.027 38.9267 cv
655.828 38.7787 655.629 38.7048 655.372 38.7048 cv
655.059 38.7048 654.803 38.8413 654.547 39.1144 cv
654.233 39.4814 654.006 40.0618 653.892 40.8527 cv
653.778 41.6435 653.721 42.423 653.721 43.1911 cv
cp
f
660.47 46.1982 mo
660.669 46.1982 660.84 46.2693 660.982 46.4144 cv
661.125 46.5595 661.21 46.733 661.21 46.9379 cv
661.21 47.1398 661.125 47.3134 660.982 47.4585 cv
660.84 47.6035 660.669 47.6775 660.47 47.6775 cv
660.271 47.6775 660.071 47.6035 659.929 47.4585 cv
659.786 47.3134 659.729 47.1398 659.729 46.9379 cv
659.729 46.7273 659.786 46.5538 659.929 46.4115 cv
660.071 46.2693 660.271 46.1982 660.47 46.1982 cv
cp
f
662.663 43.0233 mo
662.663 41.9935 662.833 41.1059 663.147 40.3633 cv
663.431 39.618 663.859 39.0632 664.371 38.6991 cv
664.77 38.4118 665.197 38.2667 665.624 38.2667 cv
666.308 38.2667 666.934 38.6194 667.475 39.325 cv
668.159 40.2012 668.529 41.3875 668.529 42.8867 cv
668.529 43.9337 668.358 44.8241 668.073 45.5581 cv
667.76 46.2892 667.361 46.8212 666.906 47.1541 cv
666.45 47.4841 665.994 47.6491 665.539 47.6491 cv
664.684 47.6491 663.973 47.1398 663.403 46.1214 cv
662.919 45.2651 662.663 44.2324 662.663 43.0233 cv
cp
663.973 43.1911 mo
663.973 44.4344 664.115 45.45 664.428 46.2352 cv
664.684 46.898 665.055 47.228 665.567 47.228 cv
665.795 47.228 666.051 47.1228 666.308 46.9066 cv
666.564 46.6903 666.763 46.3291 666.906 45.8255 cv
667.105 45.0602 667.219 43.982 667.219 42.5909 cv
667.219 41.561 667.105 40.7019 666.877 40.0134 cv
666.735 39.5013 666.535 39.14 666.279 38.9267 cv
666.08 38.7787 665.88 38.7048 665.596 38.7048 cv
665.311 38.7048 665.026 38.8413 664.798 39.1144 cv
664.485 39.4814 664.257 40.0618 664.143 40.8527 cv
664.029 41.6435 663.973 42.423 663.973 43.1911 cv
cp
f
674.936 38.4516 mo
674.423 39.5867 li
671.69 39.5867 li
671.092 40.7986 li
672.288 40.9722 673.199 41.4103 673.911 42.1101 cv
674.48 42.7161 674.794 43.4273 674.794 44.2437 cv
674.794 44.7188 674.68 45.1598 674.509 45.5638 cv
674.31 45.9678 674.053 46.312 673.768 46.5965 cv
673.484 46.881 673.142 47.1085 672.772 47.2821 cv
672.288 47.5267 671.747 47.6491 671.206 47.6491 cv
670.665 47.6491 670.266 47.558 670.038 47.3731 cv
669.782 47.1911 669.668 46.9862 669.668 46.7615 cv
669.668 46.6391 669.696 46.5282 669.81 46.4343 cv
669.924 46.3376 670.038 46.2892 670.209 46.2892 cv
670.323 46.2892 670.408 46.3063 670.494 46.3433 cv
670.579 46.3774 670.75 46.4684 670.949 46.6164 cv
671.291 46.8468 671.604 46.9635 671.946 46.9635 cv
672.487 46.9635 672.943 46.7672 673.341 46.3746 cv
673.712 45.9791 673.911 45.5012 673.911 44.9379 cv
673.911 44.3917 673.74 43.8825 673.398 43.4074 cv
673.028 42.9351 672.544 42.5681 671.946 42.3121 cv
671.462 42.1101 670.807 41.9963 669.953 41.965 cv
671.69 38.4516 li
cp
f
592.581 62.01 mo
619.919 62.01 li
.831937 .113405 1 .0184939 cmyk
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
634.186 57.3216 mo
634.926 57.3216 635.581 57.7626 636.094 58.6417 cv
636.606 59.5179 636.863 60.6587 636.863 62.0669 cv
636.863 63.5861 636.578 64.7838 636.037 65.66 cv
635.467 66.5362 634.812 66.9743 634.1 66.9743 cv
633.388 66.9743 632.762 66.5504 632.192 65.6998 cv
631.651 64.8463 631.395 63.6942 631.395 62.2347 cv
631.395 60.7725 631.651 59.589 632.192 58.6843 cv
632.733 57.7768 633.388 57.3216 634.186 57.3216 cv
cp
635.61 61.9218 mo
635.61 59.1139 635.125 57.7114 634.129 57.7114 cv
633.132 57.7114 632.62 59.1139 632.62 61.9218 cv
cp
632.62 62.3343 mo
632.62 63.7881 632.762 64.8577 633.018 65.549 cv
633.303 66.2403 633.645 66.5874 634.129 66.5874 cv
635.097 66.5874 635.61 65.1678 635.61 62.3343 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
641.049 60.9034 mo
648.253 60.9034 li
648.253 61.4496 li
641.049 61.4496 li
cp
641.049 63.074 mo
648.253 63.074 li
648.253 63.623 li
641.049 63.623 li
cp
f
652.411 62.3201 mo
652.411 61.2902 652.582 60.4026 652.895 59.6601 cv
653.208 58.9148 653.607 58.36 654.12 57.9959 cv
654.518 57.7085 654.945 57.5635 655.372 57.5635 cv
656.056 57.5635 656.682 57.9162 657.224 58.6246 cv
657.935 59.498 658.277 60.6843 658.277 62.1835 cv
658.277 63.2305 658.106 64.1209 657.822 64.8549 cv
657.508 65.586 657.138 66.118 656.654 66.4509 cv
656.198 66.7809 655.743 66.9459 655.287 66.9459 cv
654.433 66.9459 653.721 66.4366 653.151 65.421 cv
652.667 64.5619 652.411 63.5292 652.411 62.3201 cv
cp
653.721 62.4879 mo
653.721 63.7312 653.892 64.7468 654.176 65.532 cv
654.433 66.1948 654.831 66.5277 655.316 66.5277 cv
655.572 66.5277 655.8 66.4196 656.056 66.2034 cv
656.341 65.99 656.512 65.6287 656.654 65.1223 cv
656.853 64.357 656.967 63.2788 656.967 61.8877 cv
656.967 60.8578 656.853 59.9987 656.654 59.3102 cv
656.483 58.7981 656.284 58.4368 656.027 58.2235 cv
655.828 58.0755 655.629 58.0016 655.372 58.0016 cv
655.059 58.0016 654.803 58.1381 654.547 58.4112 cv
654.233 58.7782 654.006 59.3586 653.892 60.1494 cv
653.778 60.9403 653.721 61.7198 653.721 62.4879 cv
cp
f
660.47 65.495 mo
660.669 65.495 660.84 65.5661 660.982 65.7112 cv
661.125 65.8563 661.21 66.0298 661.21 66.2346 cv
661.21 66.4366 661.125 66.613 660.982 66.7581 cv
660.84 66.9032 660.669 66.9743 660.47 66.9743 cv
660.271 66.9743 660.071 66.9032 659.929 66.7581 cv
659.786 66.613 659.729 66.4366 659.729 66.2346 cv
659.729 66.027 659.786 65.8506 659.929 65.7083 cv
660.071 65.5661 660.271 65.495 660.47 65.495 cv
cp
f
663.773 58.636 mo
665.966 57.5635 li
666.194 57.5635 li
666.194 65.1934 li
666.194 65.6998 666.222 66.0156 666.251 66.1408 cv
666.308 66.2631 666.393 66.3598 666.507 66.4252 cv
666.649 66.4935 666.934 66.5305 667.333 66.539 cv
667.333 66.7865 li
663.944 66.7865 li
663.944 66.539 li
664.371 66.5305 664.627 66.4935 664.77 66.4309 cv
664.884 66.3655 664.969 66.2773 665.026 66.1692 cv
665.083 66.0611 665.083 65.7368 665.083 65.1934 cv
665.083 60.3173 li
665.083 59.6573 665.083 59.2362 665.026 59.0513 cv
664.998 58.9091 664.941 58.8038 664.855 58.7355 cv
664.77 58.6701 664.684 58.636 664.57 58.636 cv
664.4 58.636 664.172 58.7043 663.887 58.8436 cv
cp
f
670.608 58.636 mo
672.8 57.5635 li
673.028 57.5635 li
673.028 65.1934 li
673.028 65.6998 673.028 66.0156 673.085 66.1408 cv
673.114 66.2631 673.199 66.3598 673.341 66.4252 cv
673.484 66.4935 673.74 66.5305 674.167 66.539 cv
674.167 66.7865 li
670.75 66.7865 li
670.75 66.539 li
671.177 66.5305 671.462 66.4935 671.576 66.4309 cv
671.718 66.3655 671.804 66.2773 671.832 66.1692 cv
671.889 66.0611 671.917 65.7368 671.917 65.1934 cv
671.917 60.3173 li
671.917 59.6573 671.889 59.2362 671.861 59.0513 cv
671.832 58.9091 671.775 58.8038 671.69 58.7355 cv
671.604 58.6701 671.49 58.636 671.376 58.636 cv
671.234 58.636 670.978 58.7043 670.693 58.8436 cv
cp
f
592.581 81.3068 mo
619.919 81.3068 li
.0995499 1 1 .024567 cmyk
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
634.186 76.6213 mo
634.926 76.6213 635.581 77.0594 636.094 77.9385 cv
636.606 78.8147 636.863 79.9583 636.863 81.3637 cv
636.863 82.8857 636.578 84.0834 636.037 84.9568 cv
635.467 85.833 634.812 86.2711 634.1 86.2711 cv
633.388 86.2711 632.762 85.8472 632.192 84.9966 cv
631.651 84.146 631.395 82.991 631.395 81.5344 cv
631.395 80.0693 631.651 78.8858 632.192 77.9811 cv
632.733 77.0736 633.388 76.6213 634.186 76.6213 cv
cp
635.61 81.2186 mo
635.61 78.4107 635.125 77.0082 634.129 77.0082 cv
633.132 77.0082 632.62 78.4107 632.62 81.2186 cv
cp
632.62 81.6311 mo
632.62 83.0848 632.762 84.1574 633.018 84.8458 cv
633.303 85.5371 633.645 85.8842 634.129 85.8842 cv
635.097 85.8842 635.61 84.4674 635.61 81.6311 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
641.049 80.2001 mo
648.253 80.2001 li
648.253 80.7463 li
641.049 80.7463 li
cp
641.049 82.3708 mo
648.253 82.3708 li
648.253 82.9198 li
641.049 82.9198 li
cp
f
652.411 81.6197 mo
652.411 80.587 652.582 79.6994 652.895 78.9569 cv
653.208 78.2116 653.607 77.6568 654.12 77.2927 cv
654.518 77.0053 654.945 76.8602 655.372 76.8602 cv
656.056 76.8602 656.682 77.213 657.224 77.9214 cv
657.935 78.7948 658.277 79.9811 658.277 81.4803 cv
658.277 82.5272 658.106 83.4177 657.822 84.1517 cv
657.508 84.8828 657.138 85.4148 656.654 85.7476 cv
656.198 86.0776 655.743 86.2426 655.287 86.2426 cv
654.433 86.2426 653.721 85.7363 653.151 84.7178 cv
652.667 83.8586 652.411 82.826 652.411 81.6197 cv
cp
653.721 81.7847 mo
653.721 83.0279 653.892 84.0436 654.176 84.8287 cv
654.433 85.4916 654.831 85.8244 655.316 85.8244 cv
655.572 85.8244 655.8 85.7163 656.056 85.503 cv
656.341 85.2868 656.512 84.9255 656.654 84.4191 cv
656.853 83.6538 656.967 82.5756 656.967 81.1845 cv
656.967 80.1546 656.853 79.2955 656.654 78.607 cv
656.483 78.0949 656.284 77.7336 656.027 77.5203 cv
655.828 77.3723 655.629 77.3012 655.372 77.3012 cv
655.059 77.3012 654.803 77.4349 654.547 77.708 cv
654.233 78.075 654.006 78.6554 653.892 79.4462 cv
653.778 80.2371 653.721 81.0166 653.721 81.7847 cv
cp
f
660.47 84.7918 mo
660.669 84.7918 660.84 84.8629 660.982 85.008 cv
661.125 85.1531 661.21 85.3266 661.21 85.5314 cv
661.21 85.7363 661.125 85.9098 660.982 86.0549 cv
660.84 86.2 660.669 86.2711 660.47 86.2711 cv
660.271 86.2711 660.071 86.2 659.929 86.0549 cv
659.786 85.9098 659.729 85.7363 659.729 85.5314 cv
659.729 85.3238 659.786 85.1474 659.929 85.0051 cv
660.071 84.8629 660.271 84.7918 660.47 84.7918 cv
cp
f
663.773 77.9328 mo
665.966 76.8602 li
666.194 76.8602 li
666.194 84.4902 li
666.194 84.9966 666.222 85.3124 666.251 85.4375 cv
666.308 85.5627 666.393 85.6566 666.507 85.7249 cv
666.649 85.7903 666.934 85.8273 667.333 85.8358 cv
667.333 86.0833 li
663.944 86.0833 li
663.944 85.8358 li
664.371 85.8273 664.627 85.7932 664.77 85.7277 cv
664.884 85.6623 664.969 85.577 665.026 85.4688 cv
665.083 85.3579 665.083 85.0336 665.083 84.4902 cv
665.083 79.6141 li
665.083 78.9569 665.083 78.533 665.026 78.3481 cv
664.998 78.2059 664.941 78.1006 664.855 78.0352 cv
664.77 77.9669 664.684 77.9328 664.57 77.9328 cv
664.4 77.9328 664.172 78.0039 663.887 78.1404 cv
cp
f
675.278 84.3451 mo
674.623 86.0833 li
669.298 86.0833 li
669.298 85.8358 li
670.864 84.4077 671.974 83.2385 672.601 82.3338 cv
673.256 81.4263 673.569 80.5984 673.569 79.8474 cv
673.569 79.2727 673.398 78.8033 673.057 78.4335 cv
672.686 78.0665 672.288 77.8816 671.775 77.8816 cv
671.348 77.8816 670.949 78.0096 670.579 78.2713 cv
670.237 78.5302 669.981 78.9114 669.81 79.4149 cv
669.554 79.4149 li
669.668 78.5928 669.953 77.9612 670.408 77.5231 cv
670.864 77.0822 671.462 76.8602 672.145 76.8602 cv
672.886 76.8602 673.484 77.0964 673.968 77.5658 cv
674.48 78.038 674.708 78.5928 674.708 79.2329 cv
674.708 79.6909 674.594 80.1489 674.395 80.6069 cv
674.053 81.3239 673.541 82.0863 672.8 82.8914 cv
671.69 84.1005 671.006 84.8287 670.721 85.0762 cv
673.085 85.0762 li
673.569 85.0762 673.911 85.0592 674.082 85.025 cv
674.281 84.9881 674.452 84.9169 674.623 84.8088 cv
674.765 84.7007 674.908 84.5443 675.021 84.3451 cv
cp
f
592.581 100.604 mo
619.919 100.604 li
.505974 .716274 0 0 cmyk
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
634.186 95.9181 mo
634.926 95.9181 635.581 96.3562 636.094 97.2352 cv
636.606 98.1115 636.863 99.2551 636.863 100.663 cv
636.863 102.182 636.578 103.38 636.037 104.256 cv
635.467 105.13 634.812 105.568 634.1 105.568 cv
633.388 105.568 632.762 105.144 632.192 104.293 cv
631.651 103.443 631.395 102.288 631.395 100.831 cv
631.395 99.3689 631.651 98.1826 632.192 97.2779 cv
632.733 96.3704 633.388 95.9181 634.186 95.9181 cv
cp
635.61 100.518 mo
635.61 97.7103 635.125 96.305 634.129 96.305 cv
633.132 96.305 632.62 97.7103 632.62 100.518 cv
cp
632.62 100.928 mo
632.62 102.382 632.762 103.454 633.018 104.145 cv
633.303 104.837 633.645 105.181 634.129 105.181 cv
635.097 105.181 635.61 103.764 635.61 100.928 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
641.049 99.4969 mo
648.253 99.4969 li
648.253 100.043 li
641.049 100.043 li
cp
641.049 101.668 mo
648.253 101.668 li
648.253 102.217 li
641.049 102.217 li
cp
f
652.411 100.917 mo
652.411 99.8838 652.582 98.9991 652.895 98.2537 cv
653.208 97.5083 653.607 96.9536 654.12 96.5923 cv
654.518 96.3021 654.945 96.157 655.372 96.157 cv
656.056 96.157 656.682 96.5126 657.224 97.2182 cv
657.935 98.0916 658.277 99.2779 658.277 100.777 cv
658.277 101.824 658.106 102.714 657.822 103.448 cv
657.508 104.182 657.138 104.714 656.654 105.044 cv
656.198 105.374 655.743 105.542 655.287 105.542 cv
654.433 105.542 653.721 105.033 653.151 104.015 cv
652.667 103.158 652.411 102.126 652.411 100.917 cv
cp
653.721 101.082 mo
653.721 102.325 653.892 103.34 654.176 104.128 cv
654.433 104.791 654.831 105.121 655.316 105.121 cv
655.572 105.121 655.8 105.013 656.056 104.8 cv
656.341 104.584 656.512 104.222 656.654 103.716 cv
656.853 102.951 656.967 101.872 656.967 100.484 cv
656.967 99.4514 656.853 98.5922 656.654 97.9038 cv
656.483 97.3917 656.284 97.0304 656.027 96.817 cv
655.828 96.672 655.629 96.598 655.372 96.598 cv
655.059 96.598 654.803 96.7345 654.547 97.0048 cv
654.233 97.3718 654.006 97.9521 653.892 98.7459 cv
653.778 99.5367 653.721 100.313 653.721 101.082 cv
cp
f
660.47 104.089 mo
660.669 104.089 660.84 104.163 660.982 104.308 cv
661.125 104.45 661.21 104.623 661.21 104.828 cv
661.21 105.033 661.125 105.207 660.982 105.352 cv
660.84 105.497 660.669 105.568 660.47 105.568 cv
660.271 105.568 660.071 105.497 659.929 105.352 cv
659.786 105.207 659.729 105.033 659.729 104.828 cv
659.729 104.621 659.786 104.444 659.929 104.302 cv
660.071 104.16 660.271 104.089 660.47 104.089 cv
cp
f
663.773 97.2296 mo
665.966 96.157 li
666.194 96.157 li
666.194 103.787 li
666.194 104.293 666.222 104.609 666.251 104.734 cv
666.308 104.86 666.393 104.953 666.507 105.022 cv
666.649 105.087 666.934 105.124 667.333 105.133 cv
667.333 105.38 li
663.944 105.38 li
663.944 105.133 li
664.371 105.124 664.627 105.09 664.77 105.025 cv
664.884 104.959 664.969 104.874 665.026 104.766 cv
665.083 104.655 665.083 104.33 665.083 103.787 cv
665.083 98.9109 li
665.083 98.2537 665.083 97.8298 665.026 97.6449 cv
664.998 97.5027 664.941 97.3974 664.855 97.332 cv
664.77 97.2637 664.684 97.2296 664.57 97.2296 cv
664.4 97.2296 664.172 97.3007 663.887 97.4372 cv
cp
f
669.696 98.0659 mo
669.953 97.4571 670.266 96.9849 670.665 96.6549 cv
671.063 96.3249 671.547 96.157 672.145 96.157 cv
672.857 96.157 673.427 96.3932 673.825 96.8654 cv
674.11 97.2153 674.253 97.5909 674.253 97.9891 cv
674.253 98.6491 673.825 99.3291 673 100.032 cv
673.569 100.248 673.996 100.558 674.281 100.962 cv
674.566 101.366 674.708 101.841 674.708 102.39 cv
674.708 103.172 674.452 103.85 673.968 104.421 cv
673.313 105.167 672.373 105.542 671.12 105.542 cv
670.522 105.542 670.095 105.465 669.896 105.315 cv
669.668 105.164 669.554 105.002 669.554 104.828 cv
669.554 104.7 669.611 104.586 669.725 104.487 cv
669.81 104.39 669.953 104.342 670.095 104.342 cv
670.209 104.342 670.323 104.359 670.437 104.393 cv
670.494 104.416 670.665 104.498 670.949 104.64 cv
671.206 104.78 671.405 104.862 671.49 104.888 cv
671.661 104.936 671.832 104.962 672.031 104.962 cv
672.487 104.962 672.886 104.786 673.199 104.436 cv
673.541 104.083 673.712 103.668 673.712 103.19 cv
673.712 102.837 673.626 102.495 673.484 102.163 cv
673.37 101.915 673.227 101.724 673.114 101.596 cv
672.914 101.417 672.658 101.258 672.316 101.113 cv
671.974 100.968 671.633 100.897 671.291 100.897 cv
671.092 100.897 li
671.092 100.697 li
671.433 100.652 671.775 100.527 672.145 100.316 cv
672.487 100.109 672.743 99.8554 672.914 99.5623 cv
673.057 99.2722 673.142 98.9479 673.142 98.5979 cv
673.142 98.1399 673 97.7701 672.715 97.4884 cv
672.43 97.2068 672.06 97.0646 671.633 97.0646 cv
670.949 97.0646 670.38 97.4344 669.924 98.1712 cv
cp
f
592.581 119.9 mo
619.919 119.9 li
.340307 .716396 .722744 .271855 cmyk
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
634.186 115.215 mo
634.926 115.215 635.581 115.653 636.094 116.532 cv
636.606 117.408 636.863 118.552 636.863 119.96 cv
636.863 121.479 636.578 122.677 636.037 123.553 cv
635.467 124.429 634.812 124.868 634.1 124.868 cv
633.388 124.868 632.762 124.441 632.192 123.59 cv
631.651 122.74 631.395 121.585 631.395 120.128 cv
631.395 118.666 631.651 117.479 632.192 116.575 cv
632.733 115.667 633.388 115.215 634.186 115.215 cv
cp
635.61 119.815 mo
635.61 117.007 635.125 115.602 634.129 115.602 cv
633.132 115.602 632.62 117.007 632.62 119.815 cv
cp
632.62 120.225 mo
632.62 121.678 632.762 122.751 633.018 123.442 cv
633.303 124.134 633.645 124.478 634.129 124.478 cv
635.097 124.478 635.61 123.061 635.61 120.225 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
641.049 118.794 mo
648.253 118.794 li
648.253 119.34 li
641.049 119.34 li
cp
641.049 120.967 mo
648.253 120.967 li
648.253 121.513 li
641.049 121.513 li
cp
f
652.411 120.213 mo
652.411 119.183 652.582 118.296 652.895 117.55 cv
653.208 116.808 653.607 116.253 654.12 115.889 cv
654.518 115.599 654.945 115.457 655.372 115.457 cv
656.056 115.457 656.682 115.809 657.224 116.515 cv
657.935 117.388 658.277 118.575 658.277 120.074 cv
658.277 121.121 658.106 122.014 657.822 122.745 cv
657.508 123.479 657.138 124.011 656.654 124.341 cv
656.198 124.674 655.743 124.839 655.287 124.839 cv
654.433 124.839 653.721 124.33 653.151 123.311 cv
652.667 122.455 652.411 121.422 652.411 120.213 cv
cp
653.721 120.378 mo
653.721 121.624 653.892 122.637 654.176 123.425 cv
654.433 124.088 654.831 124.418 655.316 124.418 cv
655.572 124.418 655.8 124.31 656.056 124.097 cv
656.341 123.88 656.512 123.519 656.654 123.013 cv
656.853 122.247 656.967 121.169 656.967 119.781 cv
656.967 118.748 656.853 117.889 656.654 117.201 cv
656.483 116.691 656.284 116.327 656.027 116.114 cv
655.828 115.969 655.629 115.895 655.372 115.895 cv
655.059 115.895 654.803 116.031 654.547 116.302 cv
654.233 116.671 654.006 117.249 653.892 118.043 cv
653.778 118.834 653.721 119.613 653.721 120.378 cv
cp
f
660.47 123.385 mo
660.669 123.385 660.84 123.459 660.982 123.604 cv
661.125 123.747 661.21 123.92 661.21 124.125 cv
661.21 124.33 661.125 124.503 660.982 124.648 cv
660.84 124.794 660.669 124.868 660.47 124.868 cv
660.271 124.868 660.071 124.794 659.929 124.648 cv
659.786 124.503 659.729 124.33 659.729 124.125 cv
659.729 123.917 659.786 123.741 659.929 123.599 cv
660.071 123.456 660.271 123.385 660.47 123.385 cv
cp
f
663.773 116.529 mo
665.966 115.457 li
666.194 115.457 li
666.194 123.087 li
666.194 123.593 666.222 123.906 666.251 124.031 cv
666.308 124.156 666.393 124.25 666.507 124.318 cv
666.649 124.384 666.934 124.424 667.333 124.432 cv
667.333 124.68 li
663.944 124.68 li
663.944 124.432 li
664.371 124.424 664.627 124.387 664.77 124.321 cv
664.884 124.256 664.969 124.171 665.026 124.062 cv
665.083 123.951 665.083 123.627 665.083 123.087 cv
665.083 118.208 li
665.083 117.55 665.083 117.127 665.026 116.942 cv
664.998 116.799 664.941 116.694 664.855 116.629 cv
664.77 116.56 664.684 116.529 664.57 116.529 cv
664.4 116.529 664.172 116.597 663.887 116.734 cv
cp
f
675.363 121.346 mo
675.363 122.293 li
674.139 122.293 li
674.139 124.68 li
673.057 124.68 li
673.057 122.293 li
669.212 122.293 li
669.212 121.439 li
673.427 115.457 li
674.139 115.457 li
674.139 121.346 li
cp
673.057 121.346 mo
673.057 116.862 li
669.867 121.346 li
cp
f
592.581 139.2 mo
619.919 139.2 li
.126528 .663783 0 0 cmyk
gsave
[2.84768 9.82319e-8 -3.90007e-7 -2.84488 294.6 194.817 ]ct
@
grestore newpath
634.186 134.512 mo
634.926 134.512 635.581 134.95 636.094 135.829 cv
636.606 136.708 636.863 137.849 636.863 139.257 cv
636.863 140.776 636.578 141.974 636.037 142.85 cv
635.467 143.726 634.812 144.164 634.1 144.164 cv
633.388 144.164 632.762 143.738 632.192 142.887 cv
631.651 142.036 631.395 140.881 631.395 139.425 cv
631.395 137.962 631.651 136.779 632.192 135.871 cv
632.733 134.964 633.388 134.512 634.186 134.512 cv
cp
635.61 139.112 mo
635.61 136.304 635.125 134.899 634.129 134.899 cv
633.132 134.899 632.62 136.304 632.62 139.112 cv
cp
632.62 139.524 mo
632.62 140.975 632.762 142.048 633.018 142.739 cv
633.303 143.43 633.645 143.775 634.129 143.775 cv
635.097 143.775 635.61 142.358 635.61 139.524 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
641.049 138.093 mo
648.253 138.093 li
648.253 138.637 li
641.049 138.637 li
cp
641.049 140.264 mo
648.253 140.264 li
648.253 140.81 li
641.049 140.81 li
cp
f
652.411 139.51 mo
652.411 138.48 652.582 137.593 652.895 136.85 cv
653.208 136.105 653.607 135.55 654.12 135.186 cv
654.518 134.896 654.945 134.753 655.372 134.753 cv
656.056 134.753 656.682 135.106 657.224 135.812 cv
657.935 136.688 658.277 137.874 658.277 139.371 cv
658.277 140.42 658.106 141.311 657.822 142.045 cv
657.508 142.776 657.138 143.308 656.654 143.638 cv
656.198 143.971 655.743 144.136 655.287 144.136 cv
654.433 144.136 653.721 143.627 653.151 142.608 cv
652.667 141.752 652.411 140.719 652.411 139.51 cv
cp
653.721 139.678 mo
653.721 140.921 653.892 141.937 654.176 142.722 cv
654.433 143.385 654.831 143.715 655.316 143.715 cv
655.572 143.715 655.8 143.61 656.056 143.393 cv
656.341 143.177 656.512 142.816 656.654 142.309 cv
656.853 141.544 656.967 140.469 656.967 139.078 cv
656.967 138.048 656.853 137.186 656.654 136.5 cv
656.483 135.988 656.284 135.624 656.027 135.411 cv
655.828 135.266 655.629 135.192 655.372 135.192 cv
655.059 135.192 654.803 135.328 654.547 135.598 cv
654.233 135.968 654.006 136.549 653.892 137.339 cv
653.778 138.13 653.721 138.91 653.721 139.678 cv
cp
f
660.47 142.682 mo
660.669 142.682 660.84 142.756 660.982 142.901 cv
661.125 143.043 661.21 143.22 661.21 143.425 cv
661.21 143.627 661.125 143.8 660.982 143.945 cv
660.84 144.09 660.669 144.164 660.47 144.164 cv
660.271 144.164 660.071 144.09 659.929 143.945 cv
659.786 143.8 659.729 143.627 659.729 143.425 cv
659.729 143.214 659.786 143.038 659.929 142.895 cv
660.071 142.753 660.271 142.682 660.47 142.682 cv
cp
f
663.773 135.826 mo
665.966 134.753 li
666.194 134.753 li
666.194 142.383 li
666.194 142.89 666.222 143.206 666.251 143.331 cv
666.308 143.453 666.393 143.55 666.507 143.615 cv
666.649 143.684 666.934 143.721 667.333 143.729 cv
667.333 143.977 li
663.944 143.977 li
663.944 143.729 li
664.371 143.721 664.627 143.684 664.77 143.621 cv
664.884 143.556 664.969 143.467 665.026 143.359 cv
665.083 143.251 665.083 142.924 665.083 142.383 cv
665.083 137.504 li
665.083 136.847 665.083 136.426 665.026 136.238 cv
664.998 136.096 664.941 135.991 664.855 135.926 cv
664.77 135.857 664.684 135.826 664.57 135.826 cv
664.4 135.826 664.172 135.894 663.887 136.031 cv
cp
f
674.936 134.938 mo
674.423 136.073 li
671.69 136.073 li
671.092 137.283 li
672.288 137.456 673.199 137.894 673.911 138.597 cv
674.48 139.203 674.794 139.911 674.794 140.731 cv
674.794 141.206 674.68 141.644 674.509 142.051 cv
674.31 142.455 674.053 142.799 673.768 143.083 cv
673.484 143.368 673.142 143.595 672.772 143.769 cv
672.288 144.014 671.747 144.136 671.206 144.136 cv
670.665 144.136 670.266 144.045 670.038 143.86 cv
669.782 143.675 669.668 143.473 669.668 143.248 cv
669.668 143.126 669.696 143.015 669.81 142.921 cv
669.924 142.824 670.038 142.776 670.209 142.776 cv
670.323 142.776 670.408 142.793 670.494 142.827 cv
670.579 142.864 670.75 142.955 670.949 143.103 cv
671.291 143.334 671.604 143.45 671.946 143.45 cv
672.487 143.45 672.943 143.254 673.341 142.861 cv
673.712 142.466 673.911 141.988 673.911 141.422 cv
673.911 140.878 673.74 140.366 673.398 139.894 cv
673.028 139.422 672.544 139.055 671.946 138.799 cv
671.462 138.597 670.807 138.48 669.953 138.452 cv
671.69 134.938 li
cp
f
%ADOBeginSubsetFont: PBAAAA+CourierNewPSMT Initial
ct_T42Dict begin
-0.121 -0.68 0.621 1.02
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+CourierNewPSMT
Type42DictBegin
[<00010000000c000c000c000c4f532f32132c8072000000cc000000606376
7420aa0e65140000012c0000078c6670676d5ca2610e000008b8000006ca
676c7966c533d37500008314000020bc68656164e4790dae00000f840000
0036686865610aae01c400000fbc00000024686d7478d094b77a00000fe0
00001d6c6c6f6361d754de8500002d4c00001d686d61787013170b740000
4ab4000000206e616d653a84527100004ad400002d7a70726570afc0175c
0000785000000ac367646972000000000000000000000000000304cd0190
00050008059a05330000011d059a05330000036100660212050502070309
020205020404e0002effc00078430000000900000000544d432000400020
25cc04e7fe7e000006a90267400001ffffff000003620492000000200015
04e700000492001b04e7001e0362001e0000ffdf0000ffdf0000ffe2fe7e
000004e70000fefdffff02d7000000540000005400000000000000000054
00540095005400540054014d005400540054006400d4006d009100970054
013301ce00a90040000f005400d4000301000158003c0093007700d50055
fff10054002100a300ef002c00390068fffe0011007f00fe017d00a30102
0002000f003800d300650090023c032b04eb0001002a013003ab0182002d
003c00540096001700cf0158002aff0a003c00b3021d023c0002005400cb
035f082cff30fff201c004c9ff6200a2013c02d604ae00cc00ed01220400
fe83ff8bff9bff9c000e00f4031dfdc3ff31ff6d0054005500600075007c
007f0080009e00cd0159023d02bfff89001100580065007f00b700cb012b
040004600012005200550084009800b900be00cf00d800e50101010f0128
018001d301d40500fdc4fec4ff49ff62ff6f0045004e00500080010f011d
01250141025a035a03ad03d7fde3fee0ff1e0011005400760078007b008f
009000ab00d700d900db0103020a0254025503ad001b003d005a00620091
0093009e00a900c900df01080134013a0140018601ac02760403fdc40003
0004001500390048005400640091009b00a300a500af00c400d000d100d7
00f100fe01030119012b0155015c017d0185018e019401a501ac01ae01eb
020502d80303038104c604ebfed6ff0aff9affa9001b001b001c00200029
002c0038004c006d00cd00ea0128012a012c013f01d2022b022c0301040c
fdfefe33ff47ff7fffc5ffd7002300270038003d00440045004d00570062
0079008300bb00c600cd00cd00ce00e600f701010103010a0112011d0120
012301520153017501ac01ad01ef01fd0216021d0238026c02b202d4032b
03cd045704aefdb4fe15feb2feeffeffffabffb0ffc3ffcc000200540036
003800430055005d00700073007c007f00b500bb00c500e400e900f50101
0106011f01280148014b0155019801ac01df01fc02000208027e02ac02ff
033d039003c904190498fe4efe6dfe98feb3ff34ff4d0001000300050019
00340034003a003c0055005900730082009100a300aa00ab00b300cc00d6
00ee0118011e013001490156015801600168016f01700171017b017c0185
01a901b401bb01d601db01ee020402060215022b022b02630282029302b4
02c402d602e40300035303580371037b039303b403d003e80410042c0430
044d04600479047a05000503061608ccfc17fc6dfd62fd9afdc3fe2efe44
fe6bfe8bfec1fed6fee2ff0bffbfffe500060030003c005900670073007d
007f0086008e009f00a900aa00d600e100e700eb00f100f200f501030109
011a011e011f012c013f01430149014d015601570159016601660168016a
0175018001ab01b201bc01c001c101c901cb01d201dc01ef02010215022e
022e023b023d025502660282029a02ab02b002d902d902f502f90326032c
03320333033e03600371038703880393039703dc03e50402041504310453
047f04c7050305640596059b05c405c805ea0610065b0054005400540054
00000000000000000000000003cc02c1043e036c00a00050020303ea02d2
023c017d02fb01a7021d01c102f5021d035003500243023b000201bb0048
006d0014079b06210621021400100760000000000299022d03570426030c
007400500000025a0286026000a601bc00fb02480152017603cd02a0025f
039b0492043e01d7007f02c10400020d01f600410041013e01a901d30071
02d6022d03af04ce00000000050803fc056d020dff8704e7050203d20000
043d010203ca015a01ed0150021601c1013b028e0023015a011001ed0023
0149003900d9004d00b90157003804e0038c024a02db0039006c009301c1
03cc02bb006c02bb01a200f2003800fe01720150019c0331007e01710054
0039006a0294002202700222007c005500f30182011500d700fb01ab0124
02660004030d026300d40259003c00d00112022e017e0034006d008b018a
002c01fd01c000cc02910036016503befc19fd280201fced01b1034800b1
01fb04c904c9020400fb01c1021d01300108014000e100a3009b005500c6
0021032600a900380005022c0003005d0060004c001102f5017c026c0069
019803e901a50241004f0065037302460196fef504410333004100ba0119
014306390800053c051d0434041504e7003e006700670000066804df0582
0067006703d303f4ff59ff21fe5f050efedc007a00d9004800db018b00b3
004800da0116015e015104ff024b04ffff5600ab02af04dcff17010c0121
00d1ff300149feb5013c0124ff200171ff0b01510086005e06a9fd99048b
04850475047c0000fffb007b00860092009a00c200d500a4001e00270039
004c0054005c00620069002d0030003200350038003e004200440049004c
00500056005a006000640066006e00710078009d00ac00b10040004b0055
005e00620066006a007100730077007b007e00820087008c0091009600a6
00d102aa029f0321028802c50276026900da00da03c70340015600d40489
047f005300240051011300690037003c001f008c008cffd3005a0029001b
010f0134007f00540054ffebffd6ffa8fdcf00a600a600920092064200eb
06430028004f01f6041a01054043585554403f3e3d3c3b3a393837353433
3231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a1918171615
14131211100f0e0d0c0b0a090807060504030201002c4523466020b02660
b004262348482d2c452346236120b02661b004262348482d2c45234660b0
206120b04660b004262348482d2c4523462361b0206020b02661b02061b0
04262348482d2c45234660b0406120b06660b004262348482d2c45234623
61b0406020b02661b04061b004262348482d2c0110203c003c2d2c204523
20b0cd442320b8015a51582320b08d44235920b0ed51582320b04d442359
20b09051582320b00d44235921212d2c20204518684420b001602045b046
76688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00
b0172370b101173e01b0172370b10217453ab10200080d2d2c45b01a2344
45b01923442d2c2045b00325456164b050515845441b2121592d2cb00143
632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a
2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b0
0361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2c
b01243588745b0112bb0172344b0177ae41b038a45186920b01723448a8a
8720b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2c
b0022546608a46b040618c482d2c4b53205c58b002855958b00185592d2c
20b0032545b019234445b01a23444565234520b00325606a20b009234223
688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a54582321
b03f1b235961441cb114008a5279b31940201945208a54582321b03f1b23
5961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b
2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343650b
2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b00052
5823b002253823b002256538008a63381b212121212159012d2c4bb06451
584569b00943608a103a1b212121592d2c01b005251023208af500b00160
23edec2d2c01b005251023208af500b0016123edec2d2c01b0062510f500
edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2cb02b
2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b8026923
701020b802694520b0005058b00161593a2f182d2c21210c6423648bb840
00622d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c
21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c642364
8bb84000626023212d2cb4000100000015b00826b00826b00826b008260f
10161345683ab001162d2cb4000100000015b00826b00826b00826b00826
0f1016134568653ab001162d2c4b53234b515a5820458a60441b2121592d
2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d2c4b
5458381b2121592d2cb0134358031b02592d2cb0134358021b03592d2c4b
54b012435c5a58381b2121592d2cb012435c580cb00425b00425060c6423
646164b807085158b00425b00425012046b01060482046b0106048590a21
211b2121592d2cb012435c580cb00425b00425060c6423646164b8070851
58b00425b00425012046b8fff060482046b8fff06048590a21211b212159
2d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b21
21592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54b004
26024b545a8a8a0ab012435c5a58381b2121592d2c462346608a8a462320
468a608a61b8ff8062232010238ab9032603268a70456020b0005058b001
61b8ffba8b1bb0468c59b0106068013a2d2cb1020042b123018851b14001
88535a58b910000020885458b202010243604259b12401885158b9200000
40885458b2020202436042b12401885458b2022002436042004b014b5258
b2020802436042591bb940000080885458b202040243604259b940000080
63b80100885458b202080243604259b94000010063b80200885458b20210
0243604259b12601885158b94000020063b80400885458b2024002436042
59b94000040063b80800885458b202800243604259b12801885158b94000
080063b81000885458ba000201000002436042595959595959592d2cb002
4354584b53234b515a58381b2121591b21212121592d2c20b0024354b001
23b07b237821b1000243b072237921b10002438ab020205c58212121b063
1c598a8a208a208a23b81000635658b81000635658b00426b0015bb00426
b00426b004261b21212121b13600231c591b2159b0042623b08062205c58
8a5c8a5a23212321b01d1c598ab08062205c5821212321b00e1c59b00426
b00161b8ff981c23212d0000000100000006eb85240826dd5f0f3cf50809
080000000000a325516100000000d62f890fff07fa9004fb082b00000009
00010000000000000001000006a9fd99000004cdff07ff5a04fb00010000
000000000000000000000000000304cd00670000000004cd0000000001eb
010a00bb00e400bb00fe01e1025d012d00e20090012b00ba01cd00e600e5
00e400ab00c300d600c4011200d300e7011301cd01380062006500940113
00d700110057007f009e0058009f0080006b00e500ab005900800018002e
006800b30068005800b9008f0053001000250050006300d5023d00e3013c
00e4000001bc0090002d00ab007e008000d7007d005500bd00b400bf00bb
0015006c0091002d008000ab00cf0092005b003b00380065009500ed0195
023c019400bb00110011007f0058002e0068005300900090009000900090
009000ab008000800080008000ba00ba00ba00ba006c0091009100910091
0091005b005b005b005b00fc015100e4007c008f016f00ab005900000000
000401bb013f006500120050006d0090006200940062005a00b0002b0036
00a700e101280126003d0010007000e601eb0018008900b100bb00530063
007f0065001100110068001100120091fff100b300db01fd01250090009b
0095006300670007006b0254000e001300fb01cd012b00e0003d00110058
00110058005800e500e500e500e500680068006800530053005300ba013c
0128013c013a020001b101ba013b01d4013c005600bb00b900cf00d500ed
023cfffd00810063009500b3002d0090010e017601550163000000000000
009f0080007d00e500b900cf007f00ab007f00ab007effe502c400110090
00110090009e007efffd0058008000580080008000bb008000bb008000bb
002e006c002e006c00680091005800ab005800ab00b900cf008f0092008f
00920053005b0053005b00d500ed00d500ed007f0067005a006200b5011b
009800d0007bffe50112011b000e0002017d0002017d0002017d017d0002
00a9006500990090021d01000000021d021d0000021d0000021d00000000
000000000000017d021d017d017d000000000000021d017d017d00000000
0000021d017d017d00000000000000000000000000000000000000000000
00000000000000000000026700000000000000020002000f0002000f0002
00ae007c0026000300030002014100b800800002006c009f010f005a0009
001300000201012500bb014100020169016900ae016f00110090007f00ab
007f00ab0058008000580080005800800080007d0080007d0080007d006b
0055006b003e00e500bb00e500bb00e500bb00e500bd00ab00b4005900bf
0092008000bb002e006c0080006c0068009100680091005800ab00b900cf
008f007a0053005b0053005b0053005b0053005b002500380063009500d7
00110090001200100050007001cd00250038002500380025003800630095
01fd013c0088005a000c0011000b001b020801d401bb01080040fffc0013
0041fff6002affd400f2001100570065005800d5006b00e50059000f0018
002e00930068006400b300c4008f00630050001d003c00e500630062011b
008b01bb0057010400460156008b00b3020f009e00410054004a01450091
00ca00cf00570099004500750128005700910057007500580011007f007f
00b900e500e500ab0023000000110077002c0064001100570057007f004a
0058fffb007200280028007700230018006b0068006400b3007f008f002c
00630050005900290004000400020002005700810016000f00900080007b
0098005a008000140090003a003a00780033001f006b0091006b002d00ab
00a6003c00770065004d004600210021004b001800a60082002400830080
008e009800ab00cf00bd00ba00b40033ffee003e0078003c006b007f0098
002b00310068025802580258025802580258025802580258021602580216
022d00b50189023c038200aa01cc00d0009e011500a300a0017701490092
00680173009500b400c0006d00850176011c004f00c000f200fa00de00a2
00c500ac00cc00a0007a0085008501bf00f7005b017700950095ffedffed
00c000cc00b900cc00b900d000d000d0009e011500a300a00167013a0068
0173009500b400c00085011c004f00f200fa00a200c500ac00cc00a00177
009e00b400fa00ac0243018c0160012401c701c700fb0201000001dc0197
01dc01dc01a301dc01ca01db01d90164013f00f4017f0154013701080107
0127009601f100e6024a01d101f3010d0127011101450000000000000000
000001ca02030201020301a201a401ab016d01520000019c016201600025
002500000000000b0006000000000110009e000000000090006500030003
00000000000a000a0000000000aa007000f0009700f000f0009e009e00bf
00bf00bf013f0090009000f0009700f00097018301d501c701a801ca0000
001d002b002b0000001d002b002b002b002b0000001d0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
019c019c010a010a000000140201010a00cb0197019700c400c001bc01f8
00aa007000000000020001f8002500250000000001c80184002500250000
000000250025000000000110009e000000000110009e000000000110009e
00000000019e0151019e0151009000650090006500060006000000000006
00060000000000000000000000000000000000000000000c000a00000000
000c000a00000000011a011c00000000011a011c00000000000b00060000
000000a600d60000000000b4003800000000010800710000000001b201b2
0000000000fe008e0000000001f301840000000000c400c000aa007000aa
00760000000000670099008200a1009c00d7009c00d7021901d101dc01dc
0061004c019c01db01ca010d024a01a30197005d0020000501c701ca01ca
01d501a8018301db01b201b2009c009c01ea01f501f50075006b01b501f4
01e30126026301bc01b0007f0041002601e001e301e301ee01c1019c01c7
019e019e00d700d700c300ce00cd016a0174008e00cd00bc0000013c0095
0089017f011100ee00b900bc00bc00c7009a00750186015d015d01be01be
01bc019a01df00000025002500000000000b00060000000000f00097009e
0000001d002b0000000001470147015800f300da01f801f800ce00000068
00910053005b01c10199019801c401cb01c001bb01c501ab01b9012b0124
0118015e0144037d00c800000000019f01bd01a501c301b701b7012b012b
012b01280128012801ff01ff01ff01ff01ff01c401a8012801ff01ff01ff
01ff01ff01ff01ff01ff01ff01ff0142012b0142012b0011009000110090
001100900011009000110090001100900011009000110090001100900011
009000110090001100900058008000580080005800800058008000580080
00580080005800800058008000e500ba00e500bd00680091006800910068
009100680091006800910068009100680091006800910068009100680091
00680091006800910053005b0053005b0053005b0053005b0053005b0053
005b0053005b0063009500630095006300950011009000e500ba00680091
0053005b0053005b0053005b0053005b0053005b012f011400f50114007f
0098fffb00140077007800770078006b006b006200950062009500500065
00290046006b0055004200800068009101f4018c015b014801bf01bf0148
014801480177020001f800c400c000c400c000aa00700025002500000000
002500250000000000250025000000000025002500000000002500250000
0000002500250000000000250025000000000110009e000000000110009e
000000000110009e000000000110009e000000000110009e000000000110
009e00000000019e0151019e0151019e0151019e0151019e0151019e0151
019e015101970151019b0151009000650090006500900065009000650090
006500900065009000650090006500060006000000000006000600000000
000600060000000000000000000000000000000000000000000c000a0000
0000011a011c00000000000b000600000000000b000600000000000b0006
00000000000b000600000000000b00060000000000a600d600a600d600a6
00d60005000500000000000300030000000000b400380000000000b40038
0000000000b4003800000000000a000a00000000000a000a00000000000a
000a00000000000a000a00000000000a000a000000000108007100000000
01080071000000000108007100000000010800710000000000fe008e0000
000000fe008e0000000000fe008e0000000000fe008e0000000000fe008e
000000000110009e0000000001f3018401b101f30000000001b101f301b1
01c800c400c000c400c000c400c000c400c000c400c000c400c000c400c0
00c400c0000f001d00aa00700000000000c400c000aa00760000000000aa
0076005a005a005a005a01d101f300e70158016d01c001a001f801730014
000a01ee021401ea01c0017301cc0174017401ad003101be01be01ee01c0
00060006000000000000000000000000011a011c00000000020101b20003
000300030018009c00b7009c00d7009c00d7009c00d7009c00d7009c00d7
0173012b016900850212021b0076008e00f9010d005700570097007f007f
0015002e001200250051008f0004008f00b3002d00160057002d0057002d
007f007f00abfffd00160057008000b50058007200000080003b001500e5
00e3005900bf00bb004100150000006c0068003c00910016002d00b300b9
00cf00c401560092005d0092008f003c0053003d000000d500ed00a100a1
00a100db00ab00c400900092002d023c01e7006501eb00080008000a0012
0008001100070007000a008000110090012f00110090001200100080007d
0080007d005900bf006800910068009100a1008c00b400080008000a0080
007d000a002d002e006c0011009000110090005800800058008000e500ba
00e500ba0068009100680091005800ab005800ab0053005b0053005b00b9
00cf008f009200ab00ab006b0055006b008600e700d500ed001100900058
0080006800910128006800910068009100680091006300950068007e002a
002d00ab006a007e007e0080004e00900090006800870087007d007d00ab
00a4009100550067006700bd020f00e500bb00bb01120011001500150015
0000006c003a0091004e0075009100730073007300ab00db00dc00ab008e
008e00cf00b100b100b100d100920092005b00b80057003b003800410092
00ed00a7008c00ad00aa00b400aa00ab0068007b008700ab006b00b9006e
0098008000aa00b4000a000a000a000a0062000a000a000a000a00a900ed
01120112016d012d012a012a012d00e8010d0201010701fd012501fd020e
020e013b014000620094007a007a023601bb01bc0236013c01bc01bc01ff
01ff020e020e019801980198013c01a0010e0133014d015901350140013c
013c00db013c013cffe5013a0200013f01b1013b013c023601d5013b013a
013a01fd01250125031901bc01bc01980198013c01e7020e019801980198
013c00b100b1013f01b1020801ba01d40236013c0121013c013c013a013a
0128013c0000013c0128013c000000a700e6020e013c01aa011e01c30200
ffe501bc01bb0128012501080236013c006501d50198012801280128016a
01b700000000000000270128013001500126011701390103011200d1012d
013b00f5013501bb01bc023600b30047006d0000006d0091003200bc0068
0091008c00cf009f009f0040008b008c00f00015001500ab00ab006b0075
00b900b9008800c3008000ab008100e700bc008000ab00b4006800ab00f9
005800280080003a00140096002100390000000c00110013000000050029
00500000000500790097001d004500680091001a003b001a003b001e001f
0040005f0014001400a700140096007f00b400b40159013c020d020d0001
00010028003a0057006600b3002d00250034007200900077007800170024
00110011000a000700570051007f00ab008f00a6000c000c002900460005
000f0005000f00e5fffb00140077007800230033006b006b006b006b0029
00460018001f013a0011009000110090001200100058008000420080fffb
00140072009000c3008c0028003a0028003a006800910068009100810082
002c0095002c0095002c009500290046000200180074007e0010001e0007
000a0051005a000a0008000a0014008000ab008f00a601a401a801dc0216
01b2019601d6012efff103ca01960196033a014500c501a001b701ba01dc
0196014501d3019601a001a401dc01ba033afff101c20216012f012f0128
012801dd017b012f001100900057002d0057002d0057002d007f00ab009e
007e009e007e009e007e009e007e009e007e005800800058008000580080
0058008000580080009f00d70080007d006b0055006b0055006b0055006b
0055006b005500e500bd00e500ba005900bf005900bf005900bf008000bb
008000bb008000bb008000bb001800150018001500180015002e006c002e
006c002e006c002e006c0068009100680091006800910068009100b3002d
00b3002d005800ab005800ab005800ab005800ab00b900cf00b900cf00b9
00cf00b900cf00b900cf008f0092008f0092008f0092008f00920053005b
0053005b0053005b0053005b0053005b0010003b0010003b002500380025
003800500065005000650063009500d500ed00d500ed00d500ed00550092
00380095009000d700620062006200620062006200620062000000000000
000000000000ff1bff1b011b011b011b011b011b011b0000000000000000
00000000008b008b008b008b008b008b008b008b00000000000000000000
0000ff1bff1b020d01e501a0019601a00196010a01000000000000000000
000000000001000100910091009100910091009100000000ff9cff9cffc4
ffc4005700570057005700570057005700570000ff74ff74ff1b00750075
0075007500750075007500750000ffecff56ff56ff7eff7eff1bff070062
0062011b011b008b008b018001ab00910091005700570075007500620062
006200620062006200620062000000000000000000000000ff1bff1b008b
008b008b008b008b008b008b008b000000000000000000000000ff1bff1b
007500750075007500750075007500750000ffecff56ff56ff7eff7eff1b
ff07006200620062006200620062006200110011000200020011020d0236
020d01280128008b008b008b008b008b0002000200020002006b01be01be
012801120114011b011b0100010000e500e50002000201be01be01280057
00570057005700ca00ca0057005700630063000200020000010801080228
007500750075007500750002000200020002003c0228020d0099006b0000
00000000000000bd00b400260112003a00e60021002101a201a201e401e4
01b101bc013b013b012801cd01e901e901e901e9013c013c014901e4020e
013a01bd01e401e40118020e00000000000000b3002d003b002b002500cf
00ab00cf00cf00cf009000b70101009e00cf001f003a00910082009100ab
0065002301240091009100a60083008300a600560099001800aa003b0038
00ed009000b000910098003b006b00a6001d003300e100d6011101110116
01170117010801070166011400fb011700d400f100e70112014b014c0136
0123010b00dd01280128010300d200fe0103013001350131013101030150
012800d1013b0126013c0126012600fe013b0117014c00d700f501360159
00fd01480120012a0150012d011700f5015900fd01310120012a00000000
0000000000000190011a018601920179013b015d024a01be021a015b019e
0151009000650000000000000000003a000d000a001e002a001d0016001e
0090012d012d012d002b00b3003f000000000000000000140000007f0018
001f000b004700470011007f00ab0080008f00cf00ed0078038b01a2011b
01a000000023007f007f007f007f009801a4021602150177025800dc019a
01e201bf01bf01cd01be01da012a00250025000000000025002500000000
002500250000000000250025000000000025002500000000002500250000
000000250025000000000110009e000000000110009e00000000019e0151
019e0151009000650006000600000000011a011c00000000011a011c0000
0000011a011c00000000000b000600000000000b00060000000000030003
000000000003000300000000000300030000000001b201b20000000001b2
01b20000000000fe008e0000000000fe008e0000000000fe008e00000000
0108007100000000009000650090006500060006000000000000004500be
0000003c0000009b005f0059005700ed004e011900b5000000e300e4002d
00560036002d007e00d7000f00bf00bb0015006c002d00ab00cf00b1003b
006500ed005a002a007e003f00380090000700bd00ab00b10000008c0103
0139010f01240131016401640103011e015002300175017501620173013c
00df00c400d100d5011e0114012601140154014e013b0117014801130111
00f5017101710171013401430126012601ec013c01cd0128013001260135
0135008000100058007f00ba006200620062006200620062006200620114
011401140114010c010c010c010c00570057005700570057005700570057
01050105010c010c0057005700570057009c00d700bd00b0002a0053000f
0058008000ab00b400540080000f00ab0063009500ab00ab00ab00bb007f
009800500065005000650072009000230033015701570157015700c100c1
019e01e40118000000cf00ab007400bb00700088005800900092006b0055
005900bf00d500ed0078006b006b007b01c601e0012c013c013c013c0080
002e0080017f017601550163017801680180017801780180012500680080
00250038007500e20068003b0005001a01cd012d01e101e1017d017d01eb
01eb01eb013c001401c701b601b80178016601ad01ba01ba009000e40079
007900090030000f021401f801cc01f501e901d201d501d101d101da01e6
01db01d601d901db01b5021201ff01fa0110009e000000000110009e0000
00000006000600000000009000650110009e0000000001140102010100ef
00aa00700000000000aa00700000000000aa00700000000000c400c000c4
00c0002f005a002f005a0110009e00000000000600060000000000060006
0000000000b400380000000000470016003e00170150004d002c002a0045
0155018401f701c401f700aa007600000000000300030000000000030003
0000000000aa00700000000000aa00700000000000aa0070000000000198
00b1005f008f00a00052003a00590113000000b70064000b0009001d000e
000b000e0059009e000f00070008000b0064006b006b005500d700d700b5
0031007500e200e20032000400180011001f001200730091012a016d00f5
00b900d500000000000001bb01a001dc00000197016701dc01dc000001a3
000001dc000001ca000001db000001f9019101910191018c01e801f401e9
0170017000a800fc00fc0059002f0019001b0019001b0019001b0019001b
0097002b00000097002b000000250025000000000110009e00000000000c
000c000c0000000b00060000000000a600d6000000000108007100000000
01b201b20000000000aa00760000000000aa0076000000000081005900c4
00c00103010301c601d501cb01a301c201ac022201c701ad022201c701ad
01900150019001cc019c01de01de02010201020102010199015901c301a4
009c00d701c701c700000000000000000000000000000000000001c70108
019701f00215011500a300a000a00216019800530076005d0019008200af
008200520027004400a90092003b0049005400c8009f0019005b001500b7
0017009c005300aa001100a400370053001900b70071009300ec005a0009
0068009901c1019701a1013e01bc00e4006d001400940043006e004f0057
009c007100400059006c011dfffd0088005d005500dd008c0096005a00f7
ffe100fa006c0142003200f2008b005b00780014006c007d00bd00140035
00910085000001cd00bc0008000800370010001000100016001000b30014
00000037ffca002500250000000000b3019e015100000000000000000003
0003000000000170022a0090006501d000abffbaffff0000000000250043
00230033000e000e000e000e000f0057001200a900c2011a011c00000000
00b400380000000001a30057002500250000000000250025000000000025
0025000000000090006500aa007600000000000b00060000000000a600d6
0000000000fe008e000000000164019d004400f2016b016f01ad01ad0025
00000002000100ad0024013e00ca011d00000037003700370037009100e5
00e500e500e500e500e500e500e500e500e500e500e500e500e500e500e5
00e500e500e500e500e500e500e500e500e500e500e500e500e500e500e5
00e500e500e500e500e501a701a701a702430243024302ab041604160416
041604160416041604160416041605dc05dc05dc05dc05dc05dc05dc05dc
05dc05dc06da06da06da0788082708270827092e099b099b099b09f109f1
0b020b020b020b020bcb0bcb0c6f0c6f0c6f0c6f0e1a0f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f530f530f530f53
0f530f530f530f530f530f530f530f530f530f530f530f53105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e105e105e105e105e105e105e105e105e
105e105e105e105e105e105e105e000100000eb300800010000000000002
0010002f0059000003ea0ac3000000000000003a02be0000000300000000
021a000000000003000000010016021a0000000300000002000e02880000
0003000000030040029600000003000000040016021a0000000300000005
001802d60000000300000006001c02ee0000000300000007006e021a0000
000300000008003003180000000300000009001c0528000000030000000d
0e0605440001000000000000010d134a0001000000000001000b14570001
0000000000020007148e0001000000000003002014950001000000000004
000b14570001000000000005000c14b50001000000000006000e14c10001
000000000007003714570001000000000008001813510001000000000009
000e14cf000100000000000d070314dd0003000104030002000c1be00003
00010405000200101bf00003000104060002000c1c000003000104070002
00101c0c000300010408000200101c1c0003000104090000021e030a0003
0001040900010016021a0003000104090002000e02880003000104090003
0040029600030001040900040016021a0003000104090005001802d60003
000104090006001c02ee0003000104090007006e021a0003000104090008
003003180003000104090009001c0528000300010409000d0e181c2c0003
0001040a0002000c1be000030001040b000200102a4400030001040c0002
000c1be000030001040e0002000c2a540003000104100002000e2a640003
00010413000200122a720003000104140002000c1be00003000104150002
00101be00003000104160002000c1be00003000104190002000e2a840003
0001041b000200102a5400030001041d0002000c1be000030001041f0002
000c1be00003000104240002000e2a9200030001042a0002000e2aa00003
0001042d0002000e2aae00030001080a0002000c1be00003000108160002
000c1be0000300010c0a0002000c1be0000300010c0c0002000c1be000a9
0020003200300031003700200054006800650020004d006f006e006f0074
00790070006500200043006f00720070006f0072006100740069006f006e
002e00200041006c006c0020005200690067006800740073002000520065
007300650072007600650064002e0020000d000d00480065006200720065
00770020004f00700065006e00540079007000650020004c00610079006f
007500740020006c006f00670069006300200063006f0070007900720069
006700680074002000a90020003200300030003300200026002000320030
00300037002c002000520061006c00700068002000480061006e0063006f
0063006b002000260020004a006f0068006e00200048007500640073006f
006e002e002000540068006900730020006c00610079006f007500740020
006c006f00670069006300200066006f00720020004200690062006c0069
00630061006c00200048006500620072006500770020006900730020006f
00700065006e00200073006f007500720063006500200073006f00660074
007700610072006500200075006e00640065007200200074006800650020
004d004900540020004c006900630065006e00730065003b002000730065
006500200065006d0062006500640064006500640020006c006900630065
006e007300650020006400650073006300720069007000740069006f006e
00200066006f0072002000640065007400610069006c0073002e0043006f
007500720069006500720020004e00650077002000690073002000610020
00740072006100640065006d00610072006b0020006f0066002000540068
00650020004d006f006e006f007400790070006500200043006f00720070
006f0072006100740069006f006e002e0052006500670075006c00610072
004d006f006e006f0074007900700065003a0043006f0075007200690065
00720020004e0065007700200028004d006900630072006f0073006f0066
0074002900560065007200730069006f006e00200036002e003900320043
006f00750072006900650072004e0065007700500053004d005400a90020
003200300031003700200054006800650020004d006f006e006f00740079
0070006500200043006f00720070006f0072006100740069006f006e002e
00200041006c006c00200052006900670068007400730020005200650073
00650072007600650064002e0020000d000a000d000a0048006500620072
006500770020004f00700065006e00540079007000650020004c00610079
006f007500740020006c006f00670069006300200063006f007000790072
0069006700680074002000a9002000320030003000330020002600200032
003000300037002c002000520061006c00700068002000480061006e0063
006f0063006b002000260020004a006f0068006e00200048007500640073
006f006e002e002000540068006900730020006c00610079006f00750074
0020006c006f00670069006300200066006f00720020004200690062006c
006900630061006c00200048006500620072006500770020006900730020
006f00700065006e00200073006f007500720063006500200073006f0066
0074007700610072006500200075006e0064006500720020007400680065
0020004d004900540020004c006900630065006e00730065003b00200073
0065006500200065006d0062006500640064006500640020006c00690063
0065006e007300650020006400650073006300720069007000740069006f
006e00200066006f0072002000640065007400610069006c0073002e0048
006f00770061007200640020004b006500740074006c00650072004d0069
00630072006f0073006f0066007400200073007500700070006c00690065
006400200066006f006e0074002e00200059006f00750020006d00610079
00200075007300650020007400680069007300200066006f006e00740020
0074006f0020006300720065006100740065002c00200064006900730070
006c00610079002c00200061006e00640020007000720069006e00740020
0063006f006e00740065006e00740020006100730020007000650072006d
0069007400740065006400200062007900200074006800650020006c0069
00630065006e007300650020007400650072006d00730020006f00720020
007400650072006d00730020006f00660020007500730065002c0020006f
006600200074006800650020004d006900630072006f0073006f00660074
002000700072006f0064007500630074002c002000730065007200760069
00630065002c0020006f007200200063006f006e00740065006e00740020
0069006e0020007700680069006300680020007400680069007300200066
006f006e0074002000770061007300200069006e0063006c007500640065
0064002e00200059006f00750020006d006100790020006f006e006c0079
002000280069002900200065006d00620065006400200074006800690073
00200066006f006e007400200069006e00200063006f006e00740065006e
00740020006100730020007000650072006d006900740074006500640020
00620079002000740068006500200065006d00620065006400640069006e
00670020007200650073007400720069006300740069006f006e00730020
0069006e0063006c007500640065006400200069006e0020007400680069
007300200066006f006e0074003b00200061006e00640020002800690069
0029002000740065006d0070006f0072006100720069006c007900200064
006f0077006e006c006f006100640020007400680069007300200066006f
006e007400200074006f002000610020007000720069006e007400650072
0020006f00720020006f00740068006500720020006f0075007400700075
0074002000640065007600690063006500200074006f002000680065006c
00700020007000720069006e007400200063006f006e00740065006e0074
002e00200041006e00790020006f00740068006500720020007500730065
002000690073002000700072006f0068006900620069007400650064002e
000d000d00540068006500200066006f006c006c006f00770069006e0067
0020006c006900630065006e00730065002c002000620061007300650064
0020006f006e00200074006800650020004d004900540020006c00690063
0065006e00730065002000280068007400740070003a002f002f0065006e
002e00770069006b006900700065006400690061002e006f00720067002f
00770069006b0069002f004d00490054005f004c006900630065006e0073
00650029002c0020006100700070006c00690065007300200074006f0020
0074006800650020004f00700065006e00540079007000650020004c0061
0079006f007500740020006c006f00670069006300200066006f00720020
004200690062006c006900630061006c0020004800650062007200650077
0020201c004c00610079006f007500740020004c006f006700690063201d
0020006100730020006a006f0069006e0074006c00790020006400650076
0065006c006f007000650064002000620079002000520061006c00700068
002000480061006e0063006f0063006b00200061006e00640020004a006f
0068006e00200048007500640073006f006e002e0020000d000d00500065
0072006d0069007300730069006f006e0020006900730020006800650072
0065006200790020006700720061006e007400650064002c002000660072
006500650020006f00660020006300680061007200670065002c00200074
006f00200061006e007900200070006500720073006f006e0020006f0062
007400610069006e0069006e00670020006100200063006f007000790020
006f006600200074006800650020004f00700065006e0054007900700065
0020004c00610079006f007500740020006c006f00670069006300200066
006f00720020004200690062006c006900630061006c0020004800650062
00720065007700200061006e00640020006100730073006f006300690061
00740065006400200064006f00630075006d0065006e0074006100740069
006f006e002000660069006c00650073002000280074006800650020201c
004c00610079006f007500740020004c006f00670069006300200053006f
006600740077006100720065201d0029002c00200074006f002000640065
0061006c00200069006e00200074006800650020004c00610079006f0075
00740020004c006f00670069006300200053006f00660074007700610072
006500200077006900740068006f00750074002000720065007300740072
0069006300740069006f006e002c00200069006e0063006c007500640069
006e006700200077006900740068006f007500740020006c0069006d0069
0074006100740069006f006e002000740068006500200072006900670068
0074007300200074006f0020007500730065002c00200063006f00700079
002c0020006d006f0064006900660079002c0020006d0065007200670065
002c0020007000750062006c006900730068002c00200064006900730074
007200690062007500740065002c0020007300750062006c006900630065
006e00730065002c00200061006e0064002f006f0072002000730065006c
006c00200063006f00700069006500730020006f00660020007400680065
0020004c00610079006f007500740020004c006f00670069006300200053
006f006600740077006100720065002c00200061006e006400200074006f
0020007000650072006d0069007400200070006500720073006f006e0073
00200074006f002000770068006f006d00200074006800650020004c0061
0079006f007500740020004c006f00670069006300200053006f00660074
00770061007200650020006900730020006600750072006e006900730068
0065006400200074006f00200064006f00200073006f002c002000730075
0062006a00650063007400200074006f002000740068006500200066006f
006c006c006f00770069006e006700200063006f006e0064006900740069
006f006e0073003a000d000d005400680065002000610062006f00760065
00200063006f00700079007200690067006800740020006e006f00740069
0063006500200061006e0064002000740068006900730020007000650072
006d0069007300730069006f006e0020006e006f00740069006300650020
007300680061006c006c00200062006500200069006e0063006c00750064
0065006400200069006e00200061006c006c00200063006f007000690065
00730020006f00720020007300750062007300740061006e007400690061
006c00200070006f007200740069006f006e00730020006f006600200074
006800650020004c00610079006f007500740020004c006f006700690063
00200053006f006600740077006100720065002e000d000d005400480045
00200053004f004600540057004100520045002000490053002000500052
004f0056004900440045004400200027004100530020004900530027002c
00200057004900540048004f00550054002000570041005200520041004e
005400590020004f004600200041004e00590020004b0049004e0044002c
002000450058005000520045005300530020004f005200200049004d0050
004c004900450044002c00200049004e0043004c005500440049004e0047
00200042005500540020004e004f00540020004c0049004d004900540045
004400200054004f0020005400480045002000570041005200520041004e
00540049004500530020004f00460020004d00450052004300480041004e
0054004100420049004c004900540059002c0020004600490054004e0045
0053005300200046004f0052002000410020005000410052005400490043
0055004c0041005200200050005500520050004f0053004500200041004e
00440020004e004f004e0049004e004600520049004e00470045004d0045
004e0054002e00200049004e0020004e004f0020004500560045004e0054
0020005300480041004c004c002000540048004500200041005500540048
004f005200530020004f005200200043004f005000590052004900470048
005400200048004f004c00440045005200530020004200450020004c0049
00410042004c004500200046004f005200200041004e005900200043004c
00410049004d002c002000440041004d00410047004500530020004f0052
0020004f00540048004500520020004c0049004100420049004c00490054
0059002c0020005700480045005400480045005200200049004e00200041
004e00200041004300540049004f004e0020004f004600200043004f004e
00540052004100430054002c00200054004f005200540020004f00520020
004f00540048004500520057004900530045002c00200041005200490053
0049004e0047002000460052004f004d002c0020004f005500540020004f
00460020004f005200200049004e00200043004f004e004e004500430054
0049004f004e00200057004900540048002000540048004500200053004f
0046005400570041005200450020004f0052002000540048004500200055
005300450020004f00520020004f00540048004500520020004400450041
004c0049004e0047005300200049004e002000540048004500200053004f
004600540057004100520045002e000da9203230313720546865204d6f6e
6f7479706520436f72706f726174696f6e2e20416c6c2052696768747320
52657365727665642e200d0d486562726577204f70656e54797065204c61
796f7574206c6f67696320636f7079726967687420a92032303033202620
323030372c2052616c70682048616e636f636b2026204a6f686e20487564
736f6e2e2054686973206c61796f7574206c6f67696320666f7220426962
6c6963616c20486562726577206973206f70656e20736f7572636520736f
66747761726520756e64657220746865204d4954204c6963656e73653b20
73656520656d626564646564206c6963656e736520646573637269707469
6f6e20666f722064657461696c732e436f7572696572204e657720697320
612074726164656d61726b206f6620546865204d6f6e6f7479706520436f
72706f726174696f6e2e526567756c61724d6f6e6f747970653a436f7572
696572204e657720284d6963726f736f66742956657273696f6e20362e39
32436f75726965724e657750534d54486f77617264204b6574746c65724d
6963726f736f667420737570706c69656420666f6e742e20596f75206d61
7920757365207468697320666f6e7420746f206372656174652c20646973
706c61792c20616e64207072696e7420636f6e74656e7420617320706572
6d697474656420627920746865206c6963656e7365207465726d73206f72
207465726d73206f66207573652c206f6620746865204d6963726f736f66
742070726f647563742c20736572766963652c206f7220636f6e74656e74
20696e207768696368207468697320666f6e742077617320696e636c7564
65642e20596f75206d6179206f6e6c792028692920656d62656420746869
7320666f6e7420696e20636f6e74656e74206173207065726d6974746564
2062792074686520656d62656464696e67207265737472696374696f6e73
20696e636c7564656420696e207468697320666f6e743b20616e64202869
69292074656d706f726172696c7920646f776e6c6f616420746869732066
6f6e7420746f2061207072696e746572206f72206f74686572206f757470
75742064657669636520746f2068656c70207072696e7420636f6e74656e
742e20416e79206f74686572207573652069732070726f68696269746564
2e0d0d54686520666f6c6c6f77696e67206c6963656e73652c2062617365
64206f6e20746865204d4954206c6963656e73652028687474703a2f2f65
6e2e77696b6970656469612e6f72672f77696b692f4d49545f4c6963656e
7365292c206170706c69657320746f20746865204f70656e54797065204c
61796f7574206c6f67696320666f72204269626c6963616c204865627265
7720d24c61796f7574204c6f676963d3206173206a6f696e746c79206465
76656c6f7065642062792052616c70682048616e636f636b20616e64204a
6f686e20487564736f6e2e200d0d5065726d697373696f6e206973206865
72656279206772616e7465642c2066726565206f66206368617267652c20
746f20616e7920706572736f6e206f627461696e696e67206120636f7079
206f6620746865204f70656e54797065204c61796f7574206c6f67696320
666f72204269626c6963616c2048656272657720616e64206173736f6369
6174656420646f63756d656e746174696f6e2066696c6573202874686520
d24c61796f7574204c6f67696320536f667477617265d3292c20746f2064
65616c20696e20746865204c61796f7574204c6f67696320536f66747761
726520776974686f7574207265737472696374696f6e2c20696e636c7564
696e6720776974686f7574206c696d69746174696f6e2074686520726967
68747320746f207573652c20636f70792c206d6f646966792c206d657267
652c207075626c6973682c20646973747269627574652c207375626c6963
656e73652c20616e642f6f722073656c6c20636f70696573206f66207468
65204c61796f7574204c6f67696320536f6674776172652c20616e642074
6f207065726d697420706572736f6e7320746f2077686f6d20746865204c
61796f7574204c6f67696320536f667477617265206973206675726e6973
68656420746f20646f20736f2c207375626a65637420746f207468652066
6f6c6c6f77696e6720636f6e646974696f6e733a0d0d5468652061626f76
6520636f70797269676874206e6f7469636520616e642074686973207065
726d697373696f6e206e6f74696365207368616c6c20626520696e636c75
64656420696e20616c6c20636f70696573206f72207375627374616e7469
616c20706f7274696f6e73206f6620746865204c61796f7574204c6f6769
6320536f6674776172652e0d0d54484520534f4654574152452049532050
524f564944454420274153204953272c20574954484f5554205741525241
4e5459204f4620414e59204b494e442c2045585052455353204f5220494d
504c4945442c20494e434c5544494e4720425554204e4f54204c494d4954
454420544f205448452057415252414e54494553204f46204d4552434841
4e544142494c4954592c204649544e45535320464f522041205041525449
43554c415220505552504f534520414e44204e4f4e494e4652494e47454d
454e542e20494e204e4f204556454e54205348414c4c2054484520415554
484f5253204f5220434f5059524947485420484f4c44455253204245204c
4941424c4520464f5220414e5920434c41494d2c2044414d41474553204f
52204f54484552204c494142494c4954592c205748455448455220494e20
414e20414354494f4e204f4620434f4e54524143542c20544f5254204f52
204f54484552574953452c2041524953494e472046524f4d2c204f555420
4f46204f5220494e20434f4e4e454354494f4e2057495448205448452053
4f465457415245204f522054484520555345204f52204f54484552204445
414c494e475320494e2054484520534f4654574152452e0d004e006f0072
006d0061006c006e0079006f00620079010d0065006a006e00e9006e006f
0072006d0061006c005300740061006e0064006100720064039a03b103bd
03bf03bd03b903ba03ac004d006900630072006f0073006f006600740020
0073007500700070006c00690065006400200066006f006e0074002e0020
0059006f00750020006d0061007900200075007300650020007400680069
007300200066006f006e007400200074006f002000630072006500610074
0065002c00200064006900730070006c00610079002c00200061006e0064
0020007000720069006e007400200063006f006e00740065006e00740020
006100730020007000650072006d00690074007400650064002000620079
00200074006800650020006c006900630065006e00730065002000740065
0072006d00730020006f00720020007400650072006d00730020006f0066
0020007500730065002c0020006f006600200074006800650020004d0069
00630072006f0073006f00660074002000700072006f0064007500630074
002c00200073006500720076006900630065002c0020006f007200200063
006f006e00740065006e007400200069006e002000770068006900630068
0020007400680069007300200066006f006e007400200077006100730020
0069006e0063006c0075006400650064002e00200059006f00750020006d
006100790020006f006e006c0079002000280069002900200065006d0062
006500640020007400680069007300200066006f006e007400200069006e
00200063006f006e00740065006e00740020006100730020007000650072
006d00690074007400650064002000620079002000740068006500200065
006d00620065006400640069006e00670020007200650073007400720069
006300740069006f006e007300200069006e0063006c0075006400650064
00200069006e0020007400680069007300200066006f006e0074003b0020
0061006e006400200028006900690029002000740065006d0070006f0072
006100720069006c007900200064006f0077006e006c006f006100640020
007400680069007300200066006f006e007400200074006f002000610020
007000720069006e0074006500720020006f00720020006f007400680065
00720020006f007500740070007500740020006400650076006900630065
00200074006f002000680065006c00700020007000720069006e00740020
0063006f006e00740065006e0074002e00200041006e00790020006f0074
0068006500720020007500730065002000690073002000700072006f0068
006900620069007400650064002e000d000a000d000a0054006800650020
0066006f006c006c006f00770069006e00670020006c006900630065006e
00730065002c0020006200610073006500640020006f006e002000740068
00650020004d004900540020006c006900630065006e0073006500200028
0068007400740070003a002f002f0065006e002e00770069006b00690070
0065006400690061002e006f00720067002f00770069006b0069002f004d
00490054005f004c006900630065006e007300650029002c002000610070
0070006c00690065007300200074006f00200074006800650020004f0070
0065006e00540079007000650020004c00610079006f007500740020006c
006f00670069006300200066006f00720020004200690062006c00690063
0061006c00200048006500620072006500770020201c004c00610079006f
007500740020004c006f006700690063201d0020006100730020006a006f
0069006e0074006c007900200064006500760065006c006f007000650064
002000620079002000520061006c00700068002000480061006e0063006f
0063006b00200061006e00640020004a006f0068006e0020004800750064
0073006f006e002e0020000d000a000d000a005000650072006d00690073
00730069006f006e00200069007300200068006500720065006200790020
006700720061006e007400650064002c002000660072006500650020006f
00660020006300680061007200670065002c00200074006f00200061006e
007900200070006500720073006f006e0020006f0062007400610069006e
0069006e00670020006100200063006f007000790020006f006600200074
006800650020004f00700065006e00540079007000650020004c00610079
006f007500740020006c006f00670069006300200066006f007200200042
00690062006c006900630061006c00200048006500620072006500770020
0061006e00640020006100730073006f0063006900610074006500640020
0064006f00630075006d0065006e0074006100740069006f006e00200066
0069006c00650073002000280074006800650020201c004c00610079006f
007500740020004c006f00670069006300200053006f0066007400770061
00720065201d0029002c00200074006f0020006400650061006c00200069
006e00200074006800650020004c00610079006f007500740020004c006f
00670069006300200053006f006600740077006100720065002000770069
00740068006f007500740020007200650073007400720069006300740069
006f006e002c00200069006e0063006c007500640069006e006700200077
006900740068006f007500740020006c0069006d00690074006100740069
006f006e0020007400680065002000720069006700680074007300200074
006f0020007500730065002c00200063006f00700079002c0020006d006f
0064006900660079002c0020006d0065007200670065002c002000700075
0062006c006900730068002c002000640069007300740072006900620075
00740065002c0020007300750062006c006900630065006e00730065002c
00200061006e0064002f006f0072002000730065006c006c00200063006f
00700069006500730020006f006600200074006800650020004c00610079
006f007500740020004c006f00670069006300200053006f006600740077
006100720065002c00200061006e006400200074006f0020007000650072
006d0069007400200070006500720073006f006e007300200074006f0020
00770068006f006d00200074006800650020004c00610079006f00750074
0020004c006f00670069006300200053006f006600740077006100720065
0020006900730020006600750072006e0069007300680065006400200074
006f00200064006f00200073006f002c0020007300750062006a00650063
007400200074006f002000740068006500200066006f006c006c006f0077
0069006e006700200063006f006e0064006900740069006f006e0073003a
000d000a000d000a005400680065002000610062006f0076006500200063
006f00700079007200690067006800740020006e006f0074006900630065
00200061006e0064002000740068006900730020007000650072006d0069
007300730069006f006e0020006e006f0074006900630065002000730068
0061006c006c00200062006500200069006e0063006c0075006400650064
00200069006e00200061006c006c00200063006f00700069006500730020
006f00720020007300750062007300740061006e007400690061006c0020
0070006f007200740069006f006e00730020006f00660020007400680065
0020004c00610079006f007500740020004c006f00670069006300200053
006f006600740077006100720065002e000d000a000d000a005400480045
00200053004f004600540057004100520045002000490053002000500052
004f0056004900440045004400200027004100530020004900530027002c
00200057004900540048004f00550054002000570041005200520041004e
005400590020004f004600200041004e00590020004b0049004e0044002c
002000450058005000520045005300530020004f005200200049004d0050
004c004900450044002c00200049004e0043004c005500440049004e0047
00200042005500540020004e004f00540020004c0049004d004900540045
004400200054004f0020005400480045002000570041005200520041004e
00540049004500530020004f00460020004d00450052004300480041004e
0054004100420049004c004900540059002c0020004600490054004e0045
0053005300200046004f0052002000410020005000410052005400490043
0055004c0041005200200050005500520050004f0053004500200041004e
00440020004e004f004e0049004e004600520049004e00470045004d0045
004e0054002e00200049004e0020004e004f0020004500560045004e0054
0020005300480041004c004c002000540048004500200041005500540048
004f005200530020004f005200200043004f005000590052004900470048
005400200048004f004c00440045005200530020004200450020004c0049
00410042004c004500200046004f005200200041004e005900200043004c
00410049004d002c002000440041004d00410047004500530020004f0052
0020004f00540048004500520020004c0049004100420049004c00490054
0059002c0020005700480045005400480045005200200049004e00200041
004e00200041004300540049004f004e0020004f004600200043004f004e
00540052004100430054002c00200054004f005200540020004f00520020
004f00540048004500520057004900530045002c00200041005200490053
0049004e0047002000460052004f004d002c0020004f005500540020004f
00460020004f005200200049004e00200043004f004e004e004500430054
0049004f004e00200057004900540048002000540048004500200053004f
0046005400570041005200450020004f0052002000540048004500200055
005300450020004f00520020004f00540048004500520020004400450041
004c0049004e0047005300200049004e002000540048004500200053004f
004600540057004100520045002e000d000a004e006f0072006d00610061
006c0069004e006f0072006d00e1006c006e0065004e006f0072006d0061
006c0065005300740061006e00640061006100720064041e0431044b0447
043d044b0439004e0061007600610064006e006f0074006801b001a10300
006e00670041007200720075006e00740061000000>
<ba0054ffc003c0b2553340b803c0b23a3340b803c0b30e243280b803c0b3
0b0d3280b803c0b209333f412f03c0007003c000af03c000cf03c0000400
5f03c0007f03c000af03c00003001f03c0003f03c0005f03c0008f03c000
0400a003bb00b003bb00c003bb00d003bb000400a003ba00b003ba00c003
ba00d003ba0004003f03b8000103b703b6b2241f40b803b4b3192432ef41
1a03b300ff03b300020391038b0021001f035e038b0021001f035f038b00
21001f038f038b002a001f0390038b002a001f038d038bb23b1f0f410903
8b000100ef038b00ff038b0002ffc0039cb2474f32b9ffc0039cb2373c32
b9ffc0039bb2474f32b9ffc0039bb3373c321f4119039c00b0039c00c003
9c00d0039c000400ef039c0001001f039b00b0039b00c0039b00d0039b00
0400ef039b0001ffc0039cb2212932b9ffc0039bb2212932b9ffc0039cb2
0f1632b9ffc0039bb20f1632410a035903560032001f035803560032001f
03570356b2321fbf41600355000100af0355000100a003540001008f0354
0001005f03540001004f03540001007f03550001007f03540001006f0355
0001006f03540001003f03550001003f03540001003f03540001002f0354
0001002f03540001001f03540001000f03540001035203530029001f0351
034a0029001f035003450025001f034f034a0025001f034e03490025001f
034d03470025001f034c034a0018001f034b03450012001f034a03460018
001f034903450044001f034803460044001f03470346b2441f3041700346
005f03450002000f0344001f0344002f0344003f03440004000f0344008f
034400a0034400df03440004005f0344007f034400cf03440003002f0344
0001034403440343034303410341000f0340001f0340002f034000030340
0340033f033f033e033e000f033d0001033d033d0040033c0001001f033c
002f033c003f033c004f033c005f033c00c0033c00d0033c0007033c033c
00200335003003350040033500500335006003350005000f032c002f032c
008f032c0003032c032d0024001f0321028c0014001f0320028c0014001f
031f028b001e001f031e028bb21e1f40410902b4005002b4006002b40070
02b4008002b4b205120f4114028b001f028b002f028b004f028b005f028b
007f028b009f028b00af028b0008003f028b004f028b400b023f023f034f
024f030440b80329b33c3c3240b80329b333363240b80329b31c1d3240b8
0329b30c1a320f41720329007f0329009f03290003000f0329002f032900
3f03290003000f0329001f0329000200af032700bf032700cf032700df03
270004000f0327004f0327005f0327008f0327009f032700af0327000600
bf032700ef032700ff03270003006f0327007f0327008f0327009f032700
af03270005000f0327001f0327002f0327004f0327005f03270005000f03
28002f0328005f0328007f032800af0328000500df03280001000f032700
0f032800500328008f032800bf0328000500df03220001008f0322000100
3f0322004f03220002002f0322003f03220002000f0322001f0322b20209
0fb8028bb2013a0f413f028c004f028c0002000f028d002f028d003f028d
0003001f028b0001000f028b0001002f028b0001000f028c002f028c003f
028c004f028c008f028c00af028c000603b903b903290329032703270328
0328032203220321032103200320031f031f031e031e02900290028f028f
028e028e028d028d028c028c028b028b4014af2bbf2b025f356f357f358f
359f35af35bf3507bb0261026102600260400a0016160000001211081a41
100204005c000d01fa005c000d01ad005c000d0172005c000d0140005c00
0d0117401a5c0de45c0dc85c0d995c0d955c0d585c0d4e5c0d465c0d2f5c
0db8016240172b0ddb2b0d902b0d562b0d362b0d352b0d332b0d292b0d41
1101590157000d00be0157000d00420157000d00320157000d0022015700
0d001d0157b20d0009bc015b00210801001f0127b421811fe521b80401b2
1f8321b80801b21f8221b80401b21f5b21b80401b21f3b21b80801b61f30
21671f2c21b80401b21f2621b80401b21f2421bd0401001f005501ac0007
012b402c07c9075f07400739072e072d072807270723071f071408120810
080e080c080a080808060804080208000814b8ffe0402b00000100140610
000001000604000001000410000001001002000001000200000001000002
010802004a00b013034b024b5342014bb0c063004b6220b0f65323b8010a
515ab005234201b0124b004b544218b0372b4bb807ff52b0382b4bb00950
5b58b101018e59b0382bb00288b801005458b801ffb101018e851bb01243
58b90001012c858d1bb90001012c858d59594bb0095058b104018d8d5900
16763f183f123e113946443e113946443e113946443e113946443e113946
60443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b
2b2b18b0372b1db0964b5358b0aa1d59b0324b5358b0ff1d594bb8040153
205c58b9023802364544b90237023645445958b90a800238455258b90238
0a804459594bb8040153205c58b9002002384544b90021023845445958b9
0a800020455258b900200a804459594bb8040153205c58b9001e02374544
b90025023745445958b90a80001e455258b9001e0a804459594bb8040153
205c58b13d214544b1212145445958b90a80003d455258b9003d0a804459
594bb8040153205c58b167214544b1212145445958b90a800067455258b9
00670a804459594bb8030153205c58b121214544b1212145445958b907e0
0021455258b9002107e04459594bb8030153205c58b121214544b11e2145
445958b907e00021455258b9002107e04459594bb8030153205c58b12121
4544b1252145445958b907e00021455258b9002107e04459592b2b2b2b2b
2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b01b9004a01d6b1437a456523456023456560234560b08b76
6818b080622020b9004301d64565234520b003266062636820b003266165
b801d6236544b043234420b14a7a4565234520b003266062636820b00326
6165b07a236544b04a2344b1007a455458b17a406544b24a404a45236144
59b347612aad456523456023456560234560b089766818b080622020b12a
614565234520b003266062636820b003266165b061236544b02a234420b1
47ad4565234520b003266062636820b003266165b0ad236544b0472344b1
00ad455458b1ad406544b247404745236144594b5342014b5058b1080042
59435c58b108004259b3020b0a124358601b2159421610703eb0124358b9
3b21187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d
411bba04000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba
01a80400000b2b59b0102342b01123420018456944456944737318456944
456944456944456944456944456944456944456944456944456944456944
4569444569444569444569447373737373745e735e737373737473737473
737374757373742b2b2b2b007300737400435c58410c001f028b001f028d
0002000f028b000f028c000f028d000373735974002b2b2b2b2b73750045
694473744569447345694445694445694473456944456944456944757473
7301732b2b2b2b2b2b2b2b2b2b2b2b007373737373737373737373737373
7373732b2b2b012b002b012b002b017375007375012b2b002b2b0073752b
2b2b2b2b2b0173012b012b73017300737374752b2b2b2b2b2b0000>
[8381 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

2 0 3 <> PBAAAA+CourierNewPSMT AddT42Char 
2 458 41 <0001009f000004740492003400f1405e6005010f090c2b10101d09211b1e
3522221d1b332d0f301f3002302b34341d2d0208053601011d081219152b
11111d19262c0029102902292b25251d2c22232619340025242600001902
0126091902090834252d2526002c102c502c032cb8013e402c2424230001
26102226001b201b02501ba01bd01be01bf01b051b521120100100108010
9010f01004101935f6b9010800182b4e10f45d713c4dfd5d71ed10fd3c3c
3c10f45ded3c103c003f3f10fd3c12392ffd3c103c10fd3c0110ed0010f5
5dd43c10ed0110f5d43c0010ed0110f5d43c10ed0010f55dd43c0110ed00
10f5d43c10ed0110f5d43c3130015d011121321615140623212226353436
333311232226353437363321111406232226353521112135343633321615
1114062322263535019c01201e1a1a1efe1b1e1a1a1e71711e1a0f0b1e03
9d18121318fd7d012d18131218181213180235fe1f171312181812131703
ea1713130d0afedf1e1a1a1ecdfe4b5f1e1a1a1efeee1e1a1a1e5f00>PBAAAA+CourierNewPSMT AddT42Char 
2 2092 58 <00010025000004a4049200280313b1060243545840181518021617050604
010408281a140626200c0209240215290111121739003f3cfd3c3c3c3f3c
1112173931301b405e6f1a6f1b6f1c6f1d88168617c005c014e816096010
60116012601304cf020110161017401640170418021b171e191f1d1e2829
1736023616311746024616411759015b1658178817a817c902c816da1714
28180911425500180911425505b8ffe8b40912425504b8ffe8b509124255
0d13b802a4401110501001103514101013141d0d14152127b802a4401e24
2024702402002410245024c024d02405249028242427281d2128000c06b8
02a4401e090f091f09020f09bf09df09ef09ff0905099005090906051d0c
0504201ab802a440141d5f1d011d35191d1d1a191d2019180002161720b8
fefa403415040320140504041e1514141515142800001e18191418181902
010203011e18171418181702030201031e151614151516022617b8027640
1e18260001010315260304082726211a26211a26202013260d06260d0c02
01be012c00000018015d00190000015d4032cf19011f190119402a351940
34363419802f35194023243419402627341926400f281f285f287f288f28
9f28cf28ef280828bb027900020017012c401716402a3516402f35164034
363416401a350f16ef160216b80158b40240263502b80279b2052015bd01
5d00140003012c0004012d40151f1401c01401142610050100054f058f05
cf050405bd012c00290045015400180164852b10f65d71ed5d71f4ee1910
e41a10fd2bfd712b2b2b2b18e61910fd711a18ed2b2b2b2b2b715de41910
e41810ee003f3ced10ed3c10ed3ced10ed3f3ced103c103cedfded87052e
2b087d10c487052e182b087d10c487052e182b7d10c4872e182b877dc42b
2b18000810fd3d12392f180110f15d2ff4c4000810fd3d12392f180110f1
5d712ff4c4000810fd3d12392f180110f15d712ff4c4000810fd3d12392f
180110f15d2ff4c42b2b2b2b3130014bb026534bb02a515a58b70280021a
171a161a383838003859014bb01a534bb024515a58b90002ffecb2020817
b8fff0b116103838380038590171005d71015d5d59212303032303232226
353436332132161514062323131333131323222635343633213216151406
232303d784eee9847c1f1e1a1a1e01381f1a1a1fc46fe381e96dc51e1a1a
1e01361f1a1a1f1f033ffcc1043e1713131717131317fc22032ffcd103de
1713131717131317>PBAAAA+CourierNewPSMT AddT42Char 
2 3508 71 <0002007effdf04ab04e7001e002a00e1b6492a682a020802b802ae400e00
0501052f010505020122081e18b802ae40101b2f171b1b1817221e0a1622
28095d0ab80163b328210c16b8016340202221141e000c0b140700000001
171f09208001010f0101011a2c252180100110b8018cb32b2a8018b8012c
852b10f671ed4e10f65d714dfd3c3c103c003f3f3f103c10ede410ede4f4
1112393910fd3d12392f180110f5f4c40010fd3d12392f180110f55df4c4
31304bb016534bb024515a58b30e081208383859004bb00c534bb024515a
58b9002affecb2201427bafff80026ffe7b3230824193838383838385900
5d0111333216151406232335062322262635343636333217112322263534
36331334262322061514163332360402701f1a1a1fc592e172d17979d173
dc96701f1a1a1f70d89596d8d89695d804e7fb6d17131218a7c879e07778
df7ac801da18131218fcc8a0dcdca09fdddd>PBAAAA+CourierNewPSMT AddT42Char 
2 3856 72 <00020080ffdf042f03800019002000d040690a1699150232024202520263
02c602c613ca19da12da19dc1be318e51ffa160d191c2a1c3402381e4a1b
4c1f5c1b5a1f6f1b6c1f7e1b8c1b991c991eb7050f7516ba1cc403c412c9
1cc91e0608c5111a2020000101111d2117070421110b0c541a3ba0000170
000100b801e5401722203b013ba014016f14bf14cf14df14041419212aac
18b8012c852b4e10f45d714deded10f65d71ede4003fed3fed12392f3cfd
3c10ed3130004bb00c534bb024515a58b2161406b8fff0b41b141f1e02b8
ffec383838383859005d71015d7101211616333236373633321615140706
0623220035340033320007262623220607042dfca816e5a95ece41130e10
181030f581d8fedf010fc8ce010a5719d59393d41a019da3c73e330f1911
11103257011bc9b70106fef3818baeac8d00>PBAAAA+CourierNewPSMT AddT42Char 
2 4174 75 <000100550000046d04e700380172402d991afb2002040115016406750690
019402a001a402b001b3020aa506a607b405b507c607d807df1a071a0811
17b802ae40100f141f1402145c18141417182211292fb802ae400b2c5c30
2c2c2f302229100ab802ae400e000d010d5c090d0d0a0922102822b802ae
400b255c212525222122283832b802ae4023352f31353532312238012029
1c210429282811111038000407100a08092019df180118b802a3400b3a00
212031bf30cf300230b801ebb339476118b8012c852b10f65d3cfd3c10f4
5d3cfd3c003f3f3f103c103c103c10ed11393910fd3d12392f180110f5f4
c40010fd3d12392f180110f5f4c40010fd3d12392f180110f55df4c40010
fd3d12392f180110f5f4c40010fd3d12392f180110f55df4c4b106024354
58b90001ffc0b31b243401b8ffe0b2111a34002b2b593130437940101a1b
050706251b05191f011a071c1f01002b012b2b8181004bb012534bb02451
5a58b90006fff4b5200c1f141e163838383859015d00715d011136363332
161615113332161514062321222635343633331134262322070607113332
161514062321222635343633331123222635343633015250935b62895c5e
1f19191ffeef1f1a1a1f5e83755c412f6c5f1e1a1a1efeee1e1a1a1e5f71
1e1a1a1e04e7fdfb5747458f4ffdf7171312181812131702035b7a2d2077
fdec1713121818121317043e18131218>PBAAAA+CourierNewPSMT AddT42Char 
2 4700 76 <000200bd0000041605110003001c007f402a221932194019521963197419
841907130d10581414220d060c09580505220c161c19951515221c03c502
b80194b61c060d0c0a0001bb015f0003000201e0400e04040520154f1401
14191d517f182b4e10f45d3c4dfd3c10fd3cfd3c003f3c3ff6ed10ed0110
f5d43c0010ed0110f5d43c0010ed0110f5d43c3130015d01152335131121
3216151406232122263534363321112322263534363302907c7f014a1f1a
1a1ffd181e1a1a1e014af51e1b1a1f0511d9d9fe51fcf217131218181213
1702b91812131800>PBAAAA+CourierNewPSMT AddT42Char 
2 4918 79 <000100bb0000041404e70018005d4034621573158315030f090c58101022
09020805580101220812181595111122180009080a0001201110104f10bf
1003101919517f182b4e10f45d3c4dfd3c003f3c3fed0110f5d43c0010ed
0110f5d43c0010ed0110f5d43c3130015d01112132161514062321222635
3436332111232226353436330291014a1f1a1a1ffd181e1a1a1e014af21e
1b1a1f04e7fb6d1713121818121317043e1813121800>PBAAAA+CourierNewPSMT AddT42Char 
2 5636 85 <000100ab0000045a0377002b011540147c0e012c094f0a6a127912891296
069d13071c22b802ae400b1fc8231f1f2223221c1b15ba02ae0018014040
091418181514221b2b25b802ae404f284e2428282524222b0b0e140c0b0a
090805070d011300140e100a24253b002b060a3f10210407153b1b223b1c
1c1b0a0f07f00702071a2d001420240f23502380239023a023f023062319
2cfd8e182b4e10f45d3c4dfd3c4e10e65d003f3c4d10ed10ed3feded3f3c
fd3c1112391112393911121739011139390010fd3d12392f180110f5f4c4
0010fd3d12392f180110f5f4c40010fd3d12392f180110f5f4c4b1060243
5458b90001ffc0b31b243401b8ffe0b2111a34002b2b593130004bb01153
4bb024515a58b513140e16121c3838385900710171011536363332161514
062322262726262322060711213216151406232122263534363333112322
26353436330202a4a3454b8119130a0e13233419379bbf01741f1a1a1ffd
6d1e1a191fcb9b1e1a191f0362d49455651a13190713231a58abfe341713
12181712111702bc18131218>PBAAAA+CourierNewPSMT AddT42Char 
2 6038 87 <00010092ffdf043b0492002c00c94024fb1b010d1b1a1b02a40ab50ac20a
d30ae40a05760e860e950ea60ec60bd60b0617080107ba02ae0004017240
150804040708220110140915110f1011121405190c29b801a340111e3b24
24073b010100060c21190b148804b801a940142c2c0809202621c6001c10
1c201c701cbf1c051cb802e5b32d2aad182b10f65de43cfd3c3c10f4e400
3fed3f3c10ed3c10fded111217391239011112390010fd3d12392f180110
f5f4c431304379400e1a1b0a0b0b1a091f000a1b0c1f00002b012b818100
715d01715d01213216151406232111141633323637363332161514070606
232226351123222635343633333534363332161501ba01c81e1a1a1efe38
757155c637140d10180d20f77193ae9b1e1a1a1e9b181213180362181312
18fdd1496233200d19110f0d214d8a75022f18131218f81e1a1a1e00>PBAAAA+CourierNewPSMT AddT42Char 
2 0 0 <00020067000004670500000300070046b10607b8010cb40201000504b801
0cb403000a0605b8010cb60303021a090704b8010cb6010019084f7b182b
4e10f43c4dfd3c4e10f63c4d10fd3c003f3cfd3c3f3cfd3c313033112111
25211121670400fc2003c0fc400500fb002004c0>PBAAAA+CourierNewPSMT AddT42Char 
PBAAAA+CourierNewPSMT /CharStrings get begin
/space 3 def
/F 41 def
/W 58 def
/d 71 def
/e 72 def
/h 75 def
/i 76 def
/l 79 def
/r 85 def
/t 87 def
end
PBAAAA+CourierNewPSMT /Encoding get
dup 32 /space put
dup 70 /F put
dup 87 /W put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 114 /r put
dup 116 /t put
pop
end
%ADOEndSubsetFont
/JNHKUZ+CourierNewPSMT /PBAAAA+CourierNewPSMT findfont ct_VMDictPut
/JNHKUZ+CourierNewPSMT*1 
[32{/.notdef}rp /space 37{/.notdef}rp /F 16{/.notdef}rp /W 12{/.notdef}rp /d 
/e 2{/.notdef}rp /h /i 2{/.notdef}rp /l 5{/.notdef}rp /r 
/.notdef /t 139{/.notdef}rp]
JNHKUZ+CourierNewPSMT nf
JNHKUZ+CourierNewPSMT*1 [-6.16e-7 -14 -14 6.16e-7 0 0 ]msf
292.85 146.287 mo
(Filter Width)
[-8.40009 -8.40009 -8.40009 -8.40009 -8.40009 -8.40009 -8.40009 -8.40009 -8.40009 -8.40009 -8.40009 0 
]ysh
%ADOBeginSubsetFont: PBAAAA+CourierNewPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+CourierNewPSMT gcheck setglobal} if
2 846 44 <000100e5000003e90492001f00d7402d2f042e05230c200d201420152f1c
2f1e3e05330c301430153f1c3f1e4e05430c401440154b1c4f1d4f1e1509
0fb802a4400b0c36100c0c0f101d09191fb802a4400b1c36001c1c1f001d
190802b802a4400b053601050502011d081812b802a44027153611151512
111d181f261912261918020226080f260909080800011e114f1001101920
8cdf182b4e10f45d3c4dfd3c003f3c10ed10ed3f3ced10ed10fd3d12392f
180110f5f4c40010fd3d12392f180110f5f4c40010fd3d12392f180110f5
f4c40010fd3d12392f180110f5f4c43130015d0111213216151406232122
263534363321112122263534363321321615140623029101201e1a1a1efd
6c1e1a1a1e0120fee01e1a1a1e02941e1a1a1e043efc1617131218181213
1703ea171313171713131700>PBAAAA+CourierNewPSMT AddT42Char 
2 1158 47 <000100800000045804920021006c4038110b0e3512121d0b211b1e350000
1d1b030906db02021d09141a173513131d1a02260b1b1a020b080f090109
1a2300011e13121922a579182b4e10f43c4dfd3c4e10e65d003f3f3c4d10
ed10ed0110f5d43c10ed0010f5d43c10ed0110f5d43c0010ed0110f5d43c
313001112111343633321615112122263534363333112322263534363321
32161514062301d5022e18131218fc601e1a1a1ec8c81e1a1a1e01e51e1a
1a1e043efc16014e1e1a191ffe5e1812131703ea1713131717131317>PBAAAA+CourierNewPSMT AddT42Char 
2 3000 68 <00020090ffdf045603800028003601624051aa07a41faa2e032607251f3b
047413771a761b8014851a9214951aab07a014a41aae2fb507bc0eb114b4
1ab91ecb0ef431150a0119012a01039a11941a027b2e8a2e9b2eaa0eab2e
c531d531e531082822b802ae401a252f21252522212228121d1317293621
0036290103330c092c36b801e0405a018828000a3321030b0921002c102c
702c032c293b0c0c28149c10211d073321030b0d00202021400d163f0f21
012f213f214f215f219f21af21bf21df2108211a38178f302106400d163f
6f069f06bf06df06040619372abb18b8012c852b4e10f45d012b4dfde64e
10f65d71012b3c4dfd3c003fed3feded12392fed2f5ded3fed3f3cf4ed11
12391217390111123939123911390010fd3d12392f180110f5f4c4313000
4bb019534bb024515a58bf0007fff80034fff00035fff00019fff4b31208
2e0838383838383859005d71004bb00b534bb014515a58bb001efff00013
ffc038385900715d015d2135062322263534363332161735342623220706
232226353437363736333216151133321615140623032626232207061514
16333236370358b7d097aae0d73a884f808062b1200910170a0e639c509f
b2701f1a1a1fc53b8449b7674e77726dbb63799a996f7ab60f1088456639
0a1812110a0f1a2a9d63fdd41713121801a211104f3b524c68575f00>PBAAAA+CourierNewPSMT AddT42Char 
2 5090 81 <0001006c000004570380003801874037d506d50802c406c40802a308b206
b20803710780070263076408641b039b1ba506027b1fb301b402031c1f6a
1f0200010402021e081218b802ae40100f151f1502154619151518192212
292fb802ae400b2c5c302c2c2f302229110bb802ae400e000e010e460a0e
0e0b0a22112822b802ae40100025102502255c212525222122283832b802
ae400d3546313535323122323b380601ba01e00020016340131d21040729
28281212110a090a201adf190119b802a340103a002120319030a0300230
19394761182b4e10f45d3c4dfd3c10f45d3cfd3c003f3c103c103c3ffdf4
ed3fedfd3d12392f180110f5f4c40010fd3d12392f180110f55df4c40010
fd3d12392f180110f55df4c40010fd3d12392f180110f5f4c40010fd3d12
392f180110f55df4c4b10602435458b90001ffc0b31b243401b8ffe0b211
1a34002b2b593130437940141b1c05080708060802061c051a1f011b081d
1f01002b012b2a8181004bb01b534bb024515a58b21f1401b8ffdeb11b14
38383859007171715d0171715d5d5d011536363332171616151133321615
140623232226353436333311342623220607113332161514062321222635
3436333311232226353436330157588e59604f385b471e1a1a1ee11f1a1a
1f46826d537a715f1e1a1a1efeee1e1a1a1e5f471e1a1a1e03627f594429
1e8b49fdef17131218181213170203597b4385fdf1171312181812131702
b91813121800>PBAAAA+CourierNewPSMT AddT42Char 
2 6366 91 <000100650000046a03620043029240951f111f12021238115711021b0001
10001f2260016d126f216f236043c301c310ce12ce21cc23cc32c234c243
0f0800180098220300320112431112432310222310213433320121343223
10121020013214010132344312121220213414212134023b013b0f3b103b
0a133b123b213b203b1a313b323b243b233b2a423b433b353b343b3b4043
433f38383f2323272e2e273f590534b8012eb420439a3f10b801e0401b01
01050c2121160c0c0500160116161d019a0f056f0502051a4532b801e0b3
239a2712b801e0401b219a27590f1d2f1d4f1d5f1d6f1d051d19440a0a1a
0a2a063b06e6ba01070018012c852b003f3f3f3f014e10f45d4de419f418
ed1910f418ed4e10f65d194de41812392f5d11392f1911392f1112392f18
ed1910e41aed1810e411392f1912392f1811392f1912392f1a001810eded
eded10edededed10edededed10edededed05872e2b435c58b90012ffcab3
19323f12b8ffd4b3172d3f12b8ffacb314283f12b8fff6b312233f12b8ff
e2b30e173f12b8ffdeb21b3c3e2b2b2b2b2b2b59877dc4872e182b435c58
4023103619323f102c172d3f104014283f100a12233f101e0e173f101e0d
163f10221b3c3e2b2b2b2b2b2b2b59877dc40f0f0f0fb10602435458b511
180d0f3433b8ffe8b20d0f34002b2b59313001715d005d71435c58b90033
ffe24009120b3f111e0b123f33b8ffe2404a0b123f110a16173e110a1112
3e43411e123f01411e123f43371c113f01371c113f43371b103f01371b10
3f4314190f3f0114190f3f210a1d203e340f1d203e3214191b3e10141015
3f32b8ffecb310153f12b8ffecb310153f43b8ffc4b310143e01b8ffc440
0d10143e233c10143e213c10143e012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b002b2b2b2b2b59005d010132161615140623212226353436333301
013332161514062321222635343636330101222626353436333332161514
062323010123222635343633333216151406062302a0018126140f1a1ffe
f21f1a1a1f8bfeb9febb8c1e1a1a1efeef1e1a0f13260181feaa24130f1a
1fe51f19191f64011b011d641e1b1a1fe51e1a0f132401c5fe8f07160d12
18181213170139fec71713121818120d16070171014808160d1218181312
18feef01111813121818130c1608>PBAAAA+CourierNewPSMT AddT42Char 
2 7220 92 <00010095fe7e04980362003201e040411800181218222b0d211735013511
4f0d4017fb13f9220b09134b134a22680168117813782288138822b911bd
13ba22c622d7220e2218090f42552318090f425500b8ffe8b4090e425501
b8ffe8400f090f42550000011232121132130a10b802ae401e0d0d2f110d
0d1011220a11121b221e801e011e99221e1e22221b22232b31b802aeb42e
302e012eb80117400b322e2e3132222b32130902b802ae400e0505990105
050201220901001a14b802ae401117301701172f1317171413221a13322a
24b802ae406d27272f2327272423222a2322133232202322142323221112
122000011400121300013223221312110100081e051209000a223b1b1b14
3b1a1a103b0a023b0a0906243b2a313b2b2b2a0e001e501e02701ee01ef0
1e031e1a345005010005100520057005e005f005060519332aba01210018
012c852b4e10e45d7110e65d71003f3c4d10ed10ed3f3ced10ed3c10ed3c
10ed3f1239011112173987082e2b057d10c4872e182b7d10c418000810fd
3d12392f180110f12ff4c4000810fd3d12392f180110f15d2ff4c4000810
fd3d12392f180110f12ff4c4000810fd3d12392f180110f15d2ff4c40008
10fd3d392f180110f15d2f10c4000810fd3d12392f180110f12ff4c40708
103c083c012b2b2b2b313001715d21012322263534363633333216151406
232301012322263534363333321615140606230133321615140623212226
3534363321026cfe7a191e1a0d1516e61e1a1a1e7101570152711e1a1a1e
e51f1a10142efdec831e1a1a1efe1c1e1a1a1e0107030d18120d15091813
1218fd4f02b11813121818130d1607fbc5171312181713131700>PBAAAA+CourierNewPSMT AddT42Char 
PBAAAA+CourierNewPSMT /CharStrings get begin
/I 44 def
/L 47 def
/a 68 def
/n 81 def
/x 91 def
/y 92 def
end
PBAAAA+CourierNewPSMT /Encoding get
dup 73 /I put
dup 76 /L put
dup 97 /a put
dup 110 /n put
dup 120 /x put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/JNHKUZ+CourierNewPSMT*1 
[32{/.notdef}rp /space 37{/.notdef}rp /F 2{/.notdef}rp /I 2{/.notdef}rp /L 
10{/.notdef}rp /W 9{/.notdef}rp /a 2{/.notdef}rp /d /e 2{/.notdef}rp 
/h /i 2{/.notdef}rp /l /.notdef /n 3{/.notdef}rp /r 
/.notdef /t 3{/.notdef}rp /x /y 134{/.notdef}rp]
JNHKUZ+CourierNewPSMT nf
JNHKUZ+CourierNewPSMT*1 [14.025 0 0 -14.025 0 0 ]msf
404.05 204.237 mo
(Layer Index)
[8.40009 8.40009 8.40009 8.40009 8.40009 8.40009 8.40009 8.40009 8.40009 8.40009 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/JNHKUZ+CourierNewPSMT*1 uf
/JNHKUZ+CourierNewPSMT uf
/PBAAAA+CourierNewPSMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
