%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: fig5.pdf
%%Creator: Adobe Acrobat 9.3.4
%%For: Dell
%%CreationDate: 2021/11/18, 15:24:05
%%BoundingBox: 0 0 396 260
%%HiResBoundingBox: 0 0 395.9055 259.3702
%%CropBox: 0 0 395.9055 259.3702
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1089 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Microsoft® PowerPoint® 2016"
   dc:format="application/pdf"
   xmp:CreatorTool="Microsoft® PowerPoint® 2016"
   xmp:CreateDate="2021-11-18T15:23:08+08:00"
   xmp:ModifyDate="2021-11-18T15:23:59+08:00"
   xmp:MetadataDate="2021-11-18T15:23:59+08:00"
   xmpMM:DocumentID="uuid:037123CF-9A82-4B7F-AFCE-3B76C3CE9D14"
   xmpMM:InstanceID="uuid:11ddf3d5-644a-4297-892c-4d4ce49d13f3">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint 演示文稿</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>吴 凯</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -259.37 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 259.37 li
395.905 259.37 li
395.905 0 li
cp
clp
[1 0 0 1 -246.614 0 ]ct
0 406.772 mo
960 406.772 li
960 -133.228 li
0 -133.228 li
0 406.772 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
257.897 250.229 mo
649.219 250.229 li
649.219 -7.80483 li
257.897 -7.80483 li
257.897 250.229 li
f
303.516 219.757 mo
637.729 219.757 li
637.729 2.86685 li
303.516 2.86685 li
303.516 219.757 li
f
318.71 219.757 mo
318.71 223.248 li
1 /0 /CSD get_res sepcs
1 sep
.21338 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
gsave
[3.74255 0 -3.92231e-7 -3.73961 257.4 250.572 ]ct
@
grestore newpath
314.867 233.332 mo
314.867 231.976 315.069 230.809 315.481 229.831 cv
315.889 228.851 316.435 228.121 317.112 227.643 cv
317.64 227.263 318.183 227.073 318.744 227.073 cv
319.657 227.073 320.477 227.538 321.203 228.467 cv
322.109 229.617 322.562 231.178 322.562 233.15 cv
322.562 234.528 322.363 235.7 321.963 236.665 cv
321.566 237.628 321.057 238.327 320.44 238.763 cv
319.826 239.199 319.231 239.417 318.654 239.417 cv
317.52 239.417 316.577 238.747 315.821 237.408 cv
315.185 236.28 314.867 234.921 314.867 233.332 cv
cp
316.585 233.551 mo
316.585 235.187 316.787 236.522 317.191 237.557 cv
317.524 238.428 318.022 238.864 318.684 238.864 cv
318.999 238.864 319.324 238.723 319.665 238.44 cv
320.005 238.156 320.264 237.681 320.44 237.015 cv
320.705 236.009 320.84 234.592 320.84 232.763 cv
320.84 231.407 320.698 230.276 320.417 229.371 cv
320.208 228.698 319.938 228.22 319.605 227.94 cv
319.365 227.747 319.074 227.651 318.733 227.651 cv
318.336 227.651 317.984 227.83 317.674 228.187 cv
317.251 228.671 316.966 229.434 316.813 230.476 cv
316.663 231.516 316.585 232.541 316.585 233.551 cv
cp
f
379.781 219.757 mo
379.781 223.248 li
gsave
[3.74255 0 -3.92231e-7 -3.73961 257.4 250.572 ]ct
@
grestore newpath
374.542 236.917 mo
373.711 239.206 li
366.69 239.206 li
366.69 238.881 li
368.756 236.999 370.208 235.463 371.05 234.272 cv
371.892 233.079 372.315 231.988 372.315 231 cv
372.315 230.247 372.083 229.628 371.623 229.143 cv
371.159 228.657 370.605 228.414 369.961 228.414 cv
369.377 228.414 368.853 228.585 368.389 228.928 cv
367.921 229.27 367.581 229.771 367.356 230.431 cv
367.031 230.431 li
367.18 229.35 367.555 228.521 368.161 227.943 cv
368.763 227.363 369.519 227.073 370.429 227.073 cv
371.391 227.073 372.199 227.383 372.843 228.002 cv
373.49 228.621 373.816 229.351 373.816 230.193 cv
373.816 230.795 373.674 231.397 373.393 231.999 cv
372.963 232.946 372.259 233.948 371.286 235.007 cv
369.83 236.596 368.921 237.555 368.558 237.882 cv
371.664 237.882 li
372.296 237.882 372.742 237.859 372.996 237.812 cv
373.251 237.765 373.479 237.671 373.681 237.529 cv
373.887 237.385 374.067 237.181 374.22 236.917 cv
cp
f
375.938 233.332 mo
375.938 231.976 376.144 230.809 376.552 229.831 cv
376.963 228.851 377.506 228.121 378.183 227.643 cv
378.711 227.263 379.254 227.073 379.815 227.073 cv
380.728 227.073 381.548 227.538 382.274 228.467 cv
383.18 229.617 383.633 231.178 383.633 233.15 cv
383.633 234.528 383.434 235.7 383.034 236.665 cv
382.637 237.628 382.132 238.327 381.514 238.763 cv
380.897 239.199 380.302 239.417 379.725 239.417 cv
378.591 239.417 377.648 238.747 376.896 237.408 cv
376.256 236.28 375.938 234.921 375.938 233.332 cv
cp
377.659 233.551 mo
377.659 235.187 377.858 236.522 378.262 237.557 cv
378.595 238.428 379.093 238.864 379.755 238.864 cv
380.07 238.864 380.395 238.723 380.736 238.44 cv
381.076 238.156 381.335 237.681 381.511 237.015 cv
381.776 236.009 381.911 234.592 381.911 232.763 cv
381.911 231.407 381.773 230.276 381.492 229.371 cv
381.282 228.698 381.009 228.22 380.676 227.94 cv
380.436 227.747 380.148 227.651 379.804 227.651 cv
379.407 227.651 379.055 227.83 378.745 228.187 cv
378.322 228.671 378.037 229.434 377.884 230.476 cv
377.734 231.516 377.659 232.541 377.659 233.551 cv
cp
f
384.92 233.332 mo
384.92 231.976 385.126 230.809 385.538 229.831 cv
385.945 228.851 386.488 228.121 387.166 227.643 cv
387.693 227.263 388.24 227.073 388.801 227.073 cv
389.714 227.073 390.53 227.538 391.256 228.467 cv
392.166 229.617 392.618 231.178 392.618 233.15 cv
392.618 234.528 392.416 235.7 392.02 236.665 cv
391.623 237.628 391.114 238.327 390.496 238.763 cv
389.883 239.199 389.288 239.417 388.711 239.417 cv
387.577 239.417 386.634 238.747 385.878 237.408 cv
385.242 236.28 384.92 234.921 384.92 233.332 cv
cp
386.642 233.551 mo
386.642 235.187 386.844 236.522 387.244 237.557 cv
387.581 238.428 388.079 238.864 388.741 238.864 cv
389.056 238.864 389.381 238.723 389.718 238.44 cv
390.059 238.156 390.317 237.681 390.493 237.015 cv
390.762 236.009 390.897 234.592 390.897 232.763 cv
390.897 231.407 390.755 230.276 390.474 229.371 cv
390.264 228.698 389.995 228.22 389.662 227.94 cv
389.422 227.747 389.13 227.651 388.79 227.651 cv
388.393 227.651 388.041 227.83 387.727 228.187 cv
387.308 228.671 387.02 229.434 386.87 230.476 cv
386.716 231.516 386.642 232.541 386.642 233.551 cv
cp
f
440.852 219.757 mo
440.852 223.248 li
gsave
[3.74255 0 -3.92231e-7 -3.73961 257.4 250.572 ]ct
@
grestore newpath
435.736 234.822 mo
435.736 236.067 li
434.138 236.067 li
434.138 239.206 li
432.694 239.206 li
432.694 236.067 li
427.656 236.067 li
427.656 234.945 li
433.176 227.073 li
434.138 227.073 li
434.138 234.822 li
cp
432.694 234.822 mo
432.694 228.922 li
428.517 234.822 li
cp
f
437.009 233.332 mo
437.009 231.976 437.215 230.809 437.623 229.831 cv
438.034 228.851 438.577 228.121 439.254 227.643 cv
439.782 227.263 440.328 227.073 440.89 227.073 cv
441.799 227.073 442.619 227.538 443.345 228.467 cv
444.251 229.617 444.704 231.178 444.704 233.15 cv
444.704 234.528 444.505 235.7 444.105 236.665 cv
443.708 237.628 443.203 238.327 442.585 238.763 cv
441.968 239.199 441.373 239.417 440.8 239.417 cv
439.666 239.417 438.719 238.747 437.967 237.408 cv
437.327 236.28 437.009 234.921 437.009 233.332 cv
cp
438.73 233.551 mo
438.73 235.187 438.933 236.522 439.333 237.557 cv
439.67 238.428 440.168 238.864 440.826 238.864 cv
441.141 238.864 441.466 238.723 441.807 238.44 cv
442.147 238.156 442.406 237.681 442.582 237.015 cv
442.851 236.009 442.982 234.592 442.982 232.763 cv
442.982 231.407 442.844 230.276 442.563 229.371 cv
442.353 228.698 442.08 228.22 441.747 227.94 cv
441.507 227.747 441.219 227.651 440.879 227.651 cv
440.482 227.651 440.126 227.83 439.816 228.187 cv
439.397 228.671 439.108 229.434 438.959 230.476 cv
438.805 231.516 438.73 232.541 438.73 233.551 cv
cp
f
445.991 233.332 mo
445.991 231.976 446.197 230.809 446.609 229.831 cv
447.016 228.851 447.563 228.121 448.24 227.643 cv
448.768 227.263 449.311 227.073 449.872 227.073 cv
450.785 227.073 451.605 227.538 452.331 228.467 cv
453.237 229.617 453.689 231.178 453.689 233.15 cv
453.689 234.528 453.487 235.7 453.091 236.665 cv
452.694 237.628 452.185 238.327 451.567 238.763 cv
450.954 239.199 450.359 239.417 449.782 239.417 cv
448.648 239.417 447.705 238.747 446.949 237.408 cv
446.313 236.28 445.991 234.921 445.991 233.332 cv
cp
447.713 233.551 mo
447.713 235.187 447.915 236.522 448.319 237.557 cv
448.652 238.428 449.15 238.864 449.812 238.864 cv
450.126 238.864 450.452 238.723 450.793 238.44 cv
451.133 238.156 451.391 237.681 451.567 237.015 cv
451.833 236.009 451.968 234.592 451.968 232.763 cv
451.968 231.407 451.826 230.276 451.545 229.371 cv
451.335 228.698 451.066 228.22 450.733 227.94 cv
450.493 227.747 450.201 227.651 449.861 227.651 cv
449.464 227.651 449.112 227.83 448.802 228.187 cv
448.379 228.671 448.094 229.434 447.941 230.476 cv
447.791 231.516 447.713 232.541 447.713 233.551 cv
cp
f
501.923 219.757 mo
501.923 223.248 li
gsave
[3.74255 0 -3.92231e-7 -3.73961 257.4 250.572 ]ct
@
grestore newpath
496.5 227.073 mo
496.5 227.398 li
495.729 227.473 495.097 227.627 494.61 227.858 cv
494.12 228.089 493.637 228.44 493.162 228.913 cv
492.687 229.386 492.29 229.914 491.979 230.496 cv
491.665 231.077 491.403 231.768 491.194 232.569 cv
492.036 231.991 492.881 231.702 493.727 231.702 cv
494.543 231.702 495.247 232.029 495.842 232.684 cv
496.441 233.338 496.736 234.18 496.736 235.209 cv
496.736 236.202 496.437 237.108 495.834 237.927 cv
495.108 238.92 494.15 239.417 492.956 239.417 cv
492.144 239.417 491.456 239.148 490.887 238.609 cv
489.775 237.563 489.217 236.207 489.217 234.541 cv
489.217 233.479 489.431 232.469 489.861 231.511 cv
490.288 230.552 490.894 229.701 491.688 228.958 cv
492.481 228.216 493.241 227.716 493.963 227.46 cv
494.689 227.202 495.366 227.073 495.995 227.073 cv
cp
491.044 233.208 mo
490.939 233.998 490.887 234.635 490.887 235.122 cv
490.887 235.683 490.991 236.292 491.197 236.951 cv
491.407 237.607 491.714 238.128 492.122 238.513 cv
492.421 238.788 492.784 238.926 493.211 238.926 cv
493.72 238.926 494.176 238.686 494.577 238.208 cv
494.977 237.727 495.176 237.042 495.176 236.154 cv
495.176 235.155 494.977 234.291 494.581 233.562 cv
494.184 232.831 493.619 232.465 492.885 232.465 cv
492.664 232.465 492.429 232.512 492.174 232.605 cv
491.92 232.699 491.542 232.9 491.044 233.208 cv
cp
f
498.08 233.332 mo
498.08 231.976 498.286 230.809 498.694 229.831 cv
499.105 228.851 499.648 228.121 500.325 227.643 cv
500.853 227.263 501.399 227.073 501.961 227.073 cv
502.87 227.073 503.69 227.538 504.416 228.467 cv
505.322 229.617 505.775 231.178 505.775 233.15 cv
505.775 234.528 505.576 235.7 505.176 236.665 cv
504.779 237.628 504.274 238.327 503.656 238.763 cv
503.039 239.199 502.444 239.417 501.871 239.417 cv
500.737 239.417 499.79 238.747 499.038 237.408 cv
498.398 236.28 498.08 234.921 498.08 233.332 cv
cp
499.801 233.551 mo
499.801 235.187 500.003 236.522 500.404 237.557 cv
500.741 238.428 501.239 238.864 501.897 238.864 cv
502.212 238.864 502.541 238.723 502.878 238.44 cv
503.218 238.156 503.477 237.681 503.652 237.015 cv
503.922 236.009 504.053 234.592 504.053 232.763 cv
504.053 231.407 503.914 230.276 503.634 229.371 cv
503.424 228.698 503.151 228.22 502.818 227.94 cv
502.578 227.747 502.29 227.651 501.95 227.651 cv
501.553 227.651 501.197 227.83 500.887 228.187 cv
500.468 228.671 500.179 229.434 500.03 230.476 cv
499.876 231.516 499.801 232.541 499.801 233.551 cv
cp
f
507.066 233.332 mo
507.066 231.976 507.268 230.809 507.68 229.831 cv
508.087 228.851 508.634 228.121 509.311 227.643 cv
509.839 227.263 510.382 227.073 510.943 227.073 cv
511.856 227.073 512.676 227.538 513.402 228.467 cv
514.307 229.617 514.76 231.178 514.76 233.15 cv
514.76 234.528 514.562 235.7 514.162 236.665 cv
513.765 237.628 513.256 238.327 512.638 238.763 cv
512.025 239.199 511.43 239.417 510.853 239.417 cv
509.719 239.417 508.776 238.747 508.02 237.408 cv
507.384 236.28 507.066 234.921 507.066 233.332 cv
cp
508.784 233.551 mo
508.784 235.187 508.986 236.522 509.39 237.557 cv
509.723 238.428 510.221 238.864 510.883 238.864 cv
511.198 238.864 511.523 238.723 511.864 238.44 cv
512.204 238.156 512.462 237.681 512.638 237.015 cv
512.904 236.009 513.039 234.592 513.039 232.763 cv
513.039 231.407 512.897 230.276 512.616 229.371 cv
512.406 228.698 512.137 228.22 511.804 227.94 cv
511.564 227.747 511.272 227.651 510.932 227.651 cv
510.535 227.651 510.183 227.83 509.873 228.187 cv
509.45 228.671 509.165 229.434 509.012 230.476 cv
508.862 231.516 508.784 232.541 508.784 233.551 cv
cp
f
562.994 219.757 mo
562.994 223.248 li
gsave
[3.74255 0 -3.92231e-7 -3.73961 257.4 250.572 ]ct
@
grestore newpath
552.968 233.219 mo
552.025 232.447 551.419 231.827 551.146 231.36 cv
550.872 230.892 550.738 230.407 550.738 229.904 cv
550.738 229.133 551.037 228.469 551.632 227.912 cv
552.231 227.353 553.024 227.073 554.012 227.073 cv
554.97 227.073 555.741 227.333 556.325 227.853 cv
556.913 228.373 557.205 228.966 557.205 229.632 cv
557.205 230.077 557.047 230.53 556.733 230.992 cv
556.415 231.454 555.756 231.997 554.757 232.622 cv
555.786 233.417 556.467 234.043 556.801 234.499 cv
557.246 235.096 557.467 235.724 557.467 236.384 cv
557.467 237.22 557.149 237.934 556.509 238.527 cv
555.872 239.12 555.038 239.417 554.001 239.417 cv
552.875 239.417 551.991 239.063 551.359 238.356 cv
550.857 237.79 550.607 237.17 550.607 236.496 cv
550.607 235.971 550.786 235.45 551.138 234.934 cv
551.494 234.416 552.1 233.844 552.968 233.219 cv
cp
554.345 232.28 mo
555.045 231.65 555.491 231.152 555.678 230.787 cv
555.865 230.421 555.958 230.006 555.958 229.545 cv
555.958 228.931 555.786 228.45 555.438 228.103 cv
555.094 227.755 554.626 227.581 554.027 227.581 cv
553.432 227.581 552.949 227.754 552.575 228.1 cv
552.197 228.444 552.01 228.847 552.01 229.309 cv
552.01 229.612 552.089 229.916 552.242 230.221 cv
552.396 230.524 552.62 230.813 552.904 231.088 cv
cp
553.38 233.551 mo
552.893 233.96 552.534 234.406 552.302 234.889 cv
552.066 235.371 551.95 235.893 551.95 236.454 cv
551.95 237.208 552.156 237.811 552.568 238.264 cv
552.979 238.716 553.503 238.943 554.143 238.943 cv
554.772 238.943 555.277 238.765 555.659 238.41 cv
556.041 238.052 556.232 237.62 556.232 237.111 cv
556.232 236.69 556.119 236.313 555.899 235.98 cv
555.483 235.361 554.641 234.551 553.38 233.551 cv
cp
f
559.151 233.332 mo
559.151 231.976 559.357 230.809 559.765 229.831 cv
560.176 228.851 560.719 228.121 561.396 227.643 cv
561.924 227.263 562.47 227.073 563.032 227.073 cv
563.941 227.073 564.761 227.538 565.487 228.467 cv
566.393 229.617 566.845 231.178 566.845 233.15 cv
566.845 234.528 566.647 235.7 566.25 236.665 cv
565.854 237.628 565.345 238.327 564.727 238.763 cv
564.11 239.199 563.515 239.417 562.942 239.417 cv
561.808 239.417 560.865 238.747 560.109 237.408 cv
559.469 236.28 559.151 234.921 559.151 233.332 cv
cp
560.872 233.551 mo
560.872 235.187 561.074 236.522 561.475 237.557 cv
561.812 238.428 562.31 238.864 562.968 238.864 cv
563.283 238.864 563.612 238.723 563.949 238.44 cv
564.289 238.156 564.548 237.681 564.723 237.015 cv
564.993 236.009 565.128 234.592 565.128 232.763 cv
565.128 231.407 564.985 230.276 564.705 229.371 cv
564.495 228.698 564.222 228.22 563.889 227.94 cv
563.649 227.747 563.361 227.651 563.021 227.651 cv
562.624 227.651 562.268 227.83 561.958 228.187 cv
561.539 228.671 561.25 229.434 561.101 230.476 cv
560.947 231.516 560.872 232.541 560.872 233.551 cv
cp
f
568.137 233.332 mo
568.137 231.976 568.343 230.809 568.75 229.831 cv
569.162 228.851 569.705 228.121 570.382 227.643 cv
570.91 227.263 571.453 227.073 572.014 227.073 cv
572.927 227.073 573.747 227.538 574.473 228.467 cv
575.379 229.617 575.831 231.178 575.831 233.15 cv
575.831 234.528 575.633 235.7 575.233 236.665 cv
574.836 237.628 574.331 238.327 573.713 238.763 cv
573.096 239.199 572.5 239.417 571.924 239.417 cv
570.79 239.417 569.847 238.747 569.095 237.408 cv
568.455 236.28 568.137 234.921 568.137 233.332 cv
cp
569.858 233.551 mo
569.858 235.187 570.057 236.522 570.461 237.557 cv
570.794 238.428 571.292 238.864 571.954 238.864 cv
572.268 238.864 572.594 238.723 572.935 238.44 cv
573.275 238.156 573.533 237.681 573.709 237.015 cv
573.975 236.009 574.11 234.592 574.11 232.763 cv
574.11 231.407 573.971 230.276 573.691 229.371 cv
573.481 228.698 573.208 228.22 572.875 227.94 cv
572.635 227.747 572.347 227.651 572.003 227.651 cv
571.606 227.651 571.254 227.83 570.944 228.187 cv
570.521 228.671 570.236 229.434 570.083 230.476 cv
569.933 231.516 569.858 232.541 569.858 233.551 cv
cp
f
624.065 219.757 mo
624.065 223.248 li
gsave
[3.74255 0 -3.92231e-7 -3.73961 257.4 250.572 ]ct
@
grestore newpath
608.204 228.484 mo
611.097 227.073 li
611.389 227.073 li
611.389 237.111 li
611.389 237.777 611.416 238.192 611.472 238.356 cv
611.528 238.519 611.644 238.644 611.816 238.732 cv
611.992 238.82 612.351 238.87 612.89 238.881 cv
612.89 239.206 li
608.414 239.206 li
608.414 238.881 li
608.975 238.87 609.339 238.822 609.499 238.738 cv
609.664 238.652 609.78 238.538 609.844 238.395 cv
609.907 238.252 609.941 237.823 609.941 237.111 cv
609.941 230.695 li
609.941 229.829 609.911 229.273 609.855 229.029 cv
609.814 228.842 609.739 228.704 609.63 228.616 cv
609.522 228.528 609.391 228.484 609.241 228.484 cv
609.024 228.484 608.721 228.575 608.335 228.756 cv
cp
f
615.731 233.332 mo
615.731 231.976 615.937 230.809 616.344 229.831 cv
616.756 228.851 617.299 228.121 617.976 227.643 cv
618.504 227.263 619.05 227.073 619.612 227.073 cv
620.521 227.073 621.341 227.538 622.067 228.467 cv
622.973 229.617 623.425 231.178 623.425 233.15 cv
623.425 234.528 623.227 235.7 622.827 236.665 cv
622.43 237.628 621.925 238.327 621.307 238.763 cv
620.69 239.199 620.095 239.417 619.522 239.417 cv
618.388 239.417 617.441 238.747 616.689 237.408 cv
616.049 236.28 615.731 234.921 615.731 233.332 cv
cp
617.452 233.551 mo
617.452 235.187 617.654 236.522 618.055 237.557 cv
618.392 238.428 618.889 238.864 619.548 238.864 cv
619.863 238.864 620.192 238.723 620.529 238.44 cv
620.869 238.156 621.127 237.681 621.303 237.015 cv
621.573 236.009 621.704 234.592 621.704 232.763 cv
621.704 231.407 621.565 230.276 621.285 229.371 cv
621.075 228.698 620.802 228.22 620.469 227.94 cv
620.229 227.747 619.941 227.651 619.601 227.651 cv
619.204 227.651 618.848 227.83 618.538 228.187 cv
618.119 228.671 617.83 229.434 617.681 230.476 cv
617.527 231.516 617.452 232.541 617.452 233.551 cv
cp
f
624.717 233.332 mo
624.717 231.976 624.919 230.809 625.33 229.831 cv
625.738 228.851 626.285 228.121 626.962 227.643 cv
627.49 227.263 628.032 227.073 628.594 227.073 cv
629.507 227.073 630.327 227.538 631.053 228.467 cv
631.955 229.617 632.404 231.178 632.404 233.15 cv
632.404 234.528 632.217 235.7 631.805 236.665 cv
631.416 237.628 630.907 238.327 630.289 238.763 cv
629.675 239.199 629.08 239.417 628.504 239.417 cv
627.37 239.417 626.427 238.747 625.671 237.408 cv
625.035 236.28 624.717 234.921 624.717 233.332 cv
cp
626.434 233.551 mo
626.434 235.187 626.636 236.522 627.041 237.557 cv
627.374 238.428 627.872 238.864 628.534 238.864 cv
628.848 238.864 629.174 238.723 629.515 238.44 cv
629.855 238.156 630.113 237.681 630.289 237.015 cv
630.555 236.009 630.69 234.592 630.69 232.763 cv
630.69 231.407 630.547 230.276 630.267 229.371 cv
630.057 228.698 629.788 228.22 629.455 227.94 cv
629.215 227.747 628.923 227.651 628.583 227.651 cv
628.186 227.651 627.834 227.83 627.524 228.187 cv
627.101 228.671 626.816 229.434 626.663 230.476 cv
626.513 231.516 626.434 232.541 626.434 233.551 cv
cp
f
633.714 233.332 mo
633.714 231.976 633.901 230.809 634.313 229.831 cv
634.724 228.851 635.286 228.121 635.959 227.643 cv
636.483 227.263 637.007 227.073 637.569 227.073 cv
638.504 227.073 639.328 227.538 640.039 228.467 cv
640.937 229.617 641.386 231.178 641.386 233.15 cv
641.386 234.528 641.199 235.7 640.787 236.665 cv
640.413 237.628 639.889 238.327 639.29 238.763 cv
638.654 239.199 638.055 239.417 637.494 239.417 cv
636.371 239.417 635.398 238.747 634.649 237.408 cv
634.013 236.28 633.714 234.921 633.714 233.332 cv
cp
635.435 233.551 mo
635.435 235.187 635.622 236.522 636.034 237.557 cv
636.371 238.428 636.857 238.864 637.531 238.864 cv
637.831 238.864 638.167 238.723 638.504 238.44 cv
638.841 238.156 639.103 237.681 639.29 237.015 cv
639.552 236.009 639.664 234.592 639.664 232.763 cv
639.664 231.407 639.552 230.276 639.253 229.371 cv
639.028 228.698 638.766 228.22 638.429 227.94 cv
638.205 227.747 637.905 227.651 637.569 227.651 cv
637.157 227.651 636.82 227.83 636.521 228.187 cv
636.072 228.671 635.81 229.434 635.66 230.476 cv
635.51 231.516 635.435 232.541 635.435 233.551 cv
cp
f
303.516 201.643 mo
300.024 201.643 li
gsave
[3.74255 0 -3.92231e-7 -3.73961 257.4 250.572 ]ct
@
grestore newpath
273.322 205.588 mo
272.491 207.876 li
265.472 207.876 li
265.472 207.551 li
267.537 205.67 268.99 204.133 269.832 202.94 cv
270.675 201.747 271.096 200.659 271.096 199.672 cv
271.096 198.916 270.865 198.299 270.402 197.813 cv
269.94 197.327 269.387 197.084 268.743 197.084 cv
268.159 197.084 267.634 197.256 267.168 197.596 cv
266.704 197.94 266.36 198.441 266.138 199.1 cv
265.812 199.1 li
265.96 198.019 266.336 197.192 266.94 196.613 cv
267.545 196.033 268.301 195.741 269.209 195.741 cv
270.173 195.741 270.978 196.052 271.624 196.673 cv
272.271 197.29 272.595 198.023 272.595 198.864 cv
272.595 199.466 272.455 200.068 272.174 200.67 cv
271.741 201.616 271.04 202.619 270.068 203.677 cv
268.612 205.266 267.702 206.224 267.339 206.553 cv
270.445 206.553 li
271.077 206.553 271.521 206.53 271.776 206.482 cv
272.03 206.437 272.259 206.34 272.463 206.197 cv
272.669 206.055 272.848 205.85 272.999 205.588 cv
cp
f
274.718 202.002 mo
274.718 200.644 274.923 199.477 275.332 198.501 cv
275.743 197.522 276.286 196.792 276.964 196.314 cv
277.492 195.932 278.036 195.741 278.598 195.741 cv
279.509 195.741 280.328 196.209 281.054 197.136 cv
281.96 198.288 282.413 199.848 282.413 201.818 cv
282.413 203.198 282.214 204.369 281.815 205.334 cv
281.419 206.298 280.911 206.998 280.294 207.431 cv
279.678 207.869 279.082 208.086 278.508 208.086 cv
277.374 208.086 276.429 207.417 275.675 206.078 cv
275.037 204.952 274.718 203.591 274.718 202.002 cv
cp
276.439 202.222 mo
276.439 203.856 276.64 205.191 277.042 206.227 cv
277.377 207.099 277.875 207.532 278.536 207.532 cv
278.85 207.532 279.177 207.394 279.516 207.11 cv
279.856 206.826 280.115 206.351 280.291 205.685 cv
280.559 204.679 280.692 203.262 280.692 201.433 cv
280.692 200.076 280.552 198.946 280.271 198.041 cv
280.062 197.368 279.79 196.89 279.457 196.609 cv
279.217 196.418 278.927 196.321 278.587 196.321 cv
278.19 196.321 277.836 196.501 277.525 196.856 cv
277.104 197.342 276.818 198.105 276.666 199.145 cv
276.514 200.184 276.439 201.213 276.439 202.222 cv
cp
f
285.3 206.175 mo
285.575 206.175 285.806 206.272 285.993 206.463 cv
286.18 206.65 286.274 206.882 286.274 207.151 cv
286.274 207.417 286.178 207.645 285.987 207.835 cv
285.798 208.026 285.569 208.123 285.3 208.123 cv
285.03 208.123 284.8 208.026 284.609 207.835 cv
284.42 207.645 284.325 207.417 284.325 207.151 cv
284.325 206.874 284.42 206.642 284.609 206.455 cv
284.8 206.268 285.03 206.175 285.3 206.175 cv
cp
f
288.194 202.002 mo
288.194 200.644 288.399 199.477 288.809 198.501 cv
289.219 197.522 289.763 196.792 290.44 196.314 cv
290.968 195.932 291.513 195.741 292.074 195.741 cv
292.986 195.741 293.805 196.209 294.531 197.136 cv
295.436 198.288 295.888 199.848 295.888 201.818 cv
295.888 203.198 295.69 204.369 295.293 205.334 cv
294.897 206.298 294.388 206.998 293.77 207.431 cv
293.154 207.869 292.559 208.086 291.984 208.086 cv
290.85 208.086 289.906 207.417 289.151 206.078 cv
288.513 204.952 288.194 203.591 288.194 202.002 cv
cp
289.915 202.222 mo
289.915 203.856 290.116 205.191 290.519 206.227 cv
290.854 207.099 291.352 207.532 292.012 207.532 cv
292.327 207.532 292.653 207.394 292.992 207.11 cv
293.333 206.826 293.591 206.351 293.767 205.685 cv
294.035 204.679 294.169 203.262 294.169 201.433 cv
294.169 200.076 294.028 198.946 293.747 198.041 cv
293.538 197.368 293.266 196.89 292.933 196.609 cv
292.694 196.418 292.403 196.321 292.063 196.321 cv
291.666 196.321 291.312 196.501 291.002 196.856 cv
290.58 197.342 290.294 198.105 290.142 199.145 cv
289.991 200.184 289.915 201.213 289.915 202.222 cv
cp
f
303.516 159.157 mo
300.024 159.157 li
gsave
[3.74255 0 -3.92231e-7 -3.73961 257.4 250.572 ]ct
@
grestore newpath
273.322 163.102 mo
272.491 165.391 li
265.472 165.391 li
265.472 165.065 li
267.537 163.184 268.99 161.647 269.832 160.458 cv
270.675 159.262 271.096 158.173 271.096 157.186 cv
271.096 156.431 270.865 155.814 270.402 155.327 cv
269.94 154.841 269.387 154.598 268.743 154.598 cv
268.159 154.598 267.634 154.77 267.168 155.111 cv
266.704 155.455 266.36 155.956 266.138 156.618 cv
265.812 156.618 li
265.96 155.537 266.336 154.707 266.94 154.127 cv
267.545 153.547 268.301 153.259 269.209 153.259 cv
270.173 153.259 270.978 153.566 271.624 154.187 cv
272.271 154.804 272.595 155.537 272.595 156.378 cv
272.595 156.98 272.455 157.582 272.174 158.185 cv
271.741 159.131 271.04 160.133 270.068 161.191 cv
268.612 162.78 267.702 163.742 267.339 164.067 cv
270.445 164.067 li
271.077 164.067 271.521 164.044 271.776 163.996 cv
272.03 163.951 272.259 163.858 272.463 163.715 cv
272.669 163.57 272.848 163.368 272.999 163.102 cv
cp
f
282.307 163.102 mo
281.475 165.391 li
274.457 165.391 li
274.457 165.065 li
276.521 163.184 277.974 161.647 278.817 160.458 cv
279.659 159.262 280.08 158.173 280.08 157.186 cv
280.08 156.431 279.849 155.814 279.387 155.327 cv
278.925 154.841 278.371 154.598 277.727 154.598 cv
277.143 154.598 276.618 154.77 276.152 155.111 cv
275.688 155.455 275.345 155.956 275.122 156.618 cv
274.796 156.618 li
274.944 155.537 275.32 154.707 275.925 154.127 cv
276.53 153.547 277.286 153.259 278.194 153.259 cv
279.157 153.259 279.962 153.566 280.608 154.187 cv
281.255 154.804 281.579 155.537 281.579 156.378 cv
281.579 156.98 281.439 157.582 281.158 158.185 cv
280.726 159.131 280.024 160.133 279.053 161.191 cv
277.596 162.78 276.687 163.742 276.323 164.067 cv
279.429 164.067 li
280.062 164.067 280.505 164.044 280.759 163.996 cv
281.014 163.951 281.243 163.858 281.447 163.715 cv
281.653 163.57 281.832 163.368 281.984 163.102 cv
cp
f
285.3 163.693 mo
285.575 163.693 285.806 163.786 285.993 163.977 cv
286.18 164.168 286.274 164.396 286.274 164.665 cv
286.274 164.931 286.178 165.163 285.987 165.353 cv
285.798 165.544 285.569 165.638 285.3 165.638 cv
285.03 165.638 284.8 165.544 284.609 165.353 cv
284.42 165.163 284.325 164.931 284.325 164.665 cv
284.325 164.389 284.42 164.16 284.609 163.973 cv
284.8 163.786 285.03 163.693 285.3 163.693 cv
cp
f
295.346 153.503 mo
294.66 154.995 li
291.08 154.995 li
290.3 156.588 li
291.849 156.816 293.078 157.392 293.986 158.315 cv
294.763 159.112 295.151 160.047 295.151 161.12 cv
295.151 161.745 295.024 162.324 294.769 162.859 cv
294.517 163.39 294.197 163.843 293.809 164.217 cv
293.424 164.59 292.994 164.89 292.52 165.118 cv
291.849 165.439 291.158 165.6 290.449 165.6 cv
289.735 165.6 289.216 165.48 288.89 165.241 cv
288.566 164.998 288.404 164.729 288.404 164.433 cv
288.404 164.273 288.472 164.127 288.607 164.003 cv
288.742 163.876 288.911 163.813 289.115 163.813 cv
289.269 163.813 289.402 163.835 289.516 163.884 cv
289.63 163.929 289.824 164.048 290.098 164.243 cv
290.537 164.546 290.982 164.699 291.431 164.699 cv
292.116 164.699 292.717 164.441 293.234 163.925 cv
293.752 163.405 294.011 162.777 294.011 162.033 cv
294.011 161.315 293.78 160.645 293.318 160.021 cv
292.855 159.4 292.218 158.917 291.406 158.581 cv
290.767 158.315 289.899 158.162 288.8 158.121 cv
291.08 153.503 li
cp
f
303.516 116.671 mo
300.024 116.671 li
gsave
[3.74255 0 -3.92231e-7 -3.73961 257.4 250.572 ]ct
@
grestore newpath
273.322 120.616 mo
272.491 122.905 li
265.472 122.905 li
265.472 122.58 li
267.537 120.699 268.99 119.162 269.832 117.972 cv
270.675 116.78 271.096 115.688 271.096 114.7 cv
271.096 113.949 270.865 113.328 270.402 112.842 cv
269.94 112.356 269.387 112.112 268.743 112.112 cv
268.159 112.112 267.634 112.285 267.168 112.629 cv
266.704 112.969 266.36 113.47 266.138 114.132 cv
265.812 114.132 li
265.96 113.051 266.336 112.221 266.94 111.641 cv
267.545 111.062 268.301 110.774 269.209 110.774 cv
270.173 110.774 270.978 111.084 271.624 111.701 cv
272.271 112.322 272.595 113.051 272.595 113.893 cv
272.595 114.495 272.455 115.097 272.174 115.699 cv
271.741 116.645 271.04 117.647 270.068 118.705 cv
268.612 120.295 267.702 121.256 267.339 121.581 cv
270.445 121.581 li
271.077 121.581 271.521 121.559 271.776 121.51 cv
272.03 121.465 272.259 121.372 272.463 121.23 cv
272.669 121.084 272.848 120.882 272.999 120.616 cv
cp
f
281.868 111.017 mo
281.184 112.509 li
277.604 112.509 li
276.823 114.102 li
278.373 114.33 279.602 114.906 280.51 115.83 cv
281.286 116.626 281.675 117.561 281.675 118.638 cv
281.675 119.263 281.548 119.839 281.293 120.373 cv
281.04 120.904 280.72 121.357 280.333 121.731 cv
279.947 122.105 279.518 122.408 279.044 122.636 cv
278.372 122.957 277.682 123.118 276.972 123.118 cv
276.259 123.118 275.74 122.995 275.414 122.755 cv
275.09 122.512 274.928 122.243 274.928 121.951 cv
274.928 121.787 274.996 121.641 275.13 121.518 cv
275.265 121.39 275.435 121.327 275.639 121.327 cv
275.792 121.327 275.926 121.349 276.04 121.398 cv
276.154 121.443 276.348 121.562 276.621 121.757 cv
277.061 122.064 277.506 122.213 277.955 122.213 cv
278.64 122.213 279.241 121.955 279.757 121.439 cv
280.276 120.919 280.535 120.291 280.535 119.547 cv
280.535 118.829 280.304 118.159 279.841 117.535 cv
279.379 116.914 278.742 116.432 277.929 116.095 cv
277.291 115.83 276.423 115.68 275.324 115.639 cv
277.604 111.017 li
cp
f
285.3 121.207 mo
285.575 121.207 285.806 121.301 285.993 121.491 cv
286.18 121.682 286.274 121.91 286.274 122.18 cv
286.274 122.449 286.178 122.677 285.987 122.868 cv
285.798 123.058 285.569 123.152 285.3 123.152 cv
285.03 123.152 284.8 123.058 284.609 122.868 cv
284.42 122.677 284.325 122.449 284.325 122.18 cv
284.325 121.907 284.42 121.675 284.609 121.488 cv
284.8 121.301 285.03 121.207 285.3 121.207 cv
cp
f
288.194 117.03 mo
288.194 115.676 288.399 114.51 288.809 113.53 cv
289.219 112.55 289.763 111.821 290.44 111.342 cv
290.968 110.964 291.513 110.774 292.074 110.774 cv
292.986 110.774 293.805 111.237 294.531 112.169 cv
295.436 113.317 295.888 114.88 295.888 116.851 cv
295.888 118.227 295.69 119.401 295.293 120.366 cv
294.897 121.327 294.388 122.026 293.77 122.464 cv
293.154 122.898 292.559 123.118 291.984 123.118 cv
290.85 123.118 289.906 122.449 289.151 121.106 cv
288.513 119.981 288.194 118.623 288.194 117.03 cv
cp
289.915 117.251 mo
289.915 118.889 290.116 120.224 290.519 121.256 cv
290.854 122.127 291.352 122.565 292.012 122.565 cv
292.327 122.565 292.653 122.423 292.992 122.142 cv
293.333 121.858 293.591 121.379 293.767 120.714 cv
294.035 119.708 294.169 118.29 294.169 116.462 cv
294.169 115.108 294.028 113.975 293.747 113.07 cv
293.538 112.397 293.266 111.922 292.933 111.641 cv
292.694 111.447 292.403 111.35 292.063 111.35 cv
291.666 111.35 291.312 111.529 291.002 111.888 cv
290.58 112.37 290.294 113.133 290.142 114.177 cv
289.991 115.216 289.915 116.241 289.915 117.251 cv
cp
f
303.516 74.189 mo
300.024 74.189 li
gsave
[3.74255 0 -3.92231e-7 -3.73961 257.4 250.572 ]ct
@
grestore newpath
273.322 78.1306 mo
272.491 80.423 li
265.472 80.423 li
265.472 80.0939 li
267.537 78.2129 268.99 76.6796 269.832 75.4867 cv
270.675 74.2938 271.096 73.2018 271.096 72.2145 cv
271.096 71.4629 270.865 70.8421 270.402 70.3597 cv
269.94 69.8735 269.387 69.6305 268.743 69.6305 cv
268.159 69.6305 267.634 69.7987 267.168 70.1428 cv
266.704 70.4831 266.36 70.9842 266.138 71.6461 cv
265.812 71.6461 li
265.96 70.5654 266.336 69.7352 266.94 69.1593 cv
267.545 68.5796 268.301 68.2879 269.209 68.2879 cv
270.173 68.2879 270.978 68.5983 271.624 69.2154 cv
272.271 69.8361 272.595 70.5654 272.595 71.4068 cv
272.595 72.0089 272.455 72.6109 272.174 73.213 cv
271.741 74.1591 271.04 75.1613 270.068 76.2197 cv
268.612 77.8127 267.702 78.7701 267.339 79.0954 cv
270.445 79.0954 li
271.077 79.0954 271.521 79.073 271.775 79.0281 cv
272.03 78.9795 272.259 78.886 272.463 78.7439 cv
272.669 78.5981 272.848 78.3961 272.999 78.1306 cv
cp
f
275.877 68.531 mo
282.256 68.531 li
282.256 68.8676 li
278.289 80.6698 li
277.306 80.6698 li
280.861 69.9633 li
277.587 69.9633 li
276.926 69.9633 276.456 70.0418 276.175 70.1989 cv
275.684 70.4681 275.289 70.8832 274.99 71.4442 cv
274.737 71.3469 li
cp
f
285.3 78.7215 mo
285.575 78.7215 285.806 78.8149 285.993 79.0057 cv
286.18 79.1964 286.274 79.4245 286.274 79.6938 cv
286.274 79.963 286.178 80.1911 285.987 80.3819 cv
285.798 80.5726 285.569 80.6698 285.3 80.6698 cv
285.03 80.6698 284.8 80.5726 284.609 80.3819 cv
284.42 80.1911 284.325 79.963 284.325 79.6938 cv
284.325 79.4208 284.42 79.1889 284.609 79.0019 cv
284.8 78.8149 285.03 78.7215 285.3 78.7215 cv
cp
f
295.346 68.531 mo
294.66 70.0231 li
291.08 70.0231 li
290.3 71.6162 li
291.849 71.8443 293.078 72.424 293.986 73.3476 cv
294.763 74.1404 295.151 75.0753 295.151 76.1523 cv
295.151 76.7769 295.024 77.3565 294.769 77.8875 cv
294.517 78.4185 294.197 78.871 293.809 79.245 cv
293.424 79.619 292.994 79.9219 292.52 80.15 cv
291.849 80.4716 291.158 80.6324 290.449 80.6324 cv
289.735 80.6324 289.216 80.5127 288.89 80.2697 cv
288.566 80.0266 288.404 79.7573 288.404 79.4656 cv
288.404 79.3011 288.472 79.159 288.607 79.0319 cv
288.742 78.9047 288.911 78.8411 289.115 78.8411 cv
289.269 78.8411 289.402 78.8636 289.516 78.9122 cv
289.63 78.9571 289.824 79.0805 290.098 79.2749 cv
290.537 79.5778 290.982 79.7274 291.431 79.7274 cv
292.116 79.7274 292.717 79.4694 293.234 78.9533 cv
293.752 78.4373 294.011 77.8053 294.011 77.0648 cv
294.011 76.3468 293.78 75.6737 293.318 75.0529 cv
292.855 74.4284 292.218 73.9497 291.406 73.6094 cv
290.767 73.3476 289.899 73.1943 288.8 73.1532 cv
291.08 68.531 li
cp
f
303.516 31.7033 mo
300.024 31.7033 li
gsave
[3.74255 0 -3.92231e-7 -3.73961 257.4 250.572 ]ct
@
grestore newpath
265.997 28.3115 mo
266.336 27.5112 266.764 26.8941 267.28 26.4566 cv
267.799 26.0191 268.445 25.8022 269.217 25.8022 cv
270.17 25.8022 270.901 26.1126 271.41 26.7296 cv
271.796 27.1933 271.989 27.687 271.989 28.2142 cv
271.989 29.0781 271.445 29.9718 270.357 30.8993 cv
271.089 31.1835 271.642 31.5911 272.017 32.1221 cv
272.391 32.6532 272.578 33.2814 272.578 33.9994 cv
272.578 35.0278 272.251 35.9216 271.595 36.6732 cv
270.742 37.6568 269.505 38.1467 267.884 38.1467 cv
267.083 38.1467 266.537 38.0457 266.247 37.8475 cv
265.957 37.6493 265.812 37.4361 265.812 37.208 cv
265.812 37.0397 265.88 36.8901 266.017 36.7593 cv
266.155 36.6321 266.321 36.5685 266.514 36.5685 cv
266.662 36.5685 266.811 36.591 266.963 36.6358 cv
267.063 36.6658 267.287 36.7742 267.637 36.9612 cv
267.989 37.1444 268.232 37.2529 268.367 37.2865 cv
268.582 37.3501 268.813 37.3838 269.06 37.3838 cv
269.656 37.3838 270.174 37.1519 270.616 36.6919 cv
271.058 36.2282 271.278 35.6822 271.278 35.054 cv
271.278 34.5903 271.176 34.1415 270.972 33.704 cv
270.821 33.3749 270.654 33.1281 270.473 32.9561 cv
270.22 32.7242 269.875 32.511 269.437 32.3241 cv
268.999 32.1334 268.551 32.0361 268.095 32.0361 cv
267.814 32.0361 li
267.814 31.7744 li
268.276 31.7145 268.74 31.55 269.204 31.2732 cv
269.67 31.0002 270.008 30.6674 270.217 30.2822 cv
270.429 29.8971 270.534 29.4745 270.534 29.0108 cv
270.534 28.4087 270.345 27.9225 269.967 27.5523 cv
269.591 27.1821 269.122 26.9951 268.561 26.9951 cv
267.653 26.9951 266.895 27.4813 266.287 28.4498 cv
cp
f
274.717 32.0623 mo
274.717 30.7048 274.923 29.5381 275.332 28.562 cv
275.743 27.5822 276.286 26.853 276.964 26.3706 cv
277.491 25.9929 278.036 25.8022 278.598 25.8022 cv
279.509 25.8022 280.328 26.2659 281.054 27.1971 cv
281.96 28.3489 282.413 29.9083 282.413 31.8791 cv
282.413 33.259 282.214 34.4295 281.815 35.3943 cv
281.419 36.3591 280.911 37.0584 280.294 37.4922 cv
279.678 37.9297 279.082 38.1467 278.508 38.1467 cv
277.374 38.1467 276.429 37.4772 275.675 36.1385 cv
275.037 35.0091 274.717 33.6516 274.717 32.0623 cv
cp
276.439 32.2792 mo
276.439 33.9171 276.64 35.2522 277.042 36.2881 cv
277.377 37.1594 277.875 37.5932 278.536 37.5932 cv
278.85 37.5932 279.177 37.4511 279.516 37.1706 cv
279.856 36.8864 280.115 36.4115 280.291 35.7458 cv
280.559 34.7399 280.692 33.3225 280.692 31.4939 cv
280.692 30.1364 280.552 29.007 280.271 28.102 cv
280.061 27.4289 279.79 26.9502 279.457 26.6698 cv
279.217 26.4753 278.927 26.3818 278.587 26.3818 cv
278.19 26.3818 277.836 26.5576 277.525 26.9166 cv
277.104 27.4027 276.818 28.1656 276.666 29.2052 cv
276.514 30.2448 276.439 31.2695 276.439 32.2792 cv
cp
f
285.3 36.2357 mo
285.575 36.2357 285.806 36.3329 285.993 36.5237 cv
286.18 36.7106 286.274 36.9388 286.274 37.208 cv
286.274 37.4772 286.178 37.7054 285.987 37.8961 cv
285.798 38.0868 285.569 38.1841 285.3 38.1841 cv
285.03 38.1841 284.8 38.0868 284.609 37.8961 cv
284.42 37.7054 284.325 37.4772 284.325 37.208 cv
284.325 36.935 284.42 36.7032 284.609 36.5162 cv
284.8 36.3292 285.03 36.2357 285.3 36.2357 cv
cp
f
288.194 32.0623 mo
288.194 30.7048 288.399 29.5381 288.809 28.562 cv
289.219 27.5822 289.763 26.853 290.44 26.3706 cv
290.968 25.9929 291.513 25.8022 292.074 25.8022 cv
292.986 25.8022 293.805 26.2659 294.531 27.1971 cv
295.436 28.3489 295.888 29.9083 295.888 31.8791 cv
295.888 33.259 295.69 34.4295 295.293 35.3943 cv
294.897 36.3591 294.388 37.0584 293.77 37.4922 cv
293.154 37.9297 292.559 38.1467 291.984 38.1467 cv
290.85 38.1467 289.906 37.4772 289.151 36.1385 cv
288.513 35.0091 288.194 33.6516 288.194 32.0623 cv
cp
289.915 32.2792 mo
289.915 33.9171 290.116 35.2522 290.519 36.2881 cv
290.854 37.1594 291.352 37.5932 292.012 37.5932 cv
292.327 37.5932 292.653 37.4511 292.992 37.1706 cv
293.333 36.8864 293.591 36.4115 293.767 35.7458 cv
294.035 34.7399 294.169 33.3225 294.169 31.4939 cv
294.169 30.1364 294.028 29.007 293.747 28.102 cv
293.538 27.4289 293.266 26.9502 292.933 26.6698 cv
292.694 26.4753 292.403 26.3818 292.063 26.3818 cv
291.666 26.3818 291.312 26.5576 291.002 26.9166 cv
290.58 27.4027 290.294 28.1656 290.142 29.2052 cv
289.991 30.2448 289.915 31.2695 289.915 32.2792 cv
cp
f
318.71 209.9 mo
320.237 155.993 li
321.764 135.466 li
323.288 111.129 li
324.815 102.068 li
326.342 95.9311 li
327.868 90.8116 li
329.395 84.5627 li
330.922 80.6922 li
332.449 79.6451 li
333.976 72.1248 li
335.503 67.641 li
337.03 72.5249 li
338.557 61.8558 li
340.084 67.0127 li
341.611 58.1984 li
343.138 55.6854 li
344.665 70.5018 li
346.192 56.654 li
347.719 51.6915 li
349.246 52.0729 li
350.773 79.7274 li
352.3 56.7774 li
353.827 53.1013 li
355.35 66.6387 li
356.877 82.4573 li
358.404 58.0264 li
359.931 83.7924 li
361.458 43.6326 li
362.985 81.3205 li
364.512 47.4994 li
366.039 46.8786 li
367.566 44.8555 li
369.093 46.026 li
370.62 46.0297 li
372.147 41.0822 li
373.674 66.6387 li
375.201 42.0134 li
376.728 45.5885 li
378.254 59.1446 li
379.781 68.2281 li
381.308 49.8516 li
382.835 40.5848 li
384.362 50.9698 li
385.889 47.3947 li
387.416 63.5536 li
388.939 50.2817 li
390.466 45.8166 li
391.993 40.4203 li
393.52 47.7649 li
395.047 38.2327 li
396.574 32.9411 li
398.101 42.7426 li
399.628 35.2409 li
401.155 34.0405 li
402.682 43.5616 li
404.209 36.8041 li
405.736 47.4695 li
407.263 35.9402 li
408.79 48.8943 li
410.317 32.3203 li
411.844 46.8001 li
413.371 68.8115 li
414.898 31.1348 li
416.425 38.7263 li
417.952 32.5447 li
419.479 33.9358 li
421.002 33.3824 li
422.529 67.0314 li
424.056 41.6058 li
425.583 30.2448 li
427.11 30.529 li
428.637 63.7218 li
430.164 33.4572 li
431.691 40.2184 li
433.218 29.1154 li
434.745 34.1864 li
436.272 29.1267 li
437.798 56.5193 li
439.325 36.1684 li
440.852 26.5837 li
442.379 29.4857 li
443.906 50.4126 li
445.433 37.0135 li
446.96 32.7803 li
448.487 49.8554 li
450.014 44.2272 li
451.541 33.0607 li
453.068 32.5746 li
454.591 26.0004 li
456.118 25.9069 li
457.645 26.408 li
459.172 24.067 li
460.699 26.1088 li
462.226 29.5006 li
463.753 31.2171 li
465.28 36.4002 li
466.807 31.9202 li
468.334 26.868 li
471.388 32.956 li
472.915 27.7169 li
474.442 24.6391 li
475.969 24.7476 li
477.496 22.3019 li
479.023 23.1508 li
480.55 22.9264 li
482.077 32.0772 li
483.604 32.0473 li
485.131 22.4888 li
486.654 23.88 li
488.181 23.5621 li
489.708 26.1799 li
491.235 29.7437 li
492.762 22.9563 li
494.289 23.0274 li
495.816 22.343 li
497.342 31.7033 li
498.869 20.5891 li
500.396 25.8134 li
501.923 42.8174 li
503.45 22.1373 li
504.977 22.3655 li
506.504 23.3041 li
508.031 24.6504 li
509.558 21.8569 li
511.085 26.7258 li
512.612 20.634 li
514.139 26.8343 li
515.666 22.8105 li
517.193 20.2264 li
518.72 20.1591 li
520.243 22.7581 li
521.77 21.1538 li
523.297 20.5704 li
524.824 21.5278 li
526.351 21.5091 li
527.878 22.2869 li
529.405 19.6729 li
532.459 20.7649 li
533.986 19.6094 li
535.513 19.8898 li
537.04 24.6691 li
538.567 20.3535 li
540.094 20.4021 li
541.621 20.735 li
543.148 19.9123 li
544.674 21.468 li
546.201 22.5263 li
547.728 19.5981 li
549.255 19.8375 li
550.782 19.1942 li
552.306 18.925 li
553.833 21.9242 li
555.36 19.4747 li
556.887 19.3887 li
558.413 19.456 li
559.94 18.9512 li
561.467 19.5944 li
562.994 18.824 li
564.521 19.2952 li
566.048 19.3775 li
567.575 18.6819 li
569.102 18.8876 li
570.629 19.2578 li
573.683 18.5735 li
575.21 18.5361 li
576.737 18.6969 li
578.264 18.4875 li
579.791 18.6034 li
581.318 18.5884 li
582.845 18.7605 li
584.372 18.2893 li
585.895 18.4015 li
587.422 19.6019 li
588.949 18.4164 li
590.476 18.2893 li
622.538 18.1546 li
/1 
[/DeviceCMYK] /CSA add_res
.90573 .514275 .0514229 .00137331 cmyk
.40009 lw
2 lc
gsave
[3.74255 0 -3.92231e-7 -3.73961 257.4 250.572 ]ct
@
grestore newpath
318.71 70.1689 mo
320.237 45.3379 li
321.764 41.8788 li
323.288 39.9977 li
324.815 40.3081 li
326.342 38.0008 li
327.868 34.9904 li
329.395 33.5095 li
330.922 31.3966 li
332.449 30.9516 li
333.976 28.9584 li
337.03 26.5202 li
338.557 25.8246 li
340.084 28.6555 li
341.611 32.0697 li
343.138 25.503 li
344.665 23.7603 li
346.192 25.589 li
347.719 22.1934 li
350.773 20.9556 li
352.3 24.5756 li
353.827 22.6048 li
355.35 20.0992 li
356.877 26.7707 li
358.404 20.4657 li
359.931 21.3408 li
361.458 28.375 li
362.985 26.6324 li
364.512 19.4037 li
366.039 21.2436 li
367.566 21.6475 li
369.093 20.7761 li
370.62 19.4523 li
372.147 18.5884 li
373.674 19.2092 li
375.201 22.1261 li
376.728 23.4499 li
378.254 29.8409 li
379.781 21.1463 li
381.308 24.34 li
382.835 18.753 li
384.362 18.7567 li
385.889 22.5225 li
387.416 39.9566 li
388.939 20.7312 li
390.466 21.9765 li
391.993 29.1828 li
393.52 22.186 li
395.047 27.3092 li
396.574 27.5972 li
398.101 21.1575 li
399.628 24.9533 li
401.155 34.7735 li
402.682 22.6684 li
404.209 20.0843 li
405.736 25.058 li
407.263 19.6131 li
408.79 19.6954 li
410.317 39.9828 li
411.844 18.9886 li
413.371 32.4437 li
414.898 22.9264 li
416.425 43.2811 li
417.952 32.9187 li
419.479 26.4566 li
421.002 21.3707 li
422.529 19.6243 li
424.056 17.6573 li
425.583 21.0491 li
427.11 43.2026 li
428.637 17.7022 li
430.164 20.0207 li
431.691 19.4261 li
433.218 18.4538 li
434.745 21.9541 li
436.272 32.167 li
437.798 20.1965 li
439.325 22.7132 li
440.852 17.7395 li
442.379 16.4232 li
443.906 25.8583 li
445.433 21.4605 li
446.96 18.5398 li
448.487 20.1254 li
450.014 18.1696 li
451.541 28.9995 li
453.068 31.2358 li
454.591 28.4573 li
456.118 42.4547 li
457.645 17.3319 li
459.172 20.9108 li
460.699 23.7117 li
462.226 17.3282 li
463.753 21.625 li
465.28 20.4321 li
466.807 19.8936 li
468.334 17.3992 li
469.861 21.5689 li
471.388 16.1614 li
472.915 18.8615 li
474.442 16.3709 li
475.969 29.6427 li
477.496 21.7522 li
479.023 21.3258 li
480.55 18.8615 li
482.077 18.409 li
483.604 16.4681 li
485.131 30.9965 li
486.654 15.5145 li
488.181 16.756 li
489.708 15.7351 li
491.235 17.4217 li
492.762 20.6265 li
494.289 17.3506 li
495.816 16.8346 li
497.342 16.6214 li
498.869 21.2697 li
500.396 19.4635 li
501.923 17.9452 li
503.45 15.1891 li
504.977 16.2063 li
506.504 17.5114 li
508.031 15.2564 li
509.558 17.2459 li
511.085 20.8546 li
512.612 17.6161 li
514.139 18.4538 li
515.666 16.1839 li
517.193 18.0724 li
518.72 18.9362 li
520.243 15.9969 li
521.77 19.6243 li
523.297 18.4688 li
524.824 19.4598 li
526.351 14.7067 li
527.878 14.7254 li
529.405 14.4973 li
530.932 16.0791 li
532.459 14.5272 li
533.986 14.4001 li
535.513 14.8376 li
537.04 15.0209 li
538.567 14.5945 li
540.094 17.5226 li
541.621 13.9326 li
544.674 14.5272 li
546.201 13.8952 li
547.728 16.1166 li
549.255 14.0673 li
550.782 13.9214 li
552.306 13.9251 li
553.833 14.1869 li
555.36 13.8541 li
556.887 13.8279 li
558.413 14.228 li
559.94 14.0186 li
561.467 13.368 li
562.994 13.6185 li
564.521 13.5512 li
566.048 14.3215 li
567.575 13.3044 li
569.102 13.5213 li
572.156 13.4689 li
573.683 13.6447 li
575.21 13.095 li
576.737 13.0052 li
579.791 13.151 li
581.318 13.5175 li
582.845 13.1735 li
584.372 13.3455 li
587.422 13.0426 li
588.949 13.1623 li
592.003 13.0239 li
593.53 12.994 li
595.057 13.1099 li
596.584 12.8631 li
598.111 12.9716 li
599.638 12.8594 li
605.746 12.8855 li
608.799 12.7397 li
610.326 12.8332 li
617.957 12.7285 li
622.538 12.7285 li
0 .642634 1 0 cmyk
gsave
[3.74255 0 -3.92231e-7 -3.73961 257.4 250.572 ]ct
@
grestore newpath
303.516 219.757 mo
303.516 2.86713 li
1 /0 /CSD get_res sepcs
1 sep
.21338 lw
0 lj
4 ml
gsave
[3.74255 0 -3.92231e-7 -3.73961 257.4 250.572 ]ct
@
grestore newpath
637.718 219.757 mo
637.718 2.86713 li
gsave
[3.74255 0 -3.92231e-7 -3.73961 257.4 250.572 ]ct
@
grestore newpath
303.516 219.757 mo
637.718 219.757 li
gsave
[3.74255 0 -3.92231e-7 -3.73961 257.4 250.572 ]ct
@
grestore newpath
303.516 2.86713 mo
637.718 2.86713 li
gsave
[3.74255 0 -3.92231e-7 -3.73961 257.4 250.572 ]ct
@
grestore newpath
629.833 212.084 mo
465.909 212.084 li
465.909 152.998 li
629.833 152.998 li
629.833 212.084 li
gsave
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 246.614 259.37 ]ct
[165.421 0 -6.35414e-6 60.5817 218.546 46.5386 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 221 
/H 81 
/M[221 0 0 -81 0 81 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 221 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 221 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 221 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 221 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLN*!!<--Jd\pn!!i/s!!:s_JdKs6!!`)r!!9e>JdM,W!!\G`
N;s"h,UrO1Jf_HD"!]95"o83#$6()>(4m=U('>L!'*S.3!Xftj[hjW4q\K>R+qt0=!0[Ba'-.5I!.k3`
!!3]U"8i-#%M],p!.k4,!!E]K!WW6"!!3ZH"Gd&V!!3QI!o<p/!5\^;"XF/f!.k48!!*]Kr;Zm%)Zlc7
MZ<be&cD\2"<7Jp!3?/$%MIFpJcNgk!>63_!.k4=!!*0Lr;Zj.&tK#a!!*0Cr;Zj.')MZ\!3lM)!Zohk
JcO!p!>cBZ!.k4A!!XkR!WW34%[[6\!!XMH!WW34%e]mS!4;e.+9DVl!.k3u!!*uJZiG[XpAbCD"U+l+
'FL$(R/dF1"9\])'FO@1JcN@^!ZV=GbQ*4pfDl!R!#c?%!2]`#,m=GP!#,e$!.k3k!!XAF"98E9$Gujq
!9aCa*!?D9!/1CS)@cb!!36)(,m=GP!#,dt!.k3p!!XAF"98E9$GHLl!:9af*!?D4!/^aW)@lWEJcN"T
"sjEV!!!]?g&Q^)d/X@i"9\])'FMANJcP?A!ZV=GPQ6aE!?)IA!.k3Y!!X_Q"TSN:$Io-.!7h,S)[$9D
!#,dI!.k4F!!4,C"HNPI!!*uJnGn.@\c;p\"U+l+'FN1eJcOO*!ZM7F!rr<8$AJPX!!4,C"Q093!5\^:
)@jXbJcP!7"sjEV!!!]?U&^&N#9*dK!!!]?!.k3O!!4,C"PWp.!65'?)@jI]JcP0<"sjEV!!!]?SH+]N
"rd[J!!!]?qZ)3JYQ+_E"9d9UJcO!p!?)HY!.k4A!!X_Q"TSN:$CCgX!!XAF"98E9$MFIO!4;e.*!?Dl
!.k3u!!*uJZiG[XpAbCD"U+l+'FL$(R/dF1"9\])'FO@1JcN@^!ZV=GbQ*4pfDl!R!#c?%!2]`#,m=GP
!#,e$!.k3k!!XAF"98E9$Gujq!9aCa*!?D9!/1CS)@cb!!36)(,m=GP!#,dt!.k3p!!XAF"98E9$GHLl
!:9af*!?D4!/^aW)@lWEJcN"T"sjEV!!!]?g&Q^)d/X@i"9\])'FMANJcP?A!ZV=GPQ6aE!?)IA!.k3Y
!!X_Q"TSN:$Io-.!7h,S)[$9D!#,dI!.k4F!!4,C"HNPI!!*uJnGn.@\c;p\"U+l+'FN1eJcOO*!ZM7F
!rr<8$AJPX!!4,C"Q093!5\^:)@jXbJcP!7"sjEV!!!]?U&^&N#9*dK!!!]?!.k3O!!4,C"PWp.!65'?
)@jI]JcP0<"sjEV!!!]?SH+]N"rd[J!!!]?qZ)3JYQ+_E"9d9UJcO!p!?)HY!.k4A!!X_Q"TSN:$CCgX
!!XAF"98E9$MFIO!4;e.*!?Dl!.k3u!!*uJZiG[XpAbCD"U+l+'FL$(R/dF1"9\])'FO@1JcN@^!ZV=G
bQ*4pfDl!R!#c?%!2]`#,m=GP!#,e$!.k3k!!XAF"98E9$Gujq!9aCa*!?D9!/1CS)@cb!!36)(,m=GP
!#,dt!.k3p!!XAF"98E9$GHLl!:9af*!?D4!/^aW)@lWEJcN"T"sjEV!!!]?g&Q^)d/X@i"9\])'FMAN
JcP?A!ZV=GPQ6aE!?)IA!.k3Y!!X_Q"TSN:$Io-.!7h,S)[$9D!#,dI!.k4F!!4,C"HNPI!!*uJnGn.@
\c;p\"U+l+'FN1eJcOO*!ZM7F!rr<8$AJPX!!4,C"Q093!5\^:)@jXbJcP!7"sjEV!!!]?U&^&N#9*dK
!!!]?!.k3O!!4,C"PWp.!65'?)@jI]JcP0<"sjEV!!!]?SH+]N"rd[J!!!]?qZ)3JYQ+_E"9d9UJcO!p
!?)HY!.k4A!!X_Q"TSN:$CCgX!!XAF"98E9$MFIO!4;e.*!?Dl!.k3u!!*uJZiG[XpAbCD"U+l+'FL$(
R/dF1"9\])'FO@1JcN@^!ZV=GbQ*4pfDl!R!#c?%!2]`#,m=GP!#,e$!.k3k!!XAF"98E9$Gujq!9aCa
*!?D9!/1CS)@cb!!36)(,m=GP!#,dt!.k3p!!XAF"98E9$GHLl!:9af*!?D4!/^aW)@lWEJcN"T"sjEV
!!!]?g&Q^)d/X@i"9\])'FMANJcP?A!ZV=GPQ6aE!?)IA!.k3Y!!X_Q"TSN:$Io-.!7h,S)[$9D!#,dI
!.k4F!!4,C"HNPI!!*uJnGn.@\c;p\"U+l+'FN1eJcOO*!ZM7F!rr<8$AJPX!!4,C"Q093!5\^:)@jXb
JcP!7"sjEV!!!]?U&^&N#9*dK!!!]?!.k3O!!4,C"PWp.!65'?)@jI]JcP0<"sjEV!!!]?SH+]N"rd[J
!!!]?qZ)3JYQ+_E"9d9UJcO!p!?)HY!.k4A!!X_Q"TSN:$CCgX!!XAF"98E9$MFIO!4;e.*!?Dl!.k3u
!!*uJZiG[XpAbCD"U+l+'FL$(R/dF1"9\])'FO@1JcN@^!ZV=GbQ*4pfDl!R!#c?%!2]`#,m=GP!#,e$
!.k3k!!XAF"98E9$Gujq!9aCa*!?D9!/1CS)@cb!!36)(,m=GP!#,dt!.k3p!!XAF"98E9$GHLl!:9af
*!?D4!/^aW)@lWEJcN"T"sjEV!!!]?g&Q^)d/X@i"9\])'FMANJcP?A!ZV=GPQ6aE!?)IA!.k3Y!!X_Q
"TSN:$Io-.!7h,S)[$9D!#,dI!.k4F!!4,C"HNPI!!*uJnGn.@\c;p\"U+l+'FN1eJcOO*!ZM7F!rr<8
$AJPX!!4,C"Q093!5\^:)@jXbJcP!7"sjEV!!!]?U&^&N#9*dK!!!]?!.k3O!!4,C"PWp.!65'?)@jI]
JcP0<"sjEV!!!]?SH+]N"rd[J!!!]?qZ)3JYQ+_E"9d9UJcO!p!?)HY!.k4A!!X_Q"TSN:$CCgX!!XAF
"98E9$MFIO!4;e.*!?Dl!.k3u!!*uJZiG[XpAbCD"U+l+'FL$(R/dF1"9\])'FO@1JcN@^!ZV=GbQ*4p
fDl!R!#c?%!2]`#,m=GP!#,e$!.k3k!!XAF"98E9$Gujq!9aCa*!?D9!/1CS)@cb!!36)(,m=GP!#,dt
!.k3p!!XAF"98E9$GHLl!:9af*!?D4!/^aW)@lWEJcN"T"sjEV!!!]?g&Q^)d/X@i"9\])'FMANJcP?A
!ZV=GPQ6aE!?)IA!.k3Y!!X_Q"TSN:$Io-.!7h,S)[$9D!#,dI!.k4F!!4,C"HNPI!!*uJnGn.@\c;p\
"U+l+'FN1eJcOO*!ZM7F!rr<8$AJPX!!4,C"Q093!5\^:)@jXbJcP!7"sjEV!!!]?U&^&N#9*dK!!!]?
!.k3O!!4,C"PWp.!65'?)@jI]JcP0<"sjEV!!!]?SH+]N"rd[J!!!]?qZ)3JYQ+_E"9d9UJcO!p!?)HY
!.k4A!!X_Q"TSN:$CCgX!!XAF"98E9$MFIO!4;e.*!?Dl!.k3u!!*uJZiG[XpAbCD"U+l+'FL$(R/dF1
"9\])'FO@1JcN@^!ZV=GbQ*4pfDl!R!#c?%!2]`#,m=GP!#,e$!.k3k!!XAF"98E9$Gujq!9aCa*!?D9
!/1CS)@cb!!36)(,m=GP!#,dt!.k3p!!XAF"98E9$GHLl!:9af*!?D4!/^aW)@lWEJcN"T"sjEV!!!]?
g&Q^)d/X@i"9\])'FMANJcP?A!ZV=GPQ6aE!?)IA!.k3Y!!X_Q"TSN:$Io-.!7h,S)[$9D!#,dI!.k4F
!!4,C"HNPI!!*uJnGn.@\c;p\"U+l+'FN1eJcOO*!ZM7F!rr<8$AJPX!!4,C"Q093!5\^:)@jXbJcP!7
"sjEV!!!]?U&^&N#9*dK!!!]?!.k3O!!4,C"PWp.!65'?)@jI]JcP0<"sjEV!!!]?SH+]N"rd[J!!!]?
qZ)3JYQ+_E"9d9UJcO!p!?)HY!.k4A!!X_Q"TSN:$CCgX!!XAF"98E9$MFIO!4;e.*!?Dl!.k3u!!*uJ
ZiG[XpAbCD"U+l+'FL$(R/dF1"9\])'FO@1JcN@^!ZV=GbQ*4pfDl!R!#c?%!2]`#,m=GP!#,e$!.k3k
!!XAF"98E9$Gujq!9aCa*!?D9!/1CS)@cb!!36)(,m=GP!#,dt!.k3p!!XAF"98E9$GHLl!:9af*!?D4
!/^aW()-QFJcN"T!%RpI!>,gq!.k3u!!"2@!!*ZC\H%3]nc/Y6OoUOC!=p+B!.k3Z!!*9Kr;Zj,'\*28
!7q2O"<7:>!=T[L!.k4G!!*3AN<#1C!WjSNnc47A])VjJ&cD\2!ZD3h!.k4+!!<iB!!!-%!!4)BLB+4P
!>5ju!.k3e!!EZU&.&EY!.k4;!!<E4*?+eT":6%V"p1Y%NW9.a#8S$N!!*BG!Xo;8K`J:V!sAlG'\ED;
!6"p?!uW1/_CC-enL=Sa*tJ)H!s0,P*haa@+T`Pu$i'c+!YcIn+sMU_Zm#Pj(^nalJcLB&JcLB&JcLB&
JcLB&JcLB&JcLB&JcLB&JcOF'J,~>

%%EndBinary
grestore
np
474.442 168.053 mo
510.378 168.053 li
.90573 .514275 .0514229 .00137331 cmyk
.40009 lw
1 lj
gsave
[3.74255 0 -3.92231e-7 -3.73961 257.4 250.572 ]ct
@
grestore newpath
533.054 168.27 mo
533.877 168.446 534.495 168.726 534.907 169.112 cv
535.475 169.65 535.756 170.308 535.756 171.086 cv
535.756 171.677 535.569 172.242 535.195 172.78 cv
534.82 173.322 534.308 173.715 533.653 173.966 cv
533.002 174.212 532.006 174.34 530.666 174.34 cv
525.052 174.34 li
525.052 174.014 li
525.502 174.014 li
525.995 174.014 526.355 173.857 526.572 173.543 cv
526.707 173.337 526.774 172.9 526.774 172.234 cv
526.774 164.553 li
526.774 163.816 526.688 163.353 526.516 163.162 cv
526.287 162.904 525.951 162.773 525.502 162.773 cv
525.052 162.773 li
525.052 162.448 li
530.195 162.448 li
531.153 162.448 531.924 162.519 532.5 162.661 cv
533.38 162.87 534.049 163.244 534.51 163.779 cv
534.974 164.314 535.206 164.927 535.206 165.626 cv
535.206 166.221 535.023 166.752 534.66 167.223 cv
534.297 167.694 533.761 168.042 533.054 168.27 cv
cp
528.458 167.799 mo
528.671 167.84 528.918 167.87 529.195 167.893 cv
529.476 167.911 529.779 167.919 530.112 167.919 cv
530.969 167.919 531.613 167.829 532.04 167.646 cv
532.47 167.462 532.799 167.178 533.028 166.801 cv
533.256 166.419 533.372 166.004 533.372 165.555 cv
533.372 164.86 533.088 164.265 532.519 163.775 cv
531.954 163.285 531.127 163.039 530.034 163.039 cv
529.45 163.039 528.926 163.102 528.458 163.233 cv
cp
528.458 173.48 mo
529.135 173.637 529.805 173.715 530.464 173.715 cv
531.523 173.715 532.332 173.48 532.889 173.001 cv
533.443 172.526 533.72 171.935 533.72 171.236 cv
533.72 170.772 533.597 170.331 533.342 169.904 cv
533.091 169.478 532.683 169.142 532.115 168.895 cv
531.549 168.648 530.846 168.525 530.011 168.525 cv
529.648 168.525 529.338 168.532 529.079 168.543 cv
528.821 168.554 528.615 168.577 528.458 168.603 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
541.856 173.18 mo
541.029 173.816 540.513 174.186 540.303 174.284 cv
539.985 174.429 539.648 174.504 539.293 174.504 cv
538.739 174.504 538.279 174.313 537.919 173.936 cv
537.56 173.554 537.38 173.053 537.38 172.436 cv
537.38 172.044 537.466 171.703 537.642 171.419 cv
537.882 171.023 538.301 170.649 538.892 170.297 cv
539.487 169.946 540.472 169.519 541.856 169.014 cv
541.856 168.7 li
541.856 167.9 541.729 167.35 541.471 167.051 cv
541.216 166.756 540.85 166.606 540.363 166.606 cv
539.996 166.606 539.701 166.707 539.484 166.905 cv
539.263 167.103 539.151 167.332 539.151 167.59 cv
539.169 168.094 li
539.169 168.364 539.102 168.573 538.964 168.719 cv
538.825 168.865 538.645 168.936 538.425 168.936 cv
538.207 168.936 538.032 168.861 537.893 168.712 cv
537.758 168.558 537.687 168.349 537.687 168.087 cv
537.687 167.586 537.945 167.122 538.462 166.703 cv
538.975 166.281 539.697 166.071 540.625 166.071 cv
541.34 166.071 541.924 166.191 542.38 166.43 cv
542.725 166.61 542.979 166.894 543.144 167.279 cv
543.249 167.534 543.305 168.046 543.305 168.824 cv
543.305 171.55 li
543.305 172.317 543.316 172.784 543.346 172.956 cv
543.376 173.128 543.425 173.244 543.492 173.304 cv
543.724 173.39 li
543.818 173.39 543.9 173.371 543.967 173.33 cv
544.091 173.255 544.33 173.038 544.678 172.687 cv
544.678 173.18 li
544.023 174.055 543.398 174.497 542.8 174.497 cv
542.515 174.497 542.287 174.396 542.115 174.198 cv
541.946 173.999 541.86 173.659 541.856 173.18 cv
cp
541.856 172.608 mo
541.856 169.553 li
540.969 169.901 540.401 170.151 540.146 170.297 cv
539.682 170.555 539.353 170.824 539.151 171.105 cv
538.952 171.385 538.855 171.692 538.855 172.025 cv
538.855 172.444 538.978 172.795 539.229 173.072 cv
539.484 173.349 539.772 173.487 540.101 173.487 cv
540.543 173.487 541.127 173.195 541.856 172.608 cv
cp
f
550.472 166.071 mo
550.472 168.805 li
550.18 168.805 li
549.959 167.949 549.671 167.362 549.323 167.051 cv
548.975 166.741 548.533 166.587 547.998 166.587 cv
547.586 166.587 547.257 166.696 547.002 166.913 cv
546.752 167.13 546.628 167.369 546.628 167.631 cv
546.628 167.956 546.722 168.237 546.909 168.472 cv
547.089 168.712 547.459 168.966 548.013 169.235 cv
549.293 169.86 li
550.483 170.435 551.078 171.198 551.078 172.148 cv
551.078 172.877 550.801 173.465 550.247 173.913 cv
549.693 174.362 549.076 174.586 548.391 174.586 cv
547.901 174.586 547.339 174.497 546.707 174.321 cv
546.512 174.261 546.355 174.231 546.235 174.231 cv
546.101 174.231 545.992 174.31 545.917 174.463 cv
545.625 174.463 li
545.625 171.595 li
545.917 171.595 li
546.082 172.41 546.392 173.027 546.853 173.442 cv
547.317 173.857 547.833 174.067 548.41 174.067 cv
548.81 174.067 549.14 173.947 549.394 173.711 cv
549.648 173.476 549.776 173.188 549.776 172.855 cv
549.776 172.451 549.633 172.115 549.349 171.838 cv
549.068 171.565 548.503 171.217 547.654 170.794 cv
546.808 170.376 546.25 169.994 545.988 169.658 cv
545.723 169.325 545.592 168.902 545.592 168.394 cv
545.592 167.732 545.82 167.182 546.273 166.737 cv
546.726 166.292 547.313 166.071 548.032 166.071 cv
548.346 166.071 548.732 166.139 549.181 166.273 cv
549.48 166.359 549.678 166.404 549.776 166.404 cv
549.869 166.404 549.944 166.385 549.997 166.344 cv
550.049 166.303 550.109 166.21 550.18 166.071 cv
cp
f
553.619 169.332 mo
553.612 170.525 553.904 171.46 554.491 172.137 cv
555.075 172.814 555.76 173.154 556.55 173.154 cv
557.077 173.154 557.534 173.008 557.923 172.72 cv
558.313 172.432 558.638 171.935 558.904 171.236 cv
559.173 171.408 li
559.05 172.208 558.694 172.937 558.103 173.599 cv
557.512 174.257 556.774 174.586 555.884 174.586 cv
554.918 174.586 554.091 174.209 553.406 173.457 cv
552.717 172.705 552.377 171.696 552.377 170.428 cv
552.377 169.056 552.729 167.982 553.432 167.216 cv
554.136 166.445 555.023 166.064 556.086 166.064 cv
556.988 166.064 557.725 166.359 558.305 166.95 cv
558.885 167.545 559.173 168.338 559.173 169.332 cv
cp
553.619 168.824 mo
557.339 168.824 li
557.309 168.308 557.25 167.945 557.156 167.735 cv
557.01 167.41 556.793 167.152 556.501 166.965 cv
556.213 166.778 555.91 166.685 555.592 166.685 cv
555.109 166.685 554.675 166.875 554.289 167.253 cv
553.907 167.627 553.683 168.151 553.619 168.824 cv
cp
f
563.006 161.872 mo
563.006 172.522 li
563.006 173.027 563.043 173.36 563.118 173.524 cv
563.193 173.689 563.305 173.812 563.455 173.895 cv
563.608 173.981 563.893 174.022 564.308 174.022 cv
564.308 174.34 li
560.367 174.34 li
560.367 174.022 li
560.738 174.022 560.988 173.984 561.119 173.91 cv
561.254 173.831 561.359 173.708 561.438 173.532 cv
561.512 173.356 561.554 173.02 561.554 172.522 cv
561.554 165.23 li
561.554 164.325 561.531 163.768 561.49 163.558 cv
561.449 163.353 561.381 163.211 561.292 163.136 cv
561.202 163.061 561.086 163.02 560.947 163.02 cv
560.794 163.02 560.603 163.068 560.367 163.162 cv
560.217 162.852 li
562.613 161.872 li
cp
f
567.28 161.872 mo
567.527 161.872 567.732 161.958 567.905 162.134 cv
568.081 162.306 568.167 162.511 568.167 162.758 cv
568.167 163.001 568.081 163.214 567.905 163.39 cv
567.732 163.566 567.527 163.652 567.28 163.652 cv
567.036 163.652 566.823 163.566 566.647 163.39 cv
566.471 163.214 566.385 163.001 566.385 162.758 cv
566.385 162.511 566.471 162.306 566.643 162.134 cv
566.816 161.958 567.029 161.872 567.28 161.872 cv
cp
568.009 166.071 mo
568.009 172.522 li
568.009 173.027 568.047 173.36 568.118 173.528 cv
568.193 173.693 568.301 173.82 568.444 173.902 cv
568.586 173.981 568.848 174.022 569.229 174.022 cv
569.229 174.34 li
565.322 174.34 li
565.322 174.022 li
565.715 174.022 565.981 173.984 566.112 173.91 cv
566.247 173.831 566.355 173.708 566.434 173.532 cv
566.512 173.356 566.554 173.02 566.554 172.522 cv
566.554 169.43 li
566.554 168.558 566.527 167.994 566.475 167.735 cv
566.434 167.549 566.37 167.421 566.28 167.347 cv
566.194 167.276 566.075 167.238 565.921 167.238 cv
565.756 167.238 565.558 167.283 565.322 167.369 cv
565.203 167.051 li
567.624 166.071 li
cp
f
572.572 167.769 mo
573.515 166.636 574.413 166.071 575.266 166.071 cv
575.704 166.071 576.082 166.18 576.396 166.4 cv
576.715 166.617 576.965 166.98 577.152 167.481 cv
577.28 167.833 577.343 168.371 577.343 169.093 cv
577.343 172.522 li
577.343 173.031 577.385 173.379 577.467 173.558 cv
577.531 173.704 577.635 173.82 577.777 173.902 cv
577.923 173.981 578.185 174.022 578.571 174.022 cv
578.571 174.34 li
574.596 174.34 li
574.596 174.022 li
574.765 174.022 li
575.139 174.022 575.401 173.966 575.547 173.853 cv
575.697 173.738 575.801 173.569 575.861 173.349 cv
575.884 173.259 575.899 172.986 575.899 172.522 cv
575.899 169.235 li
575.899 168.506 575.801 167.975 575.611 167.646 cv
575.42 167.313 575.102 167.148 574.649 167.148 cv
573.953 167.148 573.26 167.53 572.572 168.289 cv
572.572 172.522 li
572.572 173.068 572.602 173.405 572.669 173.532 cv
572.751 173.7 572.864 173.824 573.006 173.902 cv
573.148 173.981 573.44 174.022 573.878 174.022 cv
573.878 174.34 li
569.903 174.34 li
569.903 174.022 li
570.079 174.022 li
570.491 174.022 570.764 173.917 570.906 173.711 cv
571.052 173.506 571.123 173.109 571.123 172.522 cv
571.123 169.545 li
571.123 168.577 571.101 167.99 571.056 167.78 cv
571.015 167.571 570.947 167.429 570.854 167.354 cv
570.764 167.276 570.644 167.238 570.491 167.238 cv
570.326 167.238 570.131 167.283 569.903 167.369 cv
569.772 167.051 li
572.194 166.071 li
572.572 166.071 li
cp
f
580.562 169.332 mo
580.558 170.525 580.846 171.46 581.434 172.137 cv
582.018 172.814 582.703 173.154 583.492 173.154 cv
584.02 173.154 584.477 173.008 584.866 172.72 cv
585.255 172.432 585.584 171.935 585.846 171.236 cv
586.116 171.408 li
585.996 172.208 585.637 172.937 585.046 173.599 cv
584.458 174.257 583.717 174.586 582.83 174.586 cv
581.864 174.586 581.037 174.209 580.349 173.457 cv
579.664 172.705 579.319 171.696 579.319 170.428 cv
579.319 169.056 579.671 167.982 580.375 167.216 cv
581.082 166.445 581.965 166.064 583.028 166.064 cv
583.93 166.064 584.671 166.359 585.248 166.95 cv
585.828 167.545 586.116 168.338 586.116 169.332 cv
cp
580.562 168.824 mo
584.282 168.824 li
584.256 168.308 584.196 167.945 584.102 167.735 cv
583.956 167.41 583.736 167.152 583.448 166.965 cv
583.156 166.778 582.852 166.685 582.538 166.685 cv
582.052 166.685 581.617 166.875 581.236 167.253 cv
580.854 167.627 580.629 168.151 580.562 168.824 cv
cp
f
474.442 193.442 mo
510.378 193.442 li
0 .642634 1 0 cmyk
gsave
[3.74255 0 -3.92231e-7 -3.73961 257.4 250.572 ]ct
@
grestore newpath
541.576 187.836 mo
541.576 188.161 li
541.265 188.161 541.011 188.217 540.82 188.33 cv
540.625 188.438 540.442 188.644 540.266 188.947 cv
540.15 189.152 539.966 189.642 539.712 190.413 cv
536.396 199.997 li
536.048 199.997 li
533.335 192.395 li
530.644 199.997 li
530.326 199.997 li
526.789 190.125 li
526.527 189.388 526.359 188.95 526.291 188.816 cv
526.171 188.595 526.01 188.431 525.808 188.322 cv
525.61 188.214 525.337 188.161 524.989 188.161 cv
524.989 187.836 li
529.394 187.836 li
529.394 188.161 li
529.184 188.161 li
528.877 188.161 528.638 188.229 528.473 188.371 cv
528.312 188.509 528.23 188.681 528.23 188.879 cv
528.23 189.085 528.357 189.556 528.615 190.289 cv
530.958 196.964 li
532.934 191.291 li
532.582 190.289 li
532.302 189.493 li
532.178 189.201 532.04 188.943 531.89 188.722 cv
531.811 188.61 531.718 188.517 531.609 188.442 cv
531.463 188.337 531.314 188.258 531.168 188.214 cv
531.055 188.176 530.883 188.161 530.644 188.161 cv
530.644 187.836 li
535.273 187.836 li
535.273 188.161 li
534.959 188.161 li
534.63 188.161 534.39 188.229 534.237 188.371 cv
534.087 188.509 534.012 188.7 534.012 188.939 cv
534.012 189.238 534.143 189.758 534.405 190.499 cv
536.688 196.964 li
538.948 190.413 li
539.207 189.691 539.338 189.186 539.338 188.905 cv
539.338 188.771 539.293 188.647 539.207 188.531 cv
539.124 188.412 539.016 188.33 538.889 188.285 cv
538.668 188.202 538.376 188.161 538.02 188.161 cv
538.02 187.836 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
544.308 187.256 mo
544.555 187.256 544.761 187.342 544.933 187.518 cv
545.109 187.69 545.195 187.899 545.195 188.143 cv
545.195 188.389 545.109 188.599 544.933 188.775 cv
544.761 188.95 544.555 189.036 544.308 189.036 cv
544.065 189.036 543.851 188.95 543.675 188.775 cv
543.499 188.599 543.413 188.389 543.413 188.143 cv
543.413 187.899 543.499 187.69 543.672 187.518 cv
543.844 187.342 544.057 187.256 544.308 187.256 cv
cp
545.038 191.456 mo
545.038 197.91 li
545.038 198.412 545.075 198.748 545.146 198.913 cv
545.221 199.081 545.33 199.204 545.472 199.287 cv
545.614 199.365 545.876 199.406 546.258 199.406 cv
546.258 199.724 li
542.35 199.724 li
542.35 199.406 li
542.743 199.406 543.005 199.369 543.14 199.294 cv
543.275 199.219 543.383 199.092 543.462 198.92 cv
543.541 198.744 543.582 198.408 543.582 197.91 cv
543.582 194.814 li
543.582 193.943 543.556 193.378 543.503 193.124 cv
543.462 192.937 543.398 192.806 543.309 192.731 cv
543.223 192.66 543.103 192.623 542.949 192.623 cv
542.785 192.623 542.586 192.667 542.35 192.754 cv
542.231 192.439 li
544.652 191.456 li
cp
f
549.6 193.157 mo
550.543 192.024 551.441 191.456 552.294 191.456 cv
552.732 191.456 553.107 191.564 553.425 191.785 cv
553.743 192.002 553.994 192.365 554.181 192.866 cv
554.308 193.221 554.372 193.756 554.372 194.481 cv
554.372 197.91 li
554.372 198.419 554.413 198.763 554.495 198.943 cv
554.559 199.088 554.663 199.204 554.806 199.287 cv
554.952 199.365 555.214 199.406 555.599 199.406 cv
555.599 199.724 li
551.625 199.724 li
551.625 199.406 li
551.793 199.406 li
552.167 199.406 552.429 199.35 552.575 199.238 cv
552.725 199.126 552.83 198.958 552.89 198.733 cv
552.912 198.647 552.923 198.37 552.923 197.91 cv
552.923 194.62 li
552.923 193.89 552.83 193.363 552.639 193.03 cv
552.448 192.697 552.13 192.533 551.677 192.533 cv
550.981 192.533 550.288 192.914 549.6 193.677 cv
549.6 197.91 li
549.6 198.453 549.63 198.789 549.697 198.916 cv
549.779 199.085 549.892 199.212 550.034 199.29 cv
550.176 199.369 550.468 199.406 550.906 199.406 cv
550.906 199.724 li
546.931 199.724 li
546.931 199.406 li
547.107 199.406 li
547.519 199.406 547.792 199.305 547.934 199.1 cv
548.08 198.89 548.151 198.494 548.151 197.91 cv
548.151 194.93 li
548.151 193.965 548.129 193.378 548.084 193.169 cv
548.043 192.955 547.976 192.813 547.882 192.739 cv
547.792 192.66 547.672 192.623 547.519 192.623 cv
547.354 192.623 547.16 192.667 546.931 192.754 cv
546.8 192.439 li
549.222 191.456 li
549.6 191.456 li
cp
f
558.582 193.157 mo
559.525 192.024 560.423 191.456 561.277 191.456 cv
561.714 191.456 562.092 191.564 562.411 191.785 cv
562.725 192.002 562.976 192.365 563.163 192.866 cv
563.29 193.221 563.354 193.756 563.354 194.481 cv
563.354 197.91 li
563.354 198.419 563.395 198.763 563.477 198.943 cv
563.545 199.088 563.649 199.204 563.792 199.287 cv
563.934 199.365 564.199 199.406 564.585 199.406 cv
564.585 199.724 li
560.61 199.724 li
560.61 199.406 li
560.779 199.406 li
561.153 199.406 561.415 199.35 561.561 199.238 cv
561.711 199.126 561.815 198.958 561.872 198.733 cv
561.898 198.647 561.909 198.37 561.909 197.91 cv
561.909 194.62 li
561.909 193.89 561.815 193.363 561.625 193.03 cv
561.434 192.697 561.112 192.533 560.663 192.533 cv
559.967 192.533 559.274 192.914 558.582 193.677 cv
558.582 197.91 li
558.582 198.453 558.616 198.789 558.679 198.916 cv
558.762 199.085 558.874 199.212 559.016 199.29 cv
559.162 199.369 559.454 199.406 559.892 199.406 cv
559.892 199.724 li
555.914 199.724 li
555.914 199.406 li
556.093 199.406 li
556.501 199.406 556.778 199.305 556.92 199.1 cv
557.063 198.89 557.137 198.494 557.137 197.91 cv
557.137 194.93 li
557.137 193.965 557.115 193.378 557.07 193.169 cv
557.025 192.955 556.958 192.813 556.868 192.739 cv
556.778 192.66 556.655 192.623 556.505 192.623 cv
556.34 192.623 556.142 192.667 555.914 192.754 cv
555.786 192.439 li
558.208 191.456 li
558.582 191.456 li
cp
f
567.268 187.256 mo
567.515 187.256 567.721 187.342 567.893 187.518 cv
568.069 187.69 568.155 187.899 568.155 188.143 cv
568.155 188.389 568.069 188.599 567.893 188.775 cv
567.721 188.95 567.515 189.036 567.268 189.036 cv
567.025 189.036 566.812 188.95 566.636 188.775 cv
566.46 188.599 566.374 188.389 566.374 188.143 cv
566.374 187.899 566.46 187.69 566.632 187.518 cv
566.804 187.342 567.018 187.256 567.268 187.256 cv
cp
567.998 191.456 mo
567.998 197.91 li
567.998 198.412 568.036 198.748 568.107 198.913 cv
568.182 199.081 568.29 199.204 568.432 199.287 cv
568.575 199.365 568.837 199.406 569.218 199.406 cv
569.218 199.724 li
565.311 199.724 li
565.311 199.406 li
565.704 199.406 565.97 199.369 566.101 199.294 cv
566.235 199.219 566.344 199.092 566.423 198.92 cv
566.501 198.744 566.542 198.408 566.542 197.91 cv
566.542 194.814 li
566.542 193.943 566.516 193.378 566.464 193.124 cv
566.423 192.937 566.359 192.806 566.269 192.731 cv
566.183 192.66 566.063 192.623 565.91 192.623 cv
565.745 192.623 565.547 192.667 565.311 192.754 cv
565.191 192.439 li
567.613 191.456 li
cp
f
572.56 193.157 mo
573.503 192.024 574.402 191.456 575.255 191.456 cv
575.693 191.456 576.071 191.564 576.385 191.785 cv
576.703 192.002 576.954 192.365 577.141 192.866 cv
577.269 193.221 577.332 193.756 577.332 194.481 cv
577.332 197.91 li
577.332 198.419 577.373 198.763 577.456 198.943 cv
577.519 199.088 577.624 199.204 577.766 199.287 cv
577.912 199.365 578.174 199.406 578.56 199.406 cv
578.56 199.724 li
574.585 199.724 li
574.585 199.406 li
574.754 199.406 li
575.128 199.406 575.39 199.35 575.536 199.238 cv
575.685 199.126 575.79 198.958 575.85 198.733 cv
575.873 198.647 575.888 198.37 575.888 197.91 cv
575.888 194.62 li
575.888 193.89 575.79 193.363 575.599 193.03 cv
575.408 192.697 575.09 192.533 574.637 192.533 cv
573.941 192.533 573.249 192.914 572.56 193.677 cv
572.56 197.91 li
572.56 198.453 572.59 198.789 572.658 198.916 cv
572.74 199.085 572.852 199.212 572.995 199.29 cv
573.137 199.369 573.429 199.406 573.867 199.406 cv
573.867 199.724 li
569.892 199.724 li
569.892 199.406 li
570.068 199.406 li
570.479 199.406 570.753 199.305 570.895 199.1 cv
571.041 198.89 571.112 198.494 571.112 197.91 cv
571.112 194.93 li
571.112 193.965 571.09 193.378 571.045 193.169 cv
571.003 192.955 570.936 192.813 570.843 192.739 cv
570.753 192.66 570.633 192.623 570.479 192.623 cv
570.315 192.623 570.12 192.667 569.892 192.754 cv
569.761 192.439 li
572.182 191.456 li
572.56 191.456 li
cp
f
581.352 196.796 mo
580.861 196.557 580.483 196.22 580.218 195.794 cv
579.956 195.364 579.825 194.889 579.825 194.369 cv
579.825 193.572 580.124 192.888 580.723 192.316 cv
581.325 191.744 582.093 191.456 583.028 191.456 cv
583.796 191.456 584.458 191.643 585.019 192.017 cv
586.718 192.017 li
586.973 192.017 587.119 192.024 587.156 192.039 cv
587.246 192.114 li
587.28 192.166 587.299 192.26 587.299 192.395 cv
587.299 192.548 587.284 192.653 587.257 192.709 cv
587.164 192.78 li
587.119 192.798 586.973 192.806 586.718 192.806 cv
585.674 192.806 li
586.004 193.228 586.168 193.763 586.168 194.418 cv
586.168 195.166 585.88 195.809 585.307 196.34 cv
584.735 196.871 583.968 197.136 582.998 197.136 cv
582.602 197.136 582.197 197.08 581.782 196.964 cv
581.524 197.185 581.348 197.379 581.258 197.544 cv
581.168 197.712 581.123 197.854 581.123 197.97 cv
581.123 198.071 581.172 198.165 581.269 198.258 cv
581.367 198.352 581.554 198.419 581.834 198.46 cv
581.999 198.483 582.407 198.505 583.062 198.524 cv
584.267 198.55 585.049 198.591 585.405 198.647 cv
585.948 198.722 586.382 198.924 586.707 199.249 cv
587.033 199.578 587.194 199.982 587.194 200.461 cv
587.194 201.123 586.883 201.74 586.266 202.319 cv
585.352 203.172 584.162 203.598 582.695 203.598 cv
581.565 203.598 580.611 203.344 579.832 202.835 cv
579.394 202.544 579.177 202.241 579.177 201.923 cv
579.177 201.785 579.207 201.643 579.271 201.504 cv
579.372 201.287 579.574 200.988 579.888 200.603 cv
579.929 200.547 580.225 200.233 580.783 199.653 cv
580.476 199.474 580.263 199.309 580.135 199.167 cv
580.012 199.025 579.948 198.86 579.948 198.681 cv
579.948 198.475 580.031 198.236 580.199 197.963 cv
580.364 197.686 580.749 197.297 581.352 196.796 cv
cp
582.875 191.878 mo
582.444 191.878 582.081 192.05 581.79 192.395 cv
581.498 192.739 581.352 193.27 581.352 193.98 cv
581.352 194.904 581.55 195.622 581.947 196.13 cv
582.254 196.516 582.639 196.706 583.107 196.706 cv
583.549 196.706 583.915 196.542 584.203 196.209 cv
584.488 195.876 584.63 195.353 584.63 194.638 cv
584.63 193.711 584.432 192.982 584.028 192.454 cv
583.728 192.069 583.343 191.878 582.875 191.878 cv
cp
581.262 199.724 mo
580.989 200.02 580.783 200.296 580.641 200.554 cv
580.502 200.812 580.431 201.048 580.431 201.269 cv
580.431 201.549 580.599 201.792 580.94 202.005 cv
581.524 202.364 582.37 202.548 583.474 202.548 cv
584.525 202.548 585.304 202.361 585.802 201.987 cv
586.303 201.616 586.554 201.224 586.554 200.801 cv
586.554 200.498 586.404 200.281 586.105 200.154 cv
585.802 200.023 585.199 199.949 584.301 199.926 cv
582.983 199.889 581.973 199.821 581.262 199.724 cv
cp
f
597.662 199.399 mo
597.662 199.724 li
592.564 199.724 li
592.564 199.399 li
592.984 199.399 li
593.478 199.399 593.833 199.257 594.058 198.969 cv
594.196 198.782 594.267 198.333 594.267 197.619 cv
594.267 189.938 li
594.267 189.339 594.23 188.939 594.151 188.745 cv
594.095 188.599 593.975 188.475 593.792 188.371 cv
593.534 188.229 593.264 188.161 592.984 188.161 cv
592.564 188.161 li
592.564 187.836 li
597.662 187.836 li
597.662 188.161 li
597.231 188.161 li
596.748 188.161 596.393 188.303 596.172 188.588 cv
596.026 188.775 595.951 189.227 595.951 189.938 cv
595.951 197.619 li
595.951 198.221 595.989 198.621 596.064 198.812 cv
596.123 198.958 596.247 199.085 596.434 199.189 cv
596.685 199.328 596.951 199.399 597.231 199.399 cv
cp
f
601.004 193.157 mo
601.947 192.024 602.845 191.456 603.698 191.456 cv
604.136 191.456 604.514 191.564 604.829 191.785 cv
605.147 192.002 605.398 192.365 605.585 192.866 cv
605.712 193.221 605.776 193.756 605.776 194.481 cv
605.776 197.91 li
605.776 198.419 605.817 198.763 605.899 198.943 cv
605.966 199.088 606.068 199.204 606.21 199.287 cv
606.356 199.365 606.621 199.406 607.007 199.406 cv
607.007 199.724 li
603.029 199.724 li
603.029 199.406 li
603.197 199.406 li
603.571 199.406 603.833 199.35 603.983 199.238 cv
604.133 199.126 604.234 198.958 604.293 198.733 cv
604.316 198.647 604.331 198.37 604.331 197.91 cv
604.331 194.62 li
604.331 193.89 604.234 193.363 604.043 193.03 cv
603.856 192.697 603.534 192.533 603.085 192.533 cv
602.389 192.533 601.692 192.914 601.004 193.677 cv
601.004 197.91 li
601.004 198.453 601.037 198.789 601.101 198.916 cv
601.183 199.085 601.296 199.212 601.438 199.29 cv
601.584 199.369 601.872 199.406 602.31 199.406 cv
602.31 199.724 li
598.335 199.724 li
598.335 199.406 li
598.511 199.406 li
598.923 199.406 599.2 199.305 599.342 199.1 cv
599.484 198.89 599.555 198.494 599.555 197.91 cv
599.555 194.93 li
599.555 193.965 599.533 193.378 599.488 193.169 cv
599.447 192.955 599.38 192.813 599.286 192.739 cv
599.196 192.66 599.076 192.623 598.927 192.623 cv
598.762 192.623 598.564 192.667 598.335 192.754 cv
598.208 192.439 li
600.626 191.456 li
601.004 191.456 li
cp
f
609.69 187.256 mo
609.933 187.256 610.143 187.342 610.315 187.518 cv
610.491 187.69 610.577 187.899 610.577 188.143 cv
610.577 188.389 610.491 188.599 610.315 188.775 cv
610.143 188.95 609.933 189.036 609.69 189.036 cv
609.443 189.036 609.234 188.95 609.058 188.775 cv
608.882 188.599 608.796 188.389 608.796 188.143 cv
608.796 187.899 608.882 187.69 609.054 187.518 cv
609.226 187.342 609.44 187.256 609.69 187.256 cv
cp
610.42 191.456 mo
610.42 197.91 li
610.42 198.412 610.457 198.748 610.529 198.913 cv
610.603 199.081 610.708 199.204 610.85 199.287 cv
610.996 199.365 611.258 199.406 611.636 199.406 cv
611.636 199.724 li
607.733 199.724 li
607.733 199.406 li
608.126 199.406 608.388 199.369 608.523 199.294 cv
608.657 199.219 608.762 199.092 608.841 198.92 cv
608.923 198.744 608.964 198.408 608.964 197.91 cv
608.964 194.814 li
608.964 193.943 608.938 193.378 608.886 193.124 cv
608.844 192.937 608.777 192.806 608.691 192.731 cv
608.601 192.66 608.481 192.623 608.332 192.623 cv
608.167 192.623 607.965 192.667 607.733 192.754 cv
607.613 192.439 li
610.031 191.456 li
cp
f
614.971 189.055 mo
614.971 191.691 li
616.85 191.691 li
616.85 192.305 li
614.971 192.305 li
614.971 197.514 li
614.971 198.034 615.046 198.385 615.196 198.569 cv
615.345 198.748 615.536 198.838 615.772 198.838 cv
615.963 198.838 616.15 198.778 616.333 198.658 cv
616.513 198.539 616.655 198.363 616.752 198.127 cv
617.097 198.127 li
616.891 198.699 616.599 199.13 616.225 199.421 cv
615.85 199.709 615.465 199.855 615.068 199.855 cv
614.799 199.855 614.537 199.78 614.279 199.631 cv
614.02 199.481 613.829 199.268 613.706 198.991 cv
613.586 198.714 613.526 198.288 613.526 197.708 cv
613.526 192.305 li
612.254 192.305 li
612.254 192.017 li
612.572 191.89 612.901 191.669 613.238 191.362 cv
613.575 191.056 613.874 190.693 614.136 190.274 cv
614.271 190.05 614.458 189.646 614.698 189.055 cv
cp
f
619.316 198.023 mo
619.589 198.023 619.821 198.12 620.008 198.311 cv
620.196 198.498 620.289 198.729 620.289 198.999 cv
620.289 199.264 620.192 199.492 620.001 199.683 cv
619.814 199.874 619.586 199.971 619.316 199.971 cv
619.047 199.971 618.815 199.874 618.624 199.683 cv
618.437 199.492 618.339 199.264 618.339 198.999 cv
618.339 198.722 618.437 198.49 618.624 198.303 cv
618.815 198.116 619.047 198.023 619.316 198.023 cv
cp
f
%ADOBeginSubsetFont: PBAAAA+CourierNewPSMT Initial
ct_T42Dict begin
-0.121 -0.68 0.621 1.02
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+CourierNewPSMT
Type42DictBegin
[<00010000000c000c000c000c4f532f32132c8072000000cc000000606376
7420aa0e65140000012c0000078c6670676d5ca2610e000008b8000006ca
676c79668d2073f50000831400002cfa68656164e4790dae00000f840000
0036686865610aae01c400000fbc00000024686d7478d094b77a00000fe0
00001d6c6c6f636176157fcd00002d4c00001d686d61787013170b740000
4ab4000000206e616d653a84527100004ad400002d7a70726570afc0175c
0000785000000ac367646972000000000000000000000000000304cd0190
00050008059a05330000011d059a05330000036100660212050502070309
020205020404e0002effc00078430000000900000000544d432000400020
25cc04e7fe7e000006a90267400001ffffff000003620492000000200015
04e700000492001b04e7001e0362001e0000ffdf0000ffdf0000ffe2fe7e
000004e70000fefdffff02d7000000540000005400000000000000000054
00540095005400540054014d005400540054006400d4006d009100970054
013301ce00a90040000f005400d4000301000158003c0093007700d50055
fff10054002100a300ef002c00390068fffe0011007f00fe017d00a30102
0002000f003800d300650090023c032b04eb0001002a013003ab0182002d
003c00540096001700cf0158002aff0a003c00b3021d023c0002005400cb
035f082cff30fff201c004c9ff6200a2013c02d604ae00cc00ed01220400
fe83ff8bff9bff9c000e00f4031dfdc3ff31ff6d0054005500600075007c
007f0080009e00cd0159023d02bfff89001100580065007f00b700cb012b
040004600012005200550084009800b900be00cf00d800e50101010f0128
018001d301d40500fdc4fec4ff49ff62ff6f0045004e00500080010f011d
01250141025a035a03ad03d7fde3fee0ff1e0011005400760078007b008f
009000ab00d700d900db0103020a0254025503ad001b003d005a00620091
0093009e00a900c900df01080134013a0140018601ac02760403fdc40003
0004001500390048005400640091009b00a300a500af00c400d000d100d7
00f100fe01030119012b0155015c017d0185018e019401a501ac01ae01eb
020502d80303038104c604ebfed6ff0aff9affa9001b001b001c00200029
002c0038004c006d00cd00ea0128012a012c013f01d2022b022c0301040c
fdfefe33ff47ff7fffc5ffd7002300270038003d00440045004d00570062
0079008300bb00c600cd00cd00ce00e600f701010103010a0112011d0120
012301520153017501ac01ad01ef01fd0216021d0238026c02b202d4032b
03cd045704aefdb4fe15feb2feeffeffffabffb0ffc3ffcc000200540036
003800430055005d00700073007c007f00b500bb00c500e400e900f50101
0106011f01280148014b0155019801ac01df01fc02000208027e02ac02ff
033d039003c904190498fe4efe6dfe98feb3ff34ff4d0001000300050019
00340034003a003c0055005900730082009100a300aa00ab00b300cc00d6
00ee0118011e013001490156015801600168016f01700171017b017c0185
01a901b401bb01d601db01ee020402060215022b022b02630282029302b4
02c402d602e40300035303580371037b039303b403d003e80410042c0430
044d04600479047a05000503061608ccfc17fc6dfd62fd9afdc3fe2efe44
fe6bfe8bfec1fed6fee2ff0bffbfffe500060030003c005900670073007d
007f0086008e009f00a900aa00d600e100e700eb00f100f200f501030109
011a011e011f012c013f01430149014d015601570159016601660168016a
0175018001ab01b201bc01c001c101c901cb01d201dc01ef02010215022e
022e023b023d025502660282029a02ab02b002d902d902f502f90326032c
03320333033e03600371038703880393039703dc03e50402041504310453
047f04c7050305640596059b05c405c805ea0610065b0054005400540054
00000000000000000000000003cc02c1043e036c00a00050020303ea02d2
023c017d02fb01a7021d01c102f5021d035003500243023b000201bb0048
006d0014079b06210621021400100760000000000299022d03570426030c
007400500000025a0286026000a601bc00fb02480152017603cd02a0025f
039b0492043e01d7007f02c10400020d01f600410041013e01a901d30071
02d6022d03af04ce00000000050803fc056d020dff8704e7050203d20000
043d010203ca015a01ed0150021601c1013b028e0023015a011001ed0023
0149003900d9004d00b90157003804e0038c024a02db0039006c009301c1
03cc02bb006c02bb01a200f2003800fe01720150019c0331007e01710054
0039006a0294002202700222007c005500f30182011500d700fb01ab0124
02660004030d026300d40259003c00d00112022e017e0034006d008b018a
002c01fd01c000cc02910036016503befc19fd280201fced01b1034800b1
01fb04c904c9020400fb01c1021d01300108014000e100a3009b005500c6
0021032600a900380005022c0003005d0060004c001102f5017c026c0069
019803e901a50241004f0065037302460196fef504410333004100ba0119
014306390800053c051d0434041504e7003e006700670000066804df0582
0067006703d303f4ff59ff21fe5f050efedc007a00d9004800db018b00b3
004800da0116015e015104ff024b04ffff5600ab02af04dcff17010c0121
00d1ff300149feb5013c0124ff200171ff0b01510086005e06a9fd99048b
04850475047c0000fffb007b00860092009a00c200d500a4001e00270039
004c0054005c00620069002d0030003200350038003e004200440049004c
00500056005a006000640066006e00710078009d00ac00b10040004b0055
005e00620066006a007100730077007b007e00820087008c0091009600a6
00d102aa029f0321028802c50276026900da00da03c70340015600d40489
047f005300240051011300690037003c001f008c008cffd3005a0029001b
010f0134007f00540054ffebffd6ffa8fdcf00a600a600920092064200eb
06430028004f01f6041a01054043585554403f3e3d3c3b3a393837353433
3231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a1918171615
14131211100f0e0d0c0b0a090807060504030201002c4523466020b02660
b004262348482d2c452346236120b02661b004262348482d2c45234660b0
206120b04660b004262348482d2c4523462361b0206020b02661b02061b0
04262348482d2c45234660b0406120b06660b004262348482d2c45234623
61b0406020b02661b04061b004262348482d2c0110203c003c2d2c204523
20b0cd442320b8015a51582320b08d44235920b0ed51582320b04d442359
20b09051582320b00d44235921212d2c20204518684420b001602045b046
76688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00
b0172370b101173e01b0172370b10217453ab10200080d2d2c45b01a2344
45b01923442d2c2045b00325456164b050515845441b2121592d2cb00143
632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a
2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b0
0361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2c
b01243588745b0112bb0172344b0177ae41b038a45186920b01723448a8a
8720b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2c
b0022546608a46b040618c482d2c4b53205c58b002855958b00185592d2c
20b0032545b019234445b01a23444565234520b00325606a20b009234223
688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a54582321
b03f1b235961441cb114008a5279b31940201945208a54582321b03f1b23
5961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b
2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343650b
2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b00052
5823b002253823b002256538008a63381b212121212159012d2c4bb06451
584569b00943608a103a1b212121592d2c01b005251023208af500b00160
23edec2d2c01b005251023208af500b0016123edec2d2c01b0062510f500
edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2cb02b
2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b8026923
701020b802694520b0005058b00161593a2f182d2c21210c6423648bb840
00622d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c
21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c642364
8bb84000626023212d2cb4000100000015b00826b00826b00826b008260f
10161345683ab001162d2cb4000100000015b00826b00826b00826b00826
0f1016134568653ab001162d2c4b53234b515a5820458a60441b2121592d
2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d2c4b
5458381b2121592d2cb0134358031b02592d2cb0134358021b03592d2c4b
54b012435c5a58381b2121592d2cb012435c580cb00425b00425060c6423
646164b807085158b00425b00425012046b01060482046b0106048590a21
211b2121592d2cb012435c580cb00425b00425060c6423646164b8070851
58b00425b00425012046b8fff060482046b8fff06048590a21211b212159
2d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b21
21592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54b004
26024b545a8a8a0ab012435c5a58381b2121592d2c462346608a8a462320
468a608a61b8ff8062232010238ab9032603268a70456020b0005058b001
61b8ffba8b1bb0468c59b0106068013a2d2cb1020042b123018851b14001
88535a58b910000020885458b202010243604259b12401885158b9200000
40885458b2020202436042b12401885458b2022002436042004b014b5258
b2020802436042591bb940000080885458b202040243604259b940000080
63b80100885458b202080243604259b94000010063b80200885458b20210
0243604259b12601885158b94000020063b80400885458b2024002436042
59b94000040063b80800885458b202800243604259b12801885158b94000
080063b81000885458ba000201000002436042595959595959592d2cb002
4354584b53234b515a58381b2121591b21212121592d2c20b0024354b001
23b07b237821b1000243b072237921b10002438ab020205c58212121b063
1c598a8a208a208a23b81000635658b81000635658b00426b0015bb00426
b00426b004261b21212121b13600231c591b2159b0042623b08062205c58
8a5c8a5a23212321b01d1c598ab08062205c5821212321b00e1c59b00426
b00161b8ff981c23212d0000000100000006eb85f101d1d55f0f3cf50809
080000000000a325516100000000d62f890fff07fa9004fb082b00000009
00010000000000000001000006a9fd99000004cdff07ff5a04fb00010000
000000000000000000000000000304cd00670000000004cd0000000001eb
010a00bb00e400bb00fe01e1025d012d00e20090012b00ba01cd00e600e5
00e400ab00c300d600c4011200d300e7011301cd01380062006500940113
00d700110057007f009e0058009f0080006b00e500ab005900800018002e
006800b30068005800b9008f0053001000250050006300d5023d00e3013c
00e4000001bc0090002d00ab007e008000d7007d005500bd00b400bf00bb
0015006c0091002d008000ab00cf0092005b003b00380065009500ed0195
023c019400bb00110011007f0058002e0068005300900090009000900090
009000ab008000800080008000ba00ba00ba00ba006c0091009100910091
0091005b005b005b005b00fc015100e4007c008f016f00ab005900000000
000401bb013f006500120050006d0090006200940062005a00b0002b0036
00a700e101280126003d0010007000e601eb0018008900b100bb00530063
007f0065001100110068001100120091fff100b300db01fd01250090009b
0095006300670007006b0254000e001300fb01cd012b00e0003d00110058
00110058005800e500e500e500e500680068006800530053005300ba013c
0128013c013a020001b101ba013b01d4013c005600bb00b900cf00d500ed
023cfffd00810063009500b3002d0090010e017601550163000000000000
009f0080007d00e500b900cf007f00ab007f00ab007effe502c400110090
00110090009e007efffd0058008000580080008000bb008000bb008000bb
002e006c002e006c00680091005800ab005800ab00b900cf008f0092008f
00920053005b0053005b00d500ed00d500ed007f0067005a006200b5011b
009800d0007bffe50112011b000e0002017d0002017d0002017d017d0002
00a9006500990090021d01000000021d021d0000021d0000021d00000000
000000000000017d021d017d017d000000000000021d017d017d00000000
0000021d017d017d00000000000000000000000000000000000000000000
00000000000000000000026700000000000000020002000f0002000f0002
00ae007c0026000300030002014100b800800002006c009f010f005a0009
001300000201012500bb014100020169016900ae016f00110090007f00ab
007f00ab0058008000580080005800800080007d0080007d0080007d006b
0055006b003e00e500bb00e500bb00e500bb00e500bd00ab00b4005900bf
0092008000bb002e006c0080006c0068009100680091005800ab00b900cf
008f007a0053005b0053005b0053005b0053005b002500380063009500d7
00110090001200100050007001cd00250038002500380025003800630095
01fd013c0088005a000c0011000b001b020801d401bb01080040fffc0013
0041fff6002affd400f2001100570065005800d5006b00e50059000f0018
002e00930068006400b300c4008f00630050001d003c00e500630062011b
008b01bb0057010400460156008b00b3020f009e00410054004a01450091
00ca00cf00570099004500750128005700910057007500580011007f007f
00b900e500e500ab0023000000110077002c0064001100570057007f004a
0058fffb007200280028007700230018006b0068006400b3007f008f002c
00630050005900290004000400020002005700810016000f00900080007b
0098005a008000140090003a003a00780033001f006b0091006b002d00ab
00a6003c00770065004d004600210021004b001800a60082002400830080
008e009800ab00cf00bd00ba00b40033ffee003e0078003c006b007f0098
002b00310068025802580258025802580258025802580258021602580216
022d00b50189023c038200aa01cc00d0009e011500a300a0017701490092
00680173009500b400c0006d00850176011c004f00c000f200fa00de00a2
00c500ac00cc00a0007a0085008501bf00f7005b017700950095ffedffed
00c000cc00b900cc00b900d000d000d0009e011500a300a00167013a0068
0173009500b400c00085011c004f00f200fa00a200c500ac00cc00a00177
009e00b400fa00ac0243018c0160012401c701c700fb0201000001dc0197
01dc01dc01a301dc01ca01db01d90164013f00f4017f0154013701080107
0127009601f100e6024a01d101f3010d0127011101450000000000000000
000001ca02030201020301a201a401ab016d01520000019c016201600025
002500000000000b0006000000000110009e000000000090006500030003
00000000000a000a0000000000aa007000f0009700f000f0009e009e00bf
00bf00bf013f0090009000f0009700f00097018301d501c701a801ca0000
001d002b002b0000001d002b002b002b002b0000001d0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
019c019c010a010a000000140201010a00cb0197019700c400c001bc01f8
00aa007000000000020001f8002500250000000001c80184002500250000
000000250025000000000110009e000000000110009e000000000110009e
00000000019e0151019e0151009000650090006500060006000000000006
00060000000000000000000000000000000000000000000c000a00000000
000c000a00000000011a011c00000000011a011c00000000000b00060000
000000a600d60000000000b4003800000000010800710000000001b201b2
0000000000fe008e0000000001f301840000000000c400c000aa007000aa
00760000000000670099008200a1009c00d7009c00d7021901d101dc01dc
0061004c019c01db01ca010d024a01a30197005d0020000501c701ca01ca
01d501a8018301db01b201b2009c009c01ea01f501f50075006b01b501f4
01e30126026301bc01b0007f0041002601e001e301e301ee01c1019c01c7
019e019e00d700d700c300ce00cd016a0174008e00cd00bc0000013c0095
0089017f011100ee00b900bc00bc00c7009a00750186015d015d01be01be
01bc019a01df00000025002500000000000b00060000000000f00097009e
0000001d002b0000000001470147015800f300da01f801f800ce00000068
00910053005b01c10199019801c401cb01c001bb01c501ab01b9012b0124
0118015e0144037d00c800000000019f01bd01a501c301b701b7012b012b
012b01280128012801ff01ff01ff01ff01ff01c401a8012801ff01ff01ff
01ff01ff01ff01ff01ff01ff01ff0142012b0142012b0011009000110090
001100900011009000110090001100900011009000110090001100900011
009000110090001100900058008000580080005800800058008000580080
00580080005800800058008000e500ba00e500bd00680091006800910068
009100680091006800910068009100680091006800910068009100680091
00680091006800910053005b0053005b0053005b0053005b0053005b0053
005b0053005b0063009500630095006300950011009000e500ba00680091
0053005b0053005b0053005b0053005b0053005b012f011400f50114007f
0098fffb00140077007800770078006b006b006200950062009500500065
00290046006b0055004200800068009101f4018c015b014801bf01bf0148
014801480177020001f800c400c000c400c000aa00700025002500000000
002500250000000000250025000000000025002500000000002500250000
0000002500250000000000250025000000000110009e000000000110009e
000000000110009e000000000110009e000000000110009e000000000110
009e00000000019e0151019e0151019e0151019e0151019e0151019e0151
019e015101970151019b0151009000650090006500900065009000650090
006500900065009000650090006500060006000000000006000600000000
000600060000000000000000000000000000000000000000000c000a0000
0000011a011c00000000000b000600000000000b000600000000000b0006
00000000000b000600000000000b00060000000000a600d600a600d600a6
00d60005000500000000000300030000000000b400380000000000b40038
0000000000b4003800000000000a000a00000000000a000a00000000000a
000a00000000000a000a00000000000a000a000000000108007100000000
01080071000000000108007100000000010800710000000000fe008e0000
000000fe008e0000000000fe008e0000000000fe008e0000000000fe008e
000000000110009e0000000001f3018401b101f30000000001b101f301b1
01c800c400c000c400c000c400c000c400c000c400c000c400c000c400c0
00c400c0000f001d00aa00700000000000c400c000aa00760000000000aa
0076005a005a005a005a01d101f300e70158016d01c001a001f801730014
000a01ee021401ea01c0017301cc0174017401ad003101be01be01ee01c0
00060006000000000000000000000000011a011c00000000020101b20003
000300030018009c00b7009c00d7009c00d7009c00d7009c00d7009c00d7
0173012b016900850212021b0076008e00f9010d005700570097007f007f
0015002e001200250051008f0004008f00b3002d00160057002d0057002d
007f007f00abfffd00160057008000b50058007200000080003b001500e5
00e3005900bf00bb004100150000006c0068003c00910016002d00b300b9
00cf00c401560092005d0092008f003c0053003d000000d500ed00a100a1
00a100db00ab00c400900092002d023c01e7006501eb00080008000a0012
0008001100070007000a008000110090012f00110090001200100080007d
0080007d005900bf006800910068009100a1008c00b400080008000a0080
007d000a002d002e006c0011009000110090005800800058008000e500ba
00e500ba0068009100680091005800ab005800ab0053005b0053005b00b9
00cf008f009200ab00ab006b0055006b008600e700d500ed001100900058
0080006800910128006800910068009100680091006300950068007e002a
002d00ab006a007e007e0080004e00900090006800870087007d007d00ab
00a4009100550067006700bd020f00e500bb00bb01120011001500150015
0000006c003a0091004e0075009100730073007300ab00db00dc00ab008e
008e00cf00b100b100b100d100920092005b00b80057003b003800410092
00ed00a7008c00ad00aa00b400aa00ab0068007b008700ab006b00b9006e
0098008000aa00b4000a000a000a000a0062000a000a000a000a00a900ed
01120112016d012d012a012a012d00e8010d0201010701fd012501fd020e
020e013b014000620094007a007a023601bb01bc0236013c01bc01bc01ff
01ff020e020e019801980198013c01a0010e0133014d015901350140013c
013c00db013c013cffe5013a0200013f01b1013b013c023601d5013b013a
013a01fd01250125031901bc01bc01980198013c01e7020e019801980198
013c00b100b1013f01b1020801ba01d40236013c0121013c013c013a013a
0128013c0000013c0128013c000000a700e6020e013c01aa011e01c30200
ffe501bc01bb0128012501080236013c006501d50198012801280128016a
01b700000000000000270128013001500126011701390103011200d1012d
013b00f5013501bb01bc023600b30047006d0000006d0091003200bc0068
0091008c00cf009f009f0040008b008c00f00015001500ab00ab006b0075
00b900b9008800c3008000ab008100e700bc008000ab00b4006800ab00f9
005800280080003a00140096002100390000000c00110013000000050029
00500000000500790097001d004500680091001a003b001a003b001e001f
0040005f0014001400a700140096007f00b400b40159013c020d020d0001
00010028003a0057006600b3002d00250034007200900077007800170024
00110011000a000700570051007f00ab008f00a6000c000c002900460005
000f0005000f00e5fffb00140077007800230033006b006b006b006b0029
00460018001f013a0011009000110090001200100058008000420080fffb
00140072009000c3008c0028003a0028003a006800910068009100810082
002c0095002c0095002c009500290046000200180074007e0010001e0007
000a0051005a000a0008000a0014008000ab008f00a601a401a801dc0216
01b2019601d6012efff103ca01960196033a014500c501a001b701ba01dc
0196014501d3019601a001a401dc01ba033afff101c20216012f012f0128
012801dd017b012f001100900057002d0057002d0057002d007f00ab009e
007e009e007e009e007e009e007e009e007e005800800058008000580080
0058008000580080009f00d70080007d006b0055006b0055006b0055006b
0055006b005500e500bd00e500ba005900bf005900bf005900bf008000bb
008000bb008000bb008000bb001800150018001500180015002e006c002e
006c002e006c002e006c0068009100680091006800910068009100b3002d
00b3002d005800ab005800ab005800ab005800ab00b900cf00b900cf00b9
00cf00b900cf00b900cf008f0092008f0092008f0092008f00920053005b
0053005b0053005b0053005b0053005b0010003b0010003b002500380025
003800500065005000650063009500d500ed00d500ed00d500ed00550092
00380095009000d700620062006200620062006200620062000000000000
000000000000ff1bff1b011b011b011b011b011b011b0000000000000000
00000000008b008b008b008b008b008b008b008b00000000000000000000
0000ff1bff1b020d01e501a0019601a00196010a01000000000000000000
000000000001000100910091009100910091009100000000ff9cff9cffc4
ffc4005700570057005700570057005700570000ff74ff74ff1b00750075
0075007500750075007500750000ffecff56ff56ff7eff7eff1bff070062
0062011b011b008b008b018001ab00910091005700570075007500620062
006200620062006200620062000000000000000000000000ff1bff1b008b
008b008b008b008b008b008b008b000000000000000000000000ff1bff1b
007500750075007500750075007500750000ffecff56ff56ff7eff7eff1b
ff07006200620062006200620062006200110011000200020011020d0236
020d01280128008b008b008b008b008b0002000200020002006b01be01be
012801120114011b011b0100010000e500e50002000201be01be01280057
00570057005700ca00ca0057005700630063000200020000010801080228
007500750075007500750002000200020002003c0228020d0099006b0000
00000000000000bd00b400260112003a00e60021002101a201a201e401e4
01b101bc013b013b012801cd01e901e901e901e9013c013c014901e4020e
013a01bd01e401e40118020e00000000000000b3002d003b002b002500cf
00ab00cf00cf00cf009000b70101009e00cf001f003a00910082009100ab
0065002301240091009100a60083008300a600560099001800aa003b0038
00ed009000b000910098003b006b00a6001d003300e100d6011101110116
01170117010801070166011400fb011700d400f100e70112014b014c0136
0123010b00dd01280128010300d200fe0103013001350131013101030150
012800d1013b0126013c0126012600fe013b0117014c00d700f501360159
00fd01480120012a0150012d011700f5015900fd01310120012a00000000
0000000000000190011a018601920179013b015d024a01be021a015b019e
0151009000650000000000000000003a000d000a001e002a001d0016001e
0090012d012d012d002b00b3003f000000000000000000140000007f0018
001f000b004700470011007f00ab0080008f00cf00ed0078038b01a2011b
01a000000023007f007f007f007f009801a4021602150177025800dc019a
01e201bf01bf01cd01be01da012a00250025000000000025002500000000
002500250000000000250025000000000025002500000000002500250000
000000250025000000000110009e000000000110009e00000000019e0151
019e0151009000650006000600000000011a011c00000000011a011c0000
0000011a011c00000000000b000600000000000b00060000000000030003
000000000003000300000000000300030000000001b201b20000000001b2
01b20000000000fe008e0000000000fe008e0000000000fe008e00000000
0108007100000000009000650090006500060006000000000000004500be
0000003c0000009b005f0059005700ed004e011900b5000000e300e4002d
00560036002d007e00d7000f00bf00bb0015006c002d00ab00cf00b1003b
006500ed005a002a007e003f00380090000700bd00ab00b10000008c0103
0139010f01240131016401640103011e015002300175017501620173013c
00df00c400d100d5011e0114012601140154014e013b0117014801130111
00f5017101710171013401430126012601ec013c01cd0128013001260135
0135008000100058007f00ba006200620062006200620062006200620114
011401140114010c010c010c010c00570057005700570057005700570057
01050105010c010c0057005700570057009c00d700bd00b0002a0053000f
0058008000ab00b400540080000f00ab0063009500ab00ab00ab00bb007f
009800500065005000650072009000230033015701570157015700c100c1
019e01e40118000000cf00ab007400bb00700088005800900092006b0055
005900bf00d500ed0078006b006b007b01c601e0012c013c013c013c0080
002e0080017f017601550163017801680180017801780180012500680080
00250038007500e20068003b0005001a01cd012d01e101e1017d017d01eb
01eb01eb013c001401c701b601b80178016601ad01ba01ba009000e40079
007900090030000f021401f801cc01f501e901d201d501d101d101da01e6
01db01d601d901db01b5021201ff01fa0110009e000000000110009e0000
00000006000600000000009000650110009e0000000001140102010100ef
00aa00700000000000aa00700000000000aa00700000000000c400c000c4
00c0002f005a002f005a0110009e00000000000600060000000000060006
0000000000b400380000000000470016003e00170150004d002c002a0045
0155018401f701c401f700aa007600000000000300030000000000030003
0000000000aa00700000000000aa00700000000000aa0070000000000198
00b1005f008f00a00052003a00590113000000b70064000b0009001d000e
000b000e0059009e000f00070008000b0064006b006b005500d700d700b5
0031007500e200e20032000400180011001f001200730091012a016d00f5
00b900d500000000000001bb01a001dc00000197016701dc01dc000001a3
000001dc000001ca000001db000001f9019101910191018c01e801f401e9
0170017000a800fc00fc0059002f0019001b0019001b0019001b0019001b
0097002b00000097002b000000250025000000000110009e00000000000c
000c000c0000000b00060000000000a600d6000000000108007100000000
01b201b20000000000aa00760000000000aa0076000000000081005900c4
00c00103010301c601d501cb01a301c201ac022201c701ad022201c701ad
01900150019001cc019c01de01de02010201020102010199015901c301a4
009c00d701c701c700000000000000000000000000000000000001c70108
019701f00215011500a300a000a00216019800530076005d0019008200af
008200520027004400a90092003b0049005400c8009f0019005b001500b7
0017009c005300aa001100a400370053001900b70071009300ec005a0009
0068009901c1019701a1013e01bc00e4006d001400940043006e004f0057
009c007100400059006c011dfffd0088005d005500dd008c0096005a00f7
ffe100fa006c0142003200f2008b005b00780014006c007d00bd00140035
00910085000001cd00bc0008000800370010001000100016001000b30014
00000037ffca002500250000000000b3019e015100000000000000000003
0003000000000170022a0090006501d000abffbaffff0000000000250043
00230033000e000e000e000e000f0057001200a900c2011a011c00000000
00b400380000000001a30057002500250000000000250025000000000025
0025000000000090006500aa007600000000000b00060000000000a600d6
0000000000fe008e000000000164019d004400f2016b016f01ad01ad0025
00000002000100ad0024013e00ca011d00000037003700370037009100e5
00e500e500e500e500e5013c019301930193019301930193019301930193
026f026f026f026f026f026f026f026f026f026f026f026f026f026f026f
026f036d036d0435043504350435043504d104d10660066007cb08c208c2
097e097e0a9e0b6d0be90be90ce80ce80ce80ce80ce80ce80ce80ce80ce8
0ce80ce80de60de60de60e940f330f33100b100b10781078107810ce10ce
11df12ad12ad12ad137614ce157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572157215721572
157215721572157215721572157215721572157215721572167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d167d167d167d167d167d167d167d167d
167d167d167d167d167d167d167d000100000eb300800010000000000002
0010002f0059000003ea0ac3000000000000003a02be0000000300000000
021a000000000003000000010016021a0000000300000002000e02880000
0003000000030040029600000003000000040016021a0000000300000005
001802d60000000300000006001c02ee0000000300000007006e021a0000
000300000008003003180000000300000009001c0528000000030000000d
0e0605440001000000000000010d134a0001000000000001000b14570001
0000000000020007148e0001000000000003002014950001000000000004
000b14570001000000000005000c14b50001000000000006000e14c10001
000000000007003714570001000000000008001813510001000000000009
000e14cf000100000000000d070314dd0003000104030002000c1be00003
00010405000200101bf00003000104060002000c1c000003000104070002
00101c0c000300010408000200101c1c0003000104090000021e030a0003
0001040900010016021a0003000104090002000e02880003000104090003
0040029600030001040900040016021a0003000104090005001802d60003
000104090006001c02ee0003000104090007006e021a0003000104090008
003003180003000104090009001c0528000300010409000d0e181c2c0003
0001040a0002000c1be000030001040b000200102a4400030001040c0002
000c1be000030001040e0002000c2a540003000104100002000e2a640003
00010413000200122a720003000104140002000c1be00003000104150002
00101be00003000104160002000c1be00003000104190002000e2a840003
0001041b000200102a5400030001041d0002000c1be000030001041f0002
000c1be00003000104240002000e2a9200030001042a0002000e2aa00003
0001042d0002000e2aae00030001080a0002000c1be00003000108160002
000c1be0000300010c0a0002000c1be0000300010c0c0002000c1be000a9
0020003200300031003700200054006800650020004d006f006e006f0074
00790070006500200043006f00720070006f0072006100740069006f006e
002e00200041006c006c0020005200690067006800740073002000520065
007300650072007600650064002e0020000d000d00480065006200720065
00770020004f00700065006e00540079007000650020004c00610079006f
007500740020006c006f00670069006300200063006f0070007900720069
006700680074002000a90020003200300030003300200026002000320030
00300037002c002000520061006c00700068002000480061006e0063006f
0063006b002000260020004a006f0068006e00200048007500640073006f
006e002e002000540068006900730020006c00610079006f007500740020
006c006f00670069006300200066006f00720020004200690062006c0069
00630061006c00200048006500620072006500770020006900730020006f
00700065006e00200073006f007500720063006500200073006f00660074
007700610072006500200075006e00640065007200200074006800650020
004d004900540020004c006900630065006e00730065003b002000730065
006500200065006d0062006500640064006500640020006c006900630065
006e007300650020006400650073006300720069007000740069006f006e
00200066006f0072002000640065007400610069006c0073002e0043006f
007500720069006500720020004e00650077002000690073002000610020
00740072006100640065006d00610072006b0020006f0066002000540068
00650020004d006f006e006f007400790070006500200043006f00720070
006f0072006100740069006f006e002e0052006500670075006c00610072
004d006f006e006f0074007900700065003a0043006f0075007200690065
00720020004e0065007700200028004d006900630072006f0073006f0066
0074002900560065007200730069006f006e00200036002e003900320043
006f00750072006900650072004e0065007700500053004d005400a90020
003200300031003700200054006800650020004d006f006e006f00740079
0070006500200043006f00720070006f0072006100740069006f006e002e
00200041006c006c00200052006900670068007400730020005200650073
00650072007600650064002e0020000d000a000d000a0048006500620072
006500770020004f00700065006e00540079007000650020004c00610079
006f007500740020006c006f00670069006300200063006f007000790072
0069006700680074002000a9002000320030003000330020002600200032
003000300037002c002000520061006c00700068002000480061006e0063
006f0063006b002000260020004a006f0068006e00200048007500640073
006f006e002e002000540068006900730020006c00610079006f00750074
0020006c006f00670069006300200066006f00720020004200690062006c
006900630061006c00200048006500620072006500770020006900730020
006f00700065006e00200073006f007500720063006500200073006f0066
0074007700610072006500200075006e0064006500720020007400680065
0020004d004900540020004c006900630065006e00730065003b00200073
0065006500200065006d0062006500640064006500640020006c00690063
0065006e007300650020006400650073006300720069007000740069006f
006e00200066006f0072002000640065007400610069006c0073002e0048
006f00770061007200640020004b006500740074006c00650072004d0069
00630072006f0073006f0066007400200073007500700070006c00690065
006400200066006f006e0074002e00200059006f00750020006d00610079
00200075007300650020007400680069007300200066006f006e00740020
0074006f0020006300720065006100740065002c00200064006900730070
006c00610079002c00200061006e00640020007000720069006e00740020
0063006f006e00740065006e00740020006100730020007000650072006d
0069007400740065006400200062007900200074006800650020006c0069
00630065006e007300650020007400650072006d00730020006f00720020
007400650072006d00730020006f00660020007500730065002c0020006f
006600200074006800650020004d006900630072006f0073006f00660074
002000700072006f0064007500630074002c002000730065007200760069
00630065002c0020006f007200200063006f006e00740065006e00740020
0069006e0020007700680069006300680020007400680069007300200066
006f006e0074002000770061007300200069006e0063006c007500640065
0064002e00200059006f00750020006d006100790020006f006e006c0079
002000280069002900200065006d00620065006400200074006800690073
00200066006f006e007400200069006e00200063006f006e00740065006e
00740020006100730020007000650072006d006900740074006500640020
00620079002000740068006500200065006d00620065006400640069006e
00670020007200650073007400720069006300740069006f006e00730020
0069006e0063006c007500640065006400200069006e0020007400680069
007300200066006f006e0074003b00200061006e00640020002800690069
0029002000740065006d0070006f0072006100720069006c007900200064
006f0077006e006c006f006100640020007400680069007300200066006f
006e007400200074006f002000610020007000720069006e007400650072
0020006f00720020006f00740068006500720020006f0075007400700075
0074002000640065007600690063006500200074006f002000680065006c
00700020007000720069006e007400200063006f006e00740065006e0074
002e00200041006e00790020006f00740068006500720020007500730065
002000690073002000700072006f0068006900620069007400650064002e
000d000d00540068006500200066006f006c006c006f00770069006e0067
0020006c006900630065006e00730065002c002000620061007300650064
0020006f006e00200074006800650020004d004900540020006c00690063
0065006e00730065002000280068007400740070003a002f002f0065006e
002e00770069006b006900700065006400690061002e006f00720067002f
00770069006b0069002f004d00490054005f004c006900630065006e0073
00650029002c0020006100700070006c00690065007300200074006f0020
0074006800650020004f00700065006e00540079007000650020004c0061
0079006f007500740020006c006f00670069006300200066006f00720020
004200690062006c006900630061006c0020004800650062007200650077
0020201c004c00610079006f007500740020004c006f006700690063201d
0020006100730020006a006f0069006e0074006c00790020006400650076
0065006c006f007000650064002000620079002000520061006c00700068
002000480061006e0063006f0063006b00200061006e00640020004a006f
0068006e00200048007500640073006f006e002e0020000d000d00500065
0072006d0069007300730069006f006e0020006900730020006800650072
0065006200790020006700720061006e007400650064002c002000660072
006500650020006f00660020006300680061007200670065002c00200074
006f00200061006e007900200070006500720073006f006e0020006f0062
007400610069006e0069006e00670020006100200063006f007000790020
006f006600200074006800650020004f00700065006e0054007900700065
0020004c00610079006f007500740020006c006f00670069006300200066
006f00720020004200690062006c006900630061006c0020004800650062
00720065007700200061006e00640020006100730073006f006300690061
00740065006400200064006f00630075006d0065006e0074006100740069
006f006e002000660069006c00650073002000280074006800650020201c
004c00610079006f007500740020004c006f00670069006300200053006f
006600740077006100720065201d0029002c00200074006f002000640065
0061006c00200069006e00200074006800650020004c00610079006f0075
00740020004c006f00670069006300200053006f00660074007700610072
006500200077006900740068006f00750074002000720065007300740072
0069006300740069006f006e002c00200069006e0063006c007500640069
006e006700200077006900740068006f007500740020006c0069006d0069
0074006100740069006f006e002000740068006500200072006900670068
0074007300200074006f0020007500730065002c00200063006f00700079
002c0020006d006f0064006900660079002c0020006d0065007200670065
002c0020007000750062006c006900730068002c00200064006900730074
007200690062007500740065002c0020007300750062006c006900630065
006e00730065002c00200061006e0064002f006f0072002000730065006c
006c00200063006f00700069006500730020006f00660020007400680065
0020004c00610079006f007500740020004c006f00670069006300200053
006f006600740077006100720065002c00200061006e006400200074006f
0020007000650072006d0069007400200070006500720073006f006e0073
00200074006f002000770068006f006d00200074006800650020004c0061
0079006f007500740020004c006f00670069006300200053006f00660074
00770061007200650020006900730020006600750072006e006900730068
0065006400200074006f00200064006f00200073006f002c002000730075
0062006a00650063007400200074006f002000740068006500200066006f
006c006c006f00770069006e006700200063006f006e0064006900740069
006f006e0073003a000d000d005400680065002000610062006f00760065
00200063006f00700079007200690067006800740020006e006f00740069
0063006500200061006e0064002000740068006900730020007000650072
006d0069007300730069006f006e0020006e006f00740069006300650020
007300680061006c006c00200062006500200069006e0063006c00750064
0065006400200069006e00200061006c006c00200063006f007000690065
00730020006f00720020007300750062007300740061006e007400690061
006c00200070006f007200740069006f006e00730020006f006600200074
006800650020004c00610079006f007500740020004c006f006700690063
00200053006f006600740077006100720065002e000d000d005400480045
00200053004f004600540057004100520045002000490053002000500052
004f0056004900440045004400200027004100530020004900530027002c
00200057004900540048004f00550054002000570041005200520041004e
005400590020004f004600200041004e00590020004b0049004e0044002c
002000450058005000520045005300530020004f005200200049004d0050
004c004900450044002c00200049004e0043004c005500440049004e0047
00200042005500540020004e004f00540020004c0049004d004900540045
004400200054004f0020005400480045002000570041005200520041004e
00540049004500530020004f00460020004d00450052004300480041004e
0054004100420049004c004900540059002c0020004600490054004e0045
0053005300200046004f0052002000410020005000410052005400490043
0055004c0041005200200050005500520050004f0053004500200041004e
00440020004e004f004e0049004e004600520049004e00470045004d0045
004e0054002e00200049004e0020004e004f0020004500560045004e0054
0020005300480041004c004c002000540048004500200041005500540048
004f005200530020004f005200200043004f005000590052004900470048
005400200048004f004c00440045005200530020004200450020004c0049
00410042004c004500200046004f005200200041004e005900200043004c
00410049004d002c002000440041004d00410047004500530020004f0052
0020004f00540048004500520020004c0049004100420049004c00490054
0059002c0020005700480045005400480045005200200049004e00200041
004e00200041004300540049004f004e0020004f004600200043004f004e
00540052004100430054002c00200054004f005200540020004f00520020
004f00540048004500520057004900530045002c00200041005200490053
0049004e0047002000460052004f004d002c0020004f005500540020004f
00460020004f005200200049004e00200043004f004e004e004500430054
0049004f004e00200057004900540048002000540048004500200053004f
0046005400570041005200450020004f0052002000540048004500200055
005300450020004f00520020004f00540048004500520020004400450041
004c0049004e0047005300200049004e002000540048004500200053004f
004600540057004100520045002e000da9203230313720546865204d6f6e
6f7479706520436f72706f726174696f6e2e20416c6c2052696768747320
52657365727665642e200d0d486562726577204f70656e54797065204c61
796f7574206c6f67696320636f7079726967687420a92032303033202620
323030372c2052616c70682048616e636f636b2026204a6f686e20487564
736f6e2e2054686973206c61796f7574206c6f67696320666f7220426962
6c6963616c20486562726577206973206f70656e20736f7572636520736f
66747761726520756e64657220746865204d4954204c6963656e73653b20
73656520656d626564646564206c6963656e736520646573637269707469
6f6e20666f722064657461696c732e436f7572696572204e657720697320
612074726164656d61726b206f6620546865204d6f6e6f7479706520436f
72706f726174696f6e2e526567756c61724d6f6e6f747970653a436f7572
696572204e657720284d6963726f736f66742956657273696f6e20362e39
32436f75726965724e657750534d54486f77617264204b6574746c65724d
6963726f736f667420737570706c69656420666f6e742e20596f75206d61
7920757365207468697320666f6e7420746f206372656174652c20646973
706c61792c20616e64207072696e7420636f6e74656e7420617320706572
6d697474656420627920746865206c6963656e7365207465726d73206f72
207465726d73206f66207573652c206f6620746865204d6963726f736f66
742070726f647563742c20736572766963652c206f7220636f6e74656e74
20696e207768696368207468697320666f6e742077617320696e636c7564
65642e20596f75206d6179206f6e6c792028692920656d62656420746869
7320666f6e7420696e20636f6e74656e74206173207065726d6974746564
2062792074686520656d62656464696e67207265737472696374696f6e73
20696e636c7564656420696e207468697320666f6e743b20616e64202869
69292074656d706f726172696c7920646f776e6c6f616420746869732066
6f6e7420746f2061207072696e746572206f72206f74686572206f757470
75742064657669636520746f2068656c70207072696e7420636f6e74656e
742e20416e79206f74686572207573652069732070726f68696269746564
2e0d0d54686520666f6c6c6f77696e67206c6963656e73652c2062617365
64206f6e20746865204d4954206c6963656e73652028687474703a2f2f65
6e2e77696b6970656469612e6f72672f77696b692f4d49545f4c6963656e
7365292c206170706c69657320746f20746865204f70656e54797065204c
61796f7574206c6f67696320666f72204269626c6963616c204865627265
7720d24c61796f7574204c6f676963d3206173206a6f696e746c79206465
76656c6f7065642062792052616c70682048616e636f636b20616e64204a
6f686e20487564736f6e2e200d0d5065726d697373696f6e206973206865
72656279206772616e7465642c2066726565206f66206368617267652c20
746f20616e7920706572736f6e206f627461696e696e67206120636f7079
206f6620746865204f70656e54797065204c61796f7574206c6f67696320
666f72204269626c6963616c2048656272657720616e64206173736f6369
6174656420646f63756d656e746174696f6e2066696c6573202874686520
d24c61796f7574204c6f67696320536f667477617265d3292c20746f2064
65616c20696e20746865204c61796f7574204c6f67696320536f66747761
726520776974686f7574207265737472696374696f6e2c20696e636c7564
696e6720776974686f7574206c696d69746174696f6e2074686520726967
68747320746f207573652c20636f70792c206d6f646966792c206d657267
652c207075626c6973682c20646973747269627574652c207375626c6963
656e73652c20616e642f6f722073656c6c20636f70696573206f66207468
65204c61796f7574204c6f67696320536f6674776172652c20616e642074
6f207065726d697420706572736f6e7320746f2077686f6d20746865204c
61796f7574204c6f67696320536f667477617265206973206675726e6973
68656420746f20646f20736f2c207375626a65637420746f207468652066
6f6c6c6f77696e6720636f6e646974696f6e733a0d0d5468652061626f76
6520636f70797269676874206e6f7469636520616e642074686973207065
726d697373696f6e206e6f74696365207368616c6c20626520696e636c75
64656420696e20616c6c20636f70696573206f72207375627374616e7469
616c20706f7274696f6e73206f6620746865204c61796f7574204c6f6769
6320536f6674776172652e0d0d54484520534f4654574152452049532050
524f564944454420274153204953272c20574954484f5554205741525241
4e5459204f4620414e59204b494e442c2045585052455353204f5220494d
504c4945442c20494e434c5544494e4720425554204e4f54204c494d4954
454420544f205448452057415252414e54494553204f46204d4552434841
4e544142494c4954592c204649544e45535320464f522041205041525449
43554c415220505552504f534520414e44204e4f4e494e4652494e47454d
454e542e20494e204e4f204556454e54205348414c4c2054484520415554
484f5253204f5220434f5059524947485420484f4c44455253204245204c
4941424c4520464f5220414e5920434c41494d2c2044414d41474553204f
52204f54484552204c494142494c4954592c205748455448455220494e20
414e20414354494f4e204f4620434f4e54524143542c20544f5254204f52
204f54484552574953452c2041524953494e472046524f4d2c204f555420
4f46204f5220494e20434f4e4e454354494f4e2057495448205448452053
4f465457415245204f522054484520555345204f52204f54484552204445
414c494e475320494e2054484520534f4654574152452e0d004e006f0072
006d0061006c006e0079006f00620079010d0065006a006e00e9006e006f
0072006d0061006c005300740061006e0064006100720064039a03b103bd
03bf03bd03b903ba03ac004d006900630072006f0073006f006600740020
0073007500700070006c00690065006400200066006f006e0074002e0020
0059006f00750020006d0061007900200075007300650020007400680069
007300200066006f006e007400200074006f002000630072006500610074
0065002c00200064006900730070006c00610079002c00200061006e0064
0020007000720069006e007400200063006f006e00740065006e00740020
006100730020007000650072006d00690074007400650064002000620079
00200074006800650020006c006900630065006e00730065002000740065
0072006d00730020006f00720020007400650072006d00730020006f0066
0020007500730065002c0020006f006600200074006800650020004d0069
00630072006f0073006f00660074002000700072006f0064007500630074
002c00200073006500720076006900630065002c0020006f007200200063
006f006e00740065006e007400200069006e002000770068006900630068
0020007400680069007300200066006f006e007400200077006100730020
0069006e0063006c0075006400650064002e00200059006f00750020006d
006100790020006f006e006c0079002000280069002900200065006d0062
006500640020007400680069007300200066006f006e007400200069006e
00200063006f006e00740065006e00740020006100730020007000650072
006d00690074007400650064002000620079002000740068006500200065
006d00620065006400640069006e00670020007200650073007400720069
006300740069006f006e007300200069006e0063006c0075006400650064
00200069006e0020007400680069007300200066006f006e0074003b0020
0061006e006400200028006900690029002000740065006d0070006f0072
006100720069006c007900200064006f0077006e006c006f006100640020
007400680069007300200066006f006e007400200074006f002000610020
007000720069006e0074006500720020006f00720020006f007400680065
00720020006f007500740070007500740020006400650076006900630065
00200074006f002000680065006c00700020007000720069006e00740020
0063006f006e00740065006e0074002e00200041006e00790020006f0074
0068006500720020007500730065002000690073002000700072006f0068
006900620069007400650064002e000d000a000d000a0054006800650020
0066006f006c006c006f00770069006e00670020006c006900630065006e
00730065002c0020006200610073006500640020006f006e002000740068
00650020004d004900540020006c006900630065006e0073006500200028
0068007400740070003a002f002f0065006e002e00770069006b00690070
0065006400690061002e006f00720067002f00770069006b0069002f004d
00490054005f004c006900630065006e007300650029002c002000610070
0070006c00690065007300200074006f00200074006800650020004f0070
0065006e00540079007000650020004c00610079006f007500740020006c
006f00670069006300200066006f00720020004200690062006c00690063
0061006c00200048006500620072006500770020201c004c00610079006f
007500740020004c006f006700690063201d0020006100730020006a006f
0069006e0074006c007900200064006500760065006c006f007000650064
002000620079002000520061006c00700068002000480061006e0063006f
0063006b00200061006e00640020004a006f0068006e0020004800750064
0073006f006e002e0020000d000a000d000a005000650072006d00690073
00730069006f006e00200069007300200068006500720065006200790020
006700720061006e007400650064002c002000660072006500650020006f
00660020006300680061007200670065002c00200074006f00200061006e
007900200070006500720073006f006e0020006f0062007400610069006e
0069006e00670020006100200063006f007000790020006f006600200074
006800650020004f00700065006e00540079007000650020004c00610079
006f007500740020006c006f00670069006300200066006f007200200042
00690062006c006900630061006c00200048006500620072006500770020
0061006e00640020006100730073006f0063006900610074006500640020
0064006f00630075006d0065006e0074006100740069006f006e00200066
0069006c00650073002000280074006800650020201c004c00610079006f
007500740020004c006f00670069006300200053006f0066007400770061
00720065201d0029002c00200074006f0020006400650061006c00200069
006e00200074006800650020004c00610079006f007500740020004c006f
00670069006300200053006f006600740077006100720065002000770069
00740068006f007500740020007200650073007400720069006300740069
006f006e002c00200069006e0063006c007500640069006e006700200077
006900740068006f007500740020006c0069006d00690074006100740069
006f006e0020007400680065002000720069006700680074007300200074
006f0020007500730065002c00200063006f00700079002c0020006d006f
0064006900660079002c0020006d0065007200670065002c002000700075
0062006c006900730068002c002000640069007300740072006900620075
00740065002c0020007300750062006c006900630065006e00730065002c
00200061006e0064002f006f0072002000730065006c006c00200063006f
00700069006500730020006f006600200074006800650020004c00610079
006f007500740020004c006f00670069006300200053006f006600740077
006100720065002c00200061006e006400200074006f0020007000650072
006d0069007400200070006500720073006f006e007300200074006f0020
00770068006f006d00200074006800650020004c00610079006f00750074
0020004c006f00670069006300200053006f006600740077006100720065
0020006900730020006600750072006e0069007300680065006400200074
006f00200064006f00200073006f002c0020007300750062006a00650063
007400200074006f002000740068006500200066006f006c006c006f0077
0069006e006700200063006f006e0064006900740069006f006e0073003a
000d000a000d000a005400680065002000610062006f0076006500200063
006f00700079007200690067006800740020006e006f0074006900630065
00200061006e0064002000740068006900730020007000650072006d0069
007300730069006f006e0020006e006f0074006900630065002000730068
0061006c006c00200062006500200069006e0063006c0075006400650064
00200069006e00200061006c006c00200063006f00700069006500730020
006f00720020007300750062007300740061006e007400690061006c0020
0070006f007200740069006f006e00730020006f00660020007400680065
0020004c00610079006f007500740020004c006f00670069006300200053
006f006600740077006100720065002e000d000a000d000a005400480045
00200053004f004600540057004100520045002000490053002000500052
004f0056004900440045004400200027004100530020004900530027002c
00200057004900540048004f00550054002000570041005200520041004e
005400590020004f004600200041004e00590020004b0049004e0044002c
002000450058005000520045005300530020004f005200200049004d0050
004c004900450044002c00200049004e0043004c005500440049004e0047
00200042005500540020004e004f00540020004c0049004d004900540045
004400200054004f0020005400480045002000570041005200520041004e
00540049004500530020004f00460020004d00450052004300480041004e
0054004100420049004c004900540059002c0020004600490054004e0045
0053005300200046004f0052002000410020005000410052005400490043
0055004c0041005200200050005500520050004f0053004500200041004e
00440020004e004f004e0049004e004600520049004e00470045004d0045
004e0054002e00200049004e0020004e004f0020004500560045004e0054
0020005300480041004c004c002000540048004500200041005500540048
004f005200530020004f005200200043004f005000590052004900470048
005400200048004f004c00440045005200530020004200450020004c0049
00410042004c004500200046004f005200200041004e005900200043004c
00410049004d002c002000440041004d00410047004500530020004f0052
0020004f00540048004500520020004c0049004100420049004c00490054
0059002c0020005700480045005400480045005200200049004e00200041
004e00200041004300540049004f004e0020004f004600200043004f004e
00540052004100430054002c00200054004f005200540020004f00520020
004f00540048004500520057004900530045002c00200041005200490053
0049004e0047002000460052004f004d002c0020004f005500540020004f
00460020004f005200200049004e00200043004f004e004e004500430054
0049004f004e00200057004900540048002000540048004500200053004f
0046005400570041005200450020004f0052002000540048004500200055
005300450020004f00520020004f00540048004500520020004400450041
004c0049004e0047005300200049004e002000540048004500200053004f
004600540057004100520045002e000d000a004e006f0072006d00610061
006c0069004e006f0072006d00e1006c006e0065004e006f0072006d0061
006c0065005300740061006e00640061006100720064041e0431044b0447
043d044b0439004e0061007600610064006e006f0074006801b001a10300
006e00670041007200720075006e00740061000000>
<ba0054ffc003c0b2553340b803c0b23a3340b803c0b30e243280b803c0b3
0b0d3280b803c0b209333f412f03c0007003c000af03c000cf03c0000400
5f03c0007f03c000af03c00003001f03c0003f03c0005f03c0008f03c000
0400a003bb00b003bb00c003bb00d003bb000400a003ba00b003ba00c003
ba00d003ba0004003f03b8000103b703b6b2241f40b803b4b3192432ef41
1a03b300ff03b300020391038b0021001f035e038b0021001f035f038b00
21001f038f038b002a001f0390038b002a001f038d038bb23b1f0f410903
8b000100ef038b00ff038b0002ffc0039cb2474f32b9ffc0039cb2373c32
b9ffc0039bb2474f32b9ffc0039bb3373c321f4119039c00b0039c00c003
9c00d0039c000400ef039c0001001f039b00b0039b00c0039b00d0039b00
0400ef039b0001ffc0039cb2212932b9ffc0039bb2212932b9ffc0039cb2
0f1632b9ffc0039bb20f1632410a035903560032001f035803560032001f
03570356b2321fbf41600355000100af0355000100a003540001008f0354
0001005f03540001004f03540001007f03550001007f03540001006f0355
0001006f03540001003f03550001003f03540001003f03540001002f0354
0001002f03540001001f03540001000f03540001035203530029001f0351
034a0029001f035003450025001f034f034a0025001f034e03490025001f
034d03470025001f034c034a0018001f034b03450012001f034a03460018
001f034903450044001f034803460044001f03470346b2441f3041700346
005f03450002000f0344001f0344002f0344003f03440004000f0344008f
034400a0034400df03440004005f0344007f034400cf03440003002f0344
0001034403440343034303410341000f0340001f0340002f034000030340
0340033f033f033e033e000f033d0001033d033d0040033c0001001f033c
002f033c003f033c004f033c005f033c00c0033c00d0033c0007033c033c
00200335003003350040033500500335006003350005000f032c002f032c
008f032c0003032c032d0024001f0321028c0014001f0320028c0014001f
031f028b001e001f031e028bb21e1f40410902b4005002b4006002b40070
02b4008002b4b205120f4114028b001f028b002f028b004f028b005f028b
007f028b009f028b00af028b0008003f028b004f028b400b023f023f034f
024f030440b80329b33c3c3240b80329b333363240b80329b31c1d3240b8
0329b30c1a320f41720329007f0329009f03290003000f0329002f032900
3f03290003000f0329001f0329000200af032700bf032700cf032700df03
270004000f0327004f0327005f0327008f0327009f032700af0327000600
bf032700ef032700ff03270003006f0327007f0327008f0327009f032700
af03270005000f0327001f0327002f0327004f0327005f03270005000f03
28002f0328005f0328007f032800af0328000500df03280001000f032700
0f032800500328008f032800bf0328000500df03220001008f0322000100
3f0322004f03220002002f0322003f03220002000f0322001f0322b20209
0fb8028bb2013a0f413f028c004f028c0002000f028d002f028d003f028d
0003001f028b0001000f028b0001002f028b0001000f028c002f028c003f
028c004f028c008f028c00af028c000603b903b903290329032703270328
0328032203220321032103200320031f031f031e031e02900290028f028f
028e028e028d028d028c028c028b028b4014af2bbf2b025f356f357f358f
359f35af35bf3507bb0261026102600260400a0016160000001211081a41
100204005c000d01fa005c000d01ad005c000d0172005c000d0140005c00
0d0117401a5c0de45c0dc85c0d995c0d955c0d585c0d4e5c0d465c0d2f5c
0db8016240172b0ddb2b0d902b0d562b0d362b0d352b0d332b0d292b0d41
1101590157000d00be0157000d00420157000d00320157000d0022015700
0d001d0157b20d0009bc015b00210801001f0127b421811fe521b80401b2
1f8321b80801b21f8221b80401b21f5b21b80401b21f3b21b80801b61f30
21671f2c21b80401b21f2621b80401b21f2421bd0401001f005501ac0007
012b402c07c9075f07400739072e072d072807270723071f071408120810
080e080c080a080808060804080208000814b8ffe0402b00000100140610
000001000604000001000410000001001002000001000200000001000002
010802004a00b013034b024b5342014bb0c063004b6220b0f65323b8010a
515ab005234201b0124b004b544218b0372b4bb807ff52b0382b4bb00950
5b58b101018e59b0382bb00288b801005458b801ffb101018e851bb01243
58b90001012c858d1bb90001012c858d59594bb0095058b104018d8d5900
16763f183f123e113946443e113946443e113946443e113946443e113946
60443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b
2b2b18b0372b1db0964b5358b0aa1d59b0324b5358b0ff1d594bb8040153
205c58b9023802364544b90237023645445958b90a800238455258b90238
0a804459594bb8040153205c58b9002002384544b90021023845445958b9
0a800020455258b900200a804459594bb8040153205c58b9001e02374544
b90025023745445958b90a80001e455258b9001e0a804459594bb8040153
205c58b13d214544b1212145445958b90a80003d455258b9003d0a804459
594bb8040153205c58b167214544b1212145445958b90a800067455258b9
00670a804459594bb8030153205c58b121214544b1212145445958b907e0
0021455258b9002107e04459594bb8030153205c58b121214544b11e2145
445958b907e00021455258b9002107e04459594bb8030153205c58b12121
4544b1252145445958b907e00021455258b9002107e04459592b2b2b2b2b
2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b01b9004a01d6b1437a456523456023456560234560b08b76
6818b080622020b9004301d64565234520b003266062636820b003266165
b801d6236544b043234420b14a7a4565234520b003266062636820b00326
6165b07a236544b04a2344b1007a455458b17a406544b24a404a45236144
59b347612aad456523456023456560234560b089766818b080622020b12a
614565234520b003266062636820b003266165b061236544b02a234420b1
47ad4565234520b003266062636820b003266165b0ad236544b0472344b1
00ad455458b1ad406544b247404745236144594b5342014b5058b1080042
59435c58b108004259b3020b0a124358601b2159421610703eb0124358b9
3b21187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d
411bba04000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba
01a80400000b2b59b0102342b01123420018456944456944737318456944
456944456944456944456944456944456944456944456944456944456944
4569444569444569444569447373737373745e735e737373737473737473
737374757373742b2b2b2b007300737400435c58410c001f028b001f028d
0002000f028b000f028c000f028d000373735974002b2b2b2b2b73750045
694473744569447345694445694445694473456944456944456944757473
7301732b2b2b2b2b2b2b2b2b2b2b2b007373737373737373737373737373
7373732b2b2b012b002b012b002b017375007375012b2b002b2b0073752b
2b2b2b2b2b0173012b012b73017300737374752b2b2b2b2b2b0000>
[11515 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

2 0 3 <> PBAAAA+CourierNewPSMT AddT42Char 
2 458 11 <0001025dfefc03af04e7001b00504027290c2a100205170e130a12160606
0510171613153e13054d090913a00e24000010000200191ccaba01050018
0119852b4e10f45d4dfdf43c10ed10e4003f3c3f3c111239390111123939
3130015d0134121237363332161514070602151412171615140623222726
0226025d3caa270c0e1219076e5e5e6e0719120e0c25a84001f273010201
52230b18110a0ccafeb8a4a5feb8c90c0a11190b22014afe>PBAAAA+CourierNewPSMT AddT42Char 
2 632 12 <0001012dfefc027f04e7001b005040290902091a1902191a0405170e1309
1206171610050613054d0a0a153e13a00e240f001f0002001a1da4ba014d
00180119852b4e10f65d4dfdf4e43c10ed003f3c3f3c1239390111123939
3130015d0114020207062322263534373612353402272635343633321716
1216027f3caa270c0e1219076e5e5e6e0719120e0c25a84001f173fefffe
ad220c19110a0cc90148a4a50148ca0c0a11180b22feb6fe>PBAAAA+CourierNewPSMT AddT42Char 
2 806 21 <000100ab000003d70505002b0137b102582b584010290d112504220a1b1b
143d22050b0500b9015b000a002ffdcc333fed332f1112173930311bb900
16ffde402c1b2434480f7a0e862786288629a628a629bb0cb42a090d120a
16350c382a0429232a1e2b14271e28230c140bb8ffec4019ea12ed16fa12
fd16042808282a121842552b2a121842550802ba02a9000501dcb7010505
0201be0805bd01e40009000b010d0001015bb409090a0c1ab801f9b4143d
220500bb015b000b0002015bb408e1113d25410d026f002d0017015b001e
010d000b026d002c019101060018012c852b10f6f4ed10f6edf4ed10ed00
3feded3f3c10fde410ed0110fd3d12392f180010f5f4c4012b2b31300043
79401c1f2412181625202615211840001323114001171f14400112241440
012b2b012b2b2b2b8181005d38383838383838007101712b593721353436
3332161515213524373e0235342623220607060706232226353436363332
1615140606070007fd028518131218fcd40100f271541fae7b6eaa190609
0c10111769b9619de2265b76fed8ba54211e1a1a1e757ce6ee6f684f286c
a67e5d18070a171030a45eda8a3a617374fedca1>PBAAAA+CourierNewPSMT AddT42Char 
2 1246 37 <00030057000004590492001c00270032016640bdaf2aab2bc60ac50bd70a
058f2a8a2b9d209b259f2bae25067b247f25732b752d8f0a8f148b248f25
08551065107f0a7010701170127013074a204d2149244b2b860e05320f3b
203a213a253f2a3b2b450f471008092f19201c211b251b2a1b2f230f2a2b
087910bc24c72f0346204925762086208a309520a520b520082c081c1619
2b00001d160208052b01011d0830200e0323280e3220271d292616272608
1e1d1e313232160802160823250f0c1f0c2f0c3f0c4f0c5f0c6f0c070cb8
018340292d2500111011020f119011c011d011e011f01106111a3427281e
010000100002f000010019334a7918b8012c852b4e10f45d713c4dfd3c4e
10f65d714dfdf65ded003f3f12392f3cfd3c10ed10ed1112391239011112
17390010ed0110f5d43c0010ed0110f5d43c31304379401e242c12140a0b
13262b252a142d2d01250a232d012c12292d00240b262d01002b2b012b2b
2b2b81818100715d017171715d5d5d5d2511232226353436332132161514
071616151406062321222635343633132132373636353426232111213236
363534262623210100711e1a1a1e02109dc5a5837a50a561fd8c1e1a1a1e
c501295f4f3d449477feb301a951783e599e8bfed25403ea17131317b57a
9a5f2f9c5e548b62181213170236231c6a374f85fc16486a3940783e>PBAAAA+CourierNewPSMT AddT42Char 
2 1754 39 <0002009e000004760492001d002c010c40218e0a890b8812891389148c15
8f1f8f208a218d278a298f2a0c0b28012720291c21b8ffe040099927b521
024308171db802a4400b1a29001a1a1d001d170802b802a4403505290105
0502011d08112e0f1f1e16161d1e17082b1e0909021e080224260f0f010f
0f200f020f1a2e2c1e1e0120004f000200192dbb013901080018012c852b
4e10f45d3c4dfd3c4e10f65d714ded003fed3c10ed3fed3c10ed01111239
0010fd3d12392f180110f5f4c40010fd3d12392f180110f5f4c431304379
4034202a0a150e0f0d0f0c0f0b0f04062625272528252925040613121412
020621252a0a242e012015232e01250f2b2e0122121f2e00002b2b012b2b
2b2a2a2a8181005d38383801715d25112322263534363321321617161716
151514060706232122263534363333213236363535342726272626232101
1d471e1a1a1e01c46aaf2e4f291d72856382fe3c1e1a1a1e9b01316ab95d
192442248c51fecf5403ea1713131758385f6a4d697481f25a4218121317
8ac15e984e3d59502c49>PBAAAA+CourierNewPSMT AddT42Char 
2 2154 44 <000100e5000003e90492001f00d7402d2f042e05230c200d201420152f1c
2f1e3e05330c301430153f1c3f1e4e05430c401440154b1c4f1d4f1e1509
0fb802a4400b0c36100c0c0f101d09191fb802a4400b1c36001c1c1f001d
190802b802a4400b053601050502011d081812b802a44027153611151512
111d181f261912261918020226080f260909080800011e114f1001101920
8cdf182b4e10f45d3c4dfd3c003f3c10ed10ed3f3ced10ed10fd3d12392f
180110f5f4c40010fd3d12392f180110f5f4c40010fd3d12392f180110f5
f4c40010fd3d12392f180110f5f4c43130015d0111213216151406232122
263534363321112122263534363321321615140623029101201e1a1a1efd
6c1e1a1a1e0120fee01e1a1a1e02941e1a1a1e043efc1617131218181213
1703ea171313171713131700>PBAAAA+CourierNewPSMT AddT42Char 
2 2466 46 <0001005900000499049200420264405d182d18361a412433353337364721
5b4167216c4177217c418a408a4199409b41af41bb41cb33130f00363345
335734040f222b36463441355631c43fc340c041081b221b316922693194
34af2da936e822f92df9360a3242000031090fb802a4400b0c2b100c0c0f
101d09191fb802a4400e001c011c33201c1c1f201d192a30b802a4401620
2d902d02302d012d2d90312d2d30311d2a31000802b802a4400e00050105
3301050502011d081812b802a4400b152b11151512111d182923b802a440
50260f261f26302603262b22262623221d29222141344036043f42223100
12001e2122142121220021312204200130262a23262a292919312222201f
261919122618023837263e3f3f0808102640090800b8027ab42121180932
b80158b72042423100422632ba01a80022027a4017405031603170310300
314031503103e031f03102314137bb01580020003f013640114421200001
1e11001001f010011019434aba01540018012c852b4e10f45d713c4dfd3c
3c3c1910f41afd18f45d71711aedf4ed001112392f1a19ed1112392fed18
3f1aed3c103c103cfd3c3fed3c10ed103c103c103c103ced10ed11121739
872e2b435c58401900401e3c3f00401c373f004019323f0040172d3f0040
14283f002b2b2b2b2b5987057dc40011121739180810fd3d12392f180110
f15d2ff4c40010fd3d12392f180110f5f4c40010fd3d12392f180110f55d
f4c4000810fd3d12392f180110f12f5d71f4c40010fd3d12392f180110f5
5df4c40010fd3d12392f180110f5f4c4070e103c3cb10602435458b90022
ffe0b319243421b8ffe0b2192434002b2b593130015d71005d7101113332
161514062321222635343633331123222635343633213216151406232311
012322263534363333321615140623230116161716173332161514062323
02262701569b1f1a1a1ffea01e1a1a1e71711e1a1a1e01601f1a1a1f9b02
445c1f1a1a1ff71e1a1a1e22fe3267883f2460691f1a1a1fa284b48701ca
fe8a171312181812131703ea1713131717131317fdfb0205171313171713
1317fe632a7e7441f0171312180169cf2a00>PBAAAA+CourierNewPSMT AddT42Char 
2 3990 49 <0001002e000004810492002c016f4016080201091c191c02c702010b0106
1b1b01161b040b11b802a4400b0e29120e0e11121d0b252bb802a4400e00
280128292c28282b2c1d250a04b802a4400b073303070704031d0a1a14b8
02a4400b172b13171714131d1a241eb802a4402221331d21211e1d1d241b
020112011e1c1b141c1c1b011b00132b2625251e26242402b8027ab61b14
261b1a021cb8027a400a010b0a0a01081d1c1e01b8012c401b00002c4025
350f2c4f2c5f2c6f2c8f2cdf2c062c1a2e02031e121bb8027a4013125f13
6f138f13f013040f130113192d3a6b18b8012c852b4e10f4715d3c4ded10
fd3c4e10f65d2b3c4d10e6fd3c003f3c103c10ed3f3ced10ed3c10ed3c10
ed0111123939872e2b435c58400f010814283f0114111c3f0114101b3f01
2b2b2b59877dc4180010fd3d12392f180110f5f4c40010fd3d12392f1801
10f5f4c40010fd3d12392f180110f5f4c40010fd3d12392f180110f55df4
c40010fd3d12392f180110f5f4c431305d71005d71212301113332161514
062321222635343633331123222635343633330111232226353436332132
16151406232304026cfd959b1f1a1a1ffecb1f1a1a1f46711e1a1a1edc02
6c9b1e1a191f01361e1a1a1e470417fc3d171312181812131703ea171313
17fbe703c5171313171713131700>PBAAAA+CourierNewPSMT AddT42Char 
2 4484 51 <000200b30000045b04920023002d00f04018041a041b071e001f131b121f
251b351b451bb92b0a2a1227b8ffee4010751a841a0227082a08931a951f
02090fb802a4400b0c2b100c0c0f101d090802b802a4400b053601050502
011d081812b802a44031152b11151512111d182c122619180223001e2512
0f243f240224241809080829250f1c011c1a2f2d011e1110192ef67918b8
012c852b4e10f43c4dfd3c4e10f65d4ded003f3c12392f5d00435c58400f
24400b123f2440090f3f24400b0f3f2b2b2b593cfd3c3f3cfd3c10fd3d12
392f180110f5f4c40010fd3d12392f180110f5f4c40010fd3d12392f1801
10f5f4c43130015d38380071383801710111213216151406232122263534
363333112322263534363321321615140607060706232521323636353426
232101b001201e1a1a1efe1b1e1a1a1e71711e1a1a1e01e8addb47324b50
3a56fef9010c5da34baa82fed501e0fe74171312181812131703ea171313
17cc89518225381a135453783e639e00>PBAAAA+CourierNewPSMT AddT42Char 
2 4860 53 <00020058000004be0492002d003701a1b90021ffc4404e20213e2b141718
3e5b356631753103072b3a314a315a1a58317420742c78358d35a52aaa31
cf26d51fd320df26d52def26110f260931451f4621782c851f8a2c911fa2
1fab2cc820c921e62b0d1ebbfff80009000f02a4400b0c2b100c0c0f101d
090802b802a4400b053301050502011d081812b802a4403b152b11151512
111d182c1f202a2b2106222d2c231f2e0036261919122618022d001e2f2e
400b123f2e400b0f3f2e2e08182923262a2a090908081fba027a002d02a0
400d000037011e1033251c00260126b8015db57f1c8f1c021cb80128400d
0022015022a022d022f0220422b8021d400f114010012f10f01002101938
4a6c18b8012c852b4e10f45d713c4dfd5d71e45de45d10ed10fd3c3c10f6
ed003f3c103c10ed3c1112392f002b2b3cfd3c3fed3c10ed111239123901
111217390010fd3d12392f180110f5f4c40010fd3d12392f180110f5f4c4
0010fd3d12392f180110f5f4c431300138004bb012534bb024515a58b21f
0c20bafff40021fff4b42b0c35161fb8fff6b2342031b8ffea3838383838
383800385901715d005d012b2b0111333216151406232122263534363333
112322263534363321321615140607161617333216151406232302262725
33323636353426232101559b1f1a1a1ffea01e1a1a1e71711e1a1a1e01fc
9dd7859c5a808d401e1a1a1e709cab6ffef5e56eb351a979fecb020afe4a
171312181812131703ea17131317c77d5a9f353e9cf2171312180117be35
54506c385498>PBAAAA+CourierNewPSMT AddT42Char 
2 5436 54 <000100b9ffdf041404ad004400e2402a3d334c1b4f335d3377168616871a
891b8c3999420a4920464102911fa21fa941a842d517e617f517071bb8ff
f6b2131836b8ffde405f2b40293d3b1a180f05140001370e323023032e34
0f0d0003110b19263c3c341125430b20090942550b8b042e8b2734252143
030402270821090e26086037255f1e6f1e021e1a46142540312623264041
6f297f298f299f29af29052919459dba011f0018012c852b4e10f45d4de4
eded10ed4e10f65d4dfdfded003f3f3f3f10ed10ed10ed2b10fd11392fed
11121739111217390111123939121739111239313000383838015d00715d
013534363332161515140623222627262623220615141e02171617161615
140623222715140623222635353436333216171616333236353426272627
2627263534363332039317131317171312170105a3848ba42e4c6066ab41
5759e6c3db8317131218171312170105bb9e9eb746453098d15c5cd3adb0
043e1c1e1a1a1ed61e1a181b54868f613252331f111c1d278a5e90cb8930
1e1a1a1ee81f1a181b5c979e6c42671e151a2348488584be>PBAAAA+CourierNewPSMT AddT42Char 
2 6098 57 <00010010000004be0492002b017b40270700071830004c184a2b601d9210
d01df918f92b0aa800a81d022b180910425500180910425502b8ffe8b409
11425501b8ffe8b5091142550c14b802a4400e10103315101014151d0c15
16222ab802a4401c0026702602002610266026d026042626292b26262a2b
1d222b000b03b802a440186f07010f071f076f070307072902070703021d
0b02012119b802a440491d1d33181d1d19181d211817150201011e161514
161615182b00001e17181417171817162a262219262114260c03260b2221
210c0c0b02000108002b012b2630185018b018f0180418b8013e400b1702
262f155f15bf150315b8013eb3ff170117ba0183001602d0b32c456c18b8
0164852b10f4e65df45ded10f45ded5d003f3c3f3c103c103c10ed10ed10
ed10ed2f2f87052e2b877dc4872e182b877dc418000810fd3d12392f1801
10f12ff4c4000810fd3d12392f180110f12f5d71f4c4000810fd3d12392f
180110f12f5d71f4c4000810fd3d12392f180110f12ff4c42b2b2b2b3130
01715d212301232226263534363633213216161514060623230133012322
262635343636332132161615140606232302a575fe594117140d0d141701
3918130d0e1317a10186060181a018140d0e1318013818140d0e13184004
3e09150c0c150909150c0c1509fc1603ea09150c0c150909150c0c150900
>PBAAAA+CourierNewPSMT AddT42Char 
2 6608 68 <00020090ffdf045603800028003601624051aa07a41faa2e032607251f3b
047413771a761b8014851a9214951aab07a014a41aae2fb507bc0eb114b4
1ab91ecb0ef431150a0119012a01039a11941a027b2e8a2e9b2eaa0eab2e
c531d531e531082822b802ae401a252f21252522212228121d1317293621
0036290103330c092c36b801e0405a018828000a3321030b0921002c102c
702c032c293b0c0c28149c10211d073321030b0d00202021400d163f0f21
012f213f214f215f219f21af21bf21df2108211a38178f302106400d163f
6f069f06bf06df06040619372abb18b8012c852b4e10f45d012b4dfde64e
10f65d71012b3c4dfd3c003fed3feded12392fed2f5ded3fed3f3cf4ed11
12391217390111123939123911390010fd3d12392f180110f5f4c4313000
4bb019534bb024515a58bf0007fff80034fff00035fff00019fff4b31208
2e0838383838383859005d71004bb00b534bb014515a58bb001efff00013
ffc038385900715d015d2135062322263534363332161735342623220706
232226353437363736333216151133321615140623032626232207061514
16333236370358b7d097aae0d73a884f808062b1200910170a0e639c509f
b2701f1a1a1fc53b8449b7674e77726dbb63799a996f7ab60f1088456639
0a1812110a0f1a2a9d63fdd41713121801a211104f3b524c68575f00>PBAAAA+CourierNewPSMT AddT42Char 
2 7116 71 <0002007effdf04ab04e7001e002a00e1b6492a682a020802b802ae400e00
0501052f010505020122081e18b802ae40101b2f171b1b1817221e0a1622
28095d0ab80163b328210c16b8016340202221141e000c0b140700000001
171f09208001010f0101011a2c252180100110b8018cb32b2a8018b8012c
852b10f671ed4e10f65d714dfd3c3c103c003f3f3f103c10ede410ede4f4
1112393910fd3d12392f180110f5f4c40010fd3d12392f180110f55df4c4
31304bb016534bb024515a58b30e081208383859004bb00c534bb024515a
58b9002affecb2201427bafff80026ffe7b3230824193838383838385900
5d0111333216151406232335062322262635343636333217112322263534
36331334262322061514163332360402701f1a1a1fc592e172d17979d173
dc96701f1a1a1f70d89596d8d89695d804e7fb6d17131218a7c879e07778
df7ac801da18131218fcc8a0dcdca09fdddd>PBAAAA+CourierNewPSMT AddT42Char 
2 8214 76 <000200bd0000041605110003001c007f402a221932194019521963197419
841907130d10581414220d060c09580505220c161c19951515221c03c502
b80194b61c060d0c0a0001bb015f0003000201e0400e04040520154f1401
14191d517f182b4e10f45d3c4dfd3c10fd3cfd3c003f3c3ff6ed10ed0110
f5d43c0010ed0110f5d43c0010ed0110f5d43c3130015d01152335131121
3216151406232122263534363321112322263534363302907c7f014a1f1a
1a1ffd181e1a1a1e014af51e1b1a1f0511d9d9fe51fcf217131218181213
1702b91812131800>PBAAAA+CourierNewPSMT AddT42Char 
2 8432 79 <000100bb0000041404e70018005d4034621573158315030f090c58101022
09020805580101220812181595111122180009080a0001201110104f10bf
1003101919517f182b4e10f45d3c4dfd3c003f3c3fed0110f5d43c0010ed
0110f5d43c0010ed0110f5d43c3130015d01112132161514062321222635
3436332111232226353436330291014a1f1a1a1ffd181e1a1a1e014af21e
1b1a1f04e7fb6d1713121818121317043e1813121800>PBAAAA+CourierNewPSMT AddT42Char 
2 8604 81 <0001006c000004570380003801874037d506d50802c406c40802a308b206
b20803710780070263076408641b039b1ba506027b1fb301b402031c1f6a
1f0200010402021e081218b802ae40100f151f1502154619151518192212
292fb802ae400b2c5c302c2c2f302229110bb802ae400e000e010e460a0e
0e0b0a22112822b802ae40100025102502255c212525222122283832b802
ae400d3546313535323122323b380601ba01e00020016340131d21040729
28281212110a090a201adf190119b802a340103a002120319030a0300230
19394761182b4e10f45d3c4dfd3c10f45d3cfd3c003f3c103c103c3ffdf4
ed3fedfd3d12392f180110f5f4c40010fd3d12392f180110f55df4c40010
fd3d12392f180110f55df4c40010fd3d12392f180110f5f4c40010fd3d12
392f180110f55df4c4b10602435458b90001ffc0b31b243401b8ffe0b211
1a34002b2b593130437940141b1c05080708060802061c051a1f011b081d
1f01002b012b2a8181004bb01b534bb024515a58b21f1401b8ffdeb11b14
38383859007171715d0171715d5d5d011536363332171616151133321615
140623232226353436333311342623220607113332161514062321222635
3436333311232226353436330157588e59604f385b471e1a1a1ee11f1a1a
1f46826d537a715f1e1a1a1efeee1e1a1a1e5f471e1a1a1e03627f594429
1e8b49fdef17131218181213170203597b4385fdf1171312181812131702
b91813121800>PBAAAA+CourierNewPSMT AddT42Char 
2 9150 82 <00020091ffdf043c0380000b0017014840381216041614171603c901c90b
d502db05dd07d50b066b07691102650265046908690a6a0d6c1165136617
081521030f2109030b09070c2100b8ffc0b30f193f00b8ffc0b30e173f00
b8ffc0400d1535b000011000300060000300b802874018122106400f193f
06400e173f6f06bf06cf06e006f0060506b801e2b3182aad18b8012c852b
10f65d012b2bedfd5d712b012b2bed003f3f10ed10ed3130004bb00b534b
b024515a58bb0016fff40014fff4b410140e1417baffe20013ffe2b30d1e
111e383838383838383859005d01715d0071435c58400b1614101b3f1414
101b3f11b8fff640130f1e3f0b140f1e3f080a0f1e3f070a0f1e3f11b8ff
ec401d120b3f07140b123f0b140b123f161411173e141411173e13140f14
3f11b8ffc440120f143f0a0a0c103f080a0c103f02030f1f3c012b002b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b5901140023220035340033320007342623
2206151416333236043cfeedc2c4feee0112c4c2011355e1a0a0e1e1a0a0
e101afc0fef00111bfc00111fef0c19ededf9d9ce0df>PBAAAA+CourierNewPSMT AddT42Char 
2 10652 87 <00010092ffdf043b0492002c00c94024fb1b010d1b1a1b02a40ab50ac20a
d30ae40a05760e860e950ea60ec60bd60b0617080107ba02ae0004017240
150804040708220110140915110f1011121405190c29b801a340111e3b24
24073b010100060c21190b148804b801a940142c2c0809202621c6001c10
1c201c701cbf1c051cb802e5b32d2aad182b10f65de43cfd3c3c10f4e400
3fed3f3c10ed3c10fded111217391239011112390010fd3d12392f180110
f5f4c431304379400e1a1b0a0b0b1a091f000a1b0c1f00002b012b818100
715d01715d01213216151406232111141633323637363332161514070606
232226351123222635343633333534363332161501ba01c81e1a1a1efe38
757155c637140d10180d20f77193ae9b1e1a1a1e9b181213180362181312
18fdd1496233200d19110f0d214d8a75022f18131218f81e1a1a1e00>PBAAAA+CourierNewPSMT AddT42Char 
2 0 0 <00020067000004670500000300070046b10607b8010cb40201000504b801
0cb403000a0605b8010cb60303021a090704b8010cb6010019084f7b182b
4e10f43c4dfd3c4e10f63c4d10fd3c003f3cfd3c3f3cfd3c313033112111
25211121670400fc2003c0fc400500fb002004c0>PBAAAA+CourierNewPSMT AddT42Char 
PBAAAA+CourierNewPSMT /CharStrings get begin
/space 3 def
/parenleft 11 def
/parenright 12 def
/two 21 def
/B 37 def
/D 39 def
/I 44 def
/K 46 def
/N 49 def
/P 51 def
/R 53 def
/S 54 def
/V 57 def
/a 68 def
/d 71 def
/i 76 def
/l 79 def
/n 81 def
/o 82 def
/t 87 def
end
PBAAAA+CourierNewPSMT /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 50 /two put
dup 66 /B put
dup 68 /D put
dup 73 /I put
dup 75 /K put
dup 78 /N put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 86 /V put
dup 97 /a put
dup 100 /d put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 116 /t put
pop
end
%ADOEndSubsetFont
/MEREOY+CourierNewPSMT /PBAAAA+CourierNewPSMT findfont ct_VMDictPut
/MEREOY+CourierNewPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 8{/.notdef}rp /two 15{/.notdef}rp 
/B /.notdef /D 4{/.notdef}rp /I /.notdef /K 2{/.notdef}rp 
/N /.notdef /P /.notdef /R /S 2{/.notdef}rp /V 
10{/.notdef}rp /a 2{/.notdef}rp /d 4{/.notdef}rp /i 2{/.notdef}rp /l 
/.notdef /n /o 4{/.notdef}rp /t 139{/.notdef}rp]
MEREOY+CourierNewPSMT nf
MEREOY+CourierNewPSMT*1 [-6.16e-7 -14 -14 6.16e-7 0 0 ]msf
255.47 225.972 mo
(DIV2K Validation PSNR\(dB\))
[-8.40009 -8.40009 -8.40009 -8.40009 -8.40009 -8.40009 -8.40009 -8.40009 -8.40007 -8.40009 -8.40009 -8.2041 
-8.40009 -8.40009 -8.40009 -8.40009 -8.40009 -8.40009 -8.40009 -8.2041 -8.40009 -8.40009 -8.40009 -8.20407 
0 ]ysh
%ADOBeginSubsetFont: PBAAAA+CourierNewPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+CourierNewPSMT gcheck setglobal} if
2 5850 55 <0001008f0000043c04920023008e402a0f090c3510101d09221c1f362323
1d1c0208053501011d081319163612121d1923121e1b1a0209080819b801
6fb61010111e000001b8016f4020101c2f1c601ccf1c040f1c3f1c4f1c5f
1c701c8f1caf1cdf1c081ce925c26f182b10f65d71f43c10fd3c10e4003f
3c3f3cfd3c0110ed0010f5d43c10ed0110f5d43c10ed0010f5d43c10ed01
10f5d43c3130011133321615140623212226353436333311211114062322
2635112111140623222635110290da1e1a1a1efdf71e1a1a1edafea81713
121803ad17131317043efc16171312181812131703eafedd1f1a1a1f0177
fe891f1a1a1f0123>PBAAAA+CourierNewPSMT AddT42Char 
2 7464 72 <00020080ffdf042f03800019002000d040690a1699150232024202520263
02c602c613ca19da12da19dc1be318e51ffa160d191c2a1c3402381e4a1b
4c1f5c1b5a1f6f1b6c1f7e1b8c1b991c991eb7050f7516ba1cc403c412c9
1cc91e0608c5111a2020000101111d2117070421110b0c541a3ba0000170
000100b801e5401722203b013ba014016f14bf14cf14df14041419212aac
18b8012c852b4e10f45d714deded10f65d71ede4003fed3fed12392f3cfd
3c10ed3130004bb00c534bb024515a58b2161406b8fff0b41b141f1e02b8
ffec383838383859005d71015d7101211616333236373633321615140706
0623220035340033320007262623220607042dfca816e5a95ece41130e10
181030f581d8fedf010fc8ce010a5719d59393d41a019da3c73e330f1911
11103257011bc9b70106fef3818baeac8d00>PBAAAA+CourierNewPSMT AddT42Char 
2 7782 74 <0002007dfe7e047e038000270033011e40314514701402dc21d325ec21e4
25fb21f424066b296d2d632f63337a0d7c2971338c2980339d299133ab29
a033ba1e0e0208b802ae4062000501052f09050508092202001e2b311820
1017201111100e1e933121200a2b2100932607083b0206010601281d2001
200a0a1009a009b009030f094f095f09af09cf0905091a352e2180239023
a023b02304bf23cf23e023f023042319342a6118b8012c852b4e10f45d71
4ded4e10f65d713c4d10edfd3c3c003f3fed3fe4ed3fede43f3c10ed10ed
1112393910fd3d12392f180110f55df4c43130004bb00c534bb024515a58
bb001bfff4001afff4b22a0832b8fff8b21e0800b8fff4b22c0830b8fff4
b2290c33b8fff8b22d162fb8ffea3838383838383838383838385900715d
015d013533321615140623231114070e0223232226353436331732363736
35350623220235341233321334262322061514163332360381c51e1a1a1e
712418705c4dee1e1a1a1ef14a77271687d5adfbfbadd587cb8d8dcaca8d
8dcb02c89a18131218fcb954422c5e2817131318014c492a41fcb90101b5
b50100fe4b94cccd9394cdcd>PBAAAA+CourierNewPSMT AddT42Char 
2 9562 85 <000100ab0000045a0377002b011540147c0e012c094f0a6a127912891296
069d13071c22b802ae400b1fc8231f1f2223221c1b15ba02ae0018014040
091418181514221b2b25b802ae404f284e2428282524222b0b0e140c0b0a
090805070d011300140e100a24253b002b060a3f10210407153b1b223b1c
1c1b0a0f07f00702071a2d001420240f23502380239023a023f023062319
2cfd8e182b4e10f45d3c4dfd3c4e10e65d003f3c4d10ed10ed3feded3f3c
fd3c1112391112393911121739011139390010fd3d12392f180110f5f4c4
0010fd3d12392f180110f5f4c40010fd3d12392f180110f5f4c4b1060243
5458b90001ffc0b31b243401b8ffe0b2111a34002b2b593130004bb01153
4bb024515a58b513140e16121c3838385900710171011536363332161514
062322262726262322060711213216151406232122263534363333112322
26353436330202a4a3454b8119130a0e13233419379bbf01741f1a1a1ffd
6d1e1a191fcb9b1e1a191f0362d49455651a13190713231a58abfe341713
12181712111702bc18131218>PBAAAA+CourierNewPSMT AddT42Char 
2 9964 86 <000100cfffdf03fe0380004401f14088143f1c4102124c0059006944ac20
ac37a138cc13c942de13d616d63edb42eb13e434e842fc13f434f842120b
130616053e09421f131516153e1b428b229534bb0f0b57135a3869386a3b
7a387e3b8938893ba514b2140a8e3bb51f0251082b29232631403d3c341a
180f0e07150c390034323023042e360f0e0c030a000311193b3d3d211121
430ab80135b403202e012eb80196401c26362121003b075539214f1e5f1e
6f1e031e1a463154233b29152140b8ffc040160f193f40596f2901291945
43070306260a210b5e8018b8012c852b003f3f3f3f014e10f45d4df4012b
ed10fde44e10f65d4dfdfded0010ed10ed5d10ed10fd11392fed11123912
17391112173901111239121739111239391239313043794038374212201c
251325173e151f003b1b391f013720391f011242151f00163f181f001718
3e3d3a1d3c1f011b1a3b3c381f361f001441111f01002b2b103c103c2b10
3c103c2b012b2b2b2b2b2b8181004bb011534bb024515a58b43b14340a1c
bcffe70017ffec0044ffecb23e1437b8ffecb322163c1c38383838383838
383859015d7100715d435c58b90038ffec40090d163f3b140d163f38b8ff
ec401810153f3b1410153f44140f143f44140c103f44140b0f3f1cb8ffec
b30f193f38b8ffecb70f193f00140f193f002b2b2b2b2b2b2b2b2b2b5900
5d0134363332161515140623222627262726232207061514171617161716
161514062322271406062322263535343633321615141716163332363534
27262426263534363332037c181213181813111702063852878d4e3b4630
86af44615fcec7c77f08150d1218171312191723996fa4a05152fec7884c
d493ae032b1d1a1a1f901e1a16193c2738392b353c281c0f1318237c486b
a76522140e1a1ead1e1a19152e1f303f7a444e2f2f2034683c6c7f00>PBAAAA+CourierNewPSMT AddT42Char 
PBAAAA+CourierNewPSMT /CharStrings get begin
/T 55 def
/e 72 def
/g 74 def
/r 85 def
/s 86 def
end
PBAAAA+CourierNewPSMT /Encoding get
dup 84 /T put
dup 101 /e put
dup 103 /g put
dup 114 /r put
dup 115 /s put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MEREOY+CourierNewPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 8{/.notdef}rp /two 15{/.notdef}rp 
/B /.notdef /D 4{/.notdef}rp /I /.notdef /K 2{/.notdef}rp 
/N /.notdef /P /.notdef /R /S /T /.notdef 
/V 10{/.notdef}rp /a 2{/.notdef}rp /d /e /.notdef /g 
/.notdef /i 2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp 
/r /s /t 139{/.notdef}rp]
MEREOY+CourierNewPSMT nf
MEREOY+CourierNewPSMT*1 [14.025 0 0 -14.025 0 0 ]msf
388.02 254.502 mo
(Training Iterations\(K\))
[8.40009 8.40009 8.40009 8.40009 8.40009 8.40009 8.40009 8.40009 8.40009 8.40009 8.40009 8.20374 
8.40009 8.40009 8.40012 8.40002 8.40009 8.40009 8.40009 8.20374 8.40009 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/MEREOY+CourierNewPSMT*1 uf
/MEREOY+CourierNewPSMT uf
/PBAAAA+CourierNewPSMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
