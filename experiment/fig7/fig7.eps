%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: fig6.pdf
%%Creator: Adobe Acrobat 9.3.4
%%For: Dell
%%CreationDate: 2021/11/18, 17:25:30
%%BoundingBox: 0 0 306 206
%%HiResBoundingBox: 0 0 305.1969 205.5119
%%CropBox: 0 0 305.1969 205.5119
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1089 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Microsoft® PowerPoint® 2016"
   dc:format="application/pdf"
   xmp:CreatorTool="Microsoft® PowerPoint® 2016"
   xmp:CreateDate="2021-11-18T17:24:24+08:00"
   xmp:ModifyDate="2021-11-18T17:25:20+08:00"
   xmp:MetadataDate="2021-11-18T17:25:20+08:00"
   xmpMM:DocumentID="uuid:926E3F2D-10C0-4461-9731-8459BA5779BE"
   xmpMM:InstanceID="uuid:bb45c54f-74da-4e6f-addd-4cd645566d22">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint 演示文稿</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>吴 凯</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -205.512 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 205.512 li
305.197 205.512 li
305.197 0 li
cp
clp
[1 0 0 1 -286.299 0 ]ct
0 358.582 mo
960 358.582 li
960 -181.417 li
0 -181.417 li
0 358.582 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
299.804 191.72 mo
598.472 191.72 li
598.472 -5.69573 li
299.804 -5.69573 li
299.804 191.72 li
f
334.697 168.407 mo
590.316 168.407 li
590.316 2.46887 li
334.697 2.46887 li
334.697 168.407 li
f
339.274 168.407 mo
339.274 171.078 li
1 /0 /CSD get_res sepcs
1 sep
.21338 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
gsave
[2.86245 1.29414e-7 -3.92231e-7 -2.8611 299.4 191.983 ]ct
@
grestore newpath
336.334 178.793 mo
336.334 177.756 336.489 176.863 336.804 176.114 cv
337.118 175.365 337.534 174.806 338.052 174.44 cv
338.455 174.15 338.87 174.004 339.3 174.004 cv
339.998 174.004 340.625 174.36 341.18 175.071 cv
341.873 175.951 342.219 177.145 342.219 178.653 cv
342.219 179.708 342.068 180.604 341.761 181.343 cv
341.458 182.08 341.072 182.615 340.599 182.948 cv
340.127 183.281 339.672 183.448 339.231 183.448 cv
338.364 183.448 337.642 182.936 337.067 181.911 cv
336.577 181.049 336.334 180.009 336.334 178.793 cv
cp
337.651 178.96 mo
337.651 180.212 337.803 181.234 338.112 182.025 cv
338.367 182.692 338.747 183.025 339.254 183.025 cv
339.494 183.025 339.743 182.917 340.004 182.701 cv
340.264 182.484 340.462 182.12 340.596 181.611 cv
340.8 180.841 340.903 179.757 340.903 178.357 cv
340.903 177.32 340.797 176.455 340.582 175.762 cv
340.422 175.247 340.213 174.882 339.958 174.668 cv
339.775 174.52 339.552 174.446 339.291 174.446 cv
338.988 174.446 338.719 174.583 338.481 174.856 cv
338.158 175.227 337.94 175.811 337.823 176.608 cv
337.708 177.403 337.651 178.188 337.651 178.96 cv
cp
f
409.693 168.407 mo
409.693 171.078 li
gsave
[2.86245 1.29414e-7 -3.92231e-7 -2.8611 299.4 191.983 ]ct
@
grestore newpath
404.432 175.084 mo
406.645 174.004 li
406.865 174.004 li
406.865 181.684 li
406.865 182.193 406.888 182.511 406.931 182.637 cv
406.974 182.761 407.062 182.857 407.194 182.924 cv
407.329 182.992 407.603 183.03 408.016 183.038 cv
408.016 183.287 li
404.592 183.287 li
404.592 183.038 li
405.021 183.03 405.299 182.993 405.422 182.929 cv
405.548 182.863 405.637 182.776 405.686 182.667 cv
405.734 182.557 405.76 182.229 405.76 181.684 cv
405.76 176.775 li
405.76 176.113 405.737 175.688 405.694 175.5 cv
405.663 175.357 405.605 175.252 405.522 175.185 cv
405.439 175.118 405.339 175.084 405.222 175.084 cv
405.056 175.084 404.827 175.153 404.532 175.292 cv
cp
f
410.188 178.793 mo
410.188 177.756 410.346 176.863 410.658 176.114 cv
410.973 175.365 411.388 174.806 411.906 174.44 cv
412.309 174.15 412.727 174.004 413.157 174.004 cv
413.852 174.004 414.479 174.36 415.034 175.071 cv
415.727 175.951 416.073 177.145 416.073 178.653 cv
416.073 179.708 415.922 180.604 415.615 181.343 cv
415.312 182.08 414.926 182.615 414.453 182.948 cv
413.981 183.281 413.526 183.448 413.088 183.448 cv
412.221 183.448 411.496 182.936 410.921 181.911 cv
410.432 181.049 410.188 180.009 410.188 178.793 cv
cp
411.505 178.96 mo
411.505 180.212 411.657 181.234 411.966 182.025 cv
412.223 182.692 412.604 183.025 413.108 183.025 cv
413.348 183.025 413.597 182.917 413.858 182.701 cv
414.118 182.484 414.316 182.12 414.45 181.611 cv
414.654 180.841 414.757 179.757 414.757 178.357 cv
414.757 177.32 414.651 176.455 414.436 175.762 cv
414.276 175.247 414.067 174.882 413.812 174.668 cv
413.629 174.52 413.408 174.446 413.148 174.446 cv
412.845 174.446 412.573 174.583 412.335 174.856 cv
412.012 175.227 411.794 175.811 411.677 176.608 cv
411.562 177.403 411.505 178.188 411.505 178.96 cv
cp
f
480.109 168.407 mo
480.109 171.078 li
gsave
[2.86245 1.29414e-7 -3.92231e-7 -2.8611 299.4 191.983 ]ct
@
grestore newpath
479.54 181.536 mo
478.904 183.287 li
473.534 183.287 li
473.534 183.038 li
475.114 181.599 476.225 180.423 476.869 179.512 cv
477.513 178.599 477.836 177.765 477.836 177.009 cv
477.836 176.433 477.659 175.959 477.307 175.588 cv
476.952 175.216 476.528 175.03 476.036 175.03 cv
475.589 175.03 475.189 175.161 474.831 175.423 cv
474.476 175.685 474.215 176.068 474.044 176.574 cv
473.795 176.574 li
473.909 175.747 474.195 175.112 474.659 174.67 cv
475.12 174.226 475.698 174.004 476.394 174.004 cv
477.129 174.004 477.745 174.241 478.24 174.715 cv
478.735 175.188 478.984 175.747 478.984 176.391 cv
478.984 176.852 478.876 177.313 478.661 177.773 cv
478.329 178.497 477.794 179.264 477.049 180.074 cv
475.936 181.29 475.24 182.024 474.963 182.274 cv
477.338 182.274 li
477.822 182.274 478.16 182.256 478.355 182.221 cv
478.552 182.185 478.727 182.112 478.881 182.004 cv
479.039 181.894 479.176 181.738 479.293 181.536 cv
cp
f
480.607 178.793 mo
480.607 177.756 480.762 176.863 481.077 176.114 cv
481.389 175.365 481.807 174.806 482.325 174.44 cv
482.728 174.15 483.143 174.004 483.573 174.004 cv
484.271 174.004 484.898 174.36 485.453 175.071 cv
486.146 175.951 486.493 177.145 486.493 178.653 cv
486.493 179.708 486.341 180.604 486.035 181.343 cv
485.731 182.08 485.345 182.615 484.872 182.948 cv
484.4 183.281 483.945 183.448 483.504 183.448 cv
482.637 183.448 481.915 182.936 481.337 181.911 cv
480.851 181.049 480.607 180.009 480.607 178.793 cv
cp
481.924 178.96 mo
481.924 180.212 482.076 181.234 482.385 182.025 cv
482.64 182.692 483.02 183.025 483.527 183.025 cv
483.767 183.025 484.017 182.917 484.277 182.701 cv
484.537 182.484 484.735 182.12 484.87 181.611 cv
485.073 180.841 485.176 179.757 485.176 178.357 cv
485.176 177.32 485.07 176.455 484.855 175.762 cv
484.695 175.247 484.486 174.882 484.231 174.668 cv
484.048 174.52 483.825 174.446 483.564 174.446 cv
483.261 174.446 482.992 174.583 482.754 174.856 cv
482.431 175.227 482.213 175.811 482.096 176.608 cv
481.981 177.403 481.924 178.188 481.924 178.96 cv
cp
f
550.528 168.407 mo
550.528 171.078 li
gsave
[2.86245 1.29414e-7 -3.92231e-7 -2.8611 299.4 191.983 ]ct
@
grestore newpath
544.354 175.923 mo
544.615 175.311 544.941 174.838 545.336 174.505 cv
545.734 174.171 546.226 174.004 546.819 174.004 cv
547.546 174.004 548.107 174.241 548.496 174.715 cv
548.791 175.068 548.937 175.446 548.937 175.848 cv
548.937 176.511 548.522 177.195 547.689 177.902 cv
548.25 178.121 548.673 178.434 548.96 178.84 cv
549.246 179.246 549.389 179.725 549.389 180.276 cv
549.389 181.063 549.137 181.745 548.636 182.321 cv
547.984 183.073 547.039 183.448 545.8 183.448 cv
545.187 183.448 544.769 183.372 544.546 183.221 cv
544.325 183.067 544.214 182.904 544.214 182.731 cv
544.214 182.601 544.265 182.487 544.371 182.388 cv
544.477 182.289 544.603 182.24 544.749 182.24 cv
544.864 182.24 544.978 182.258 545.095 182.294 cv
545.17 182.316 545.342 182.399 545.611 182.54 cv
545.88 182.681 546.066 182.764 546.169 182.791 cv
546.332 182.84 546.51 182.864 546.698 182.864 cv
547.154 182.864 547.549 182.688 547.886 182.334 cv
548.227 181.981 548.396 181.563 548.396 181.081 cv
548.396 180.727 548.316 180.383 548.161 180.048 cv
548.044 179.798 547.918 179.608 547.778 179.477 cv
547.586 179.299 547.32 179.137 546.985 178.992 cv
546.65 178.847 546.309 178.774 545.96 178.774 cv
545.745 178.774 li
545.745 178.572 li
546.097 178.527 546.452 178.4 546.807 178.19 cv
547.165 177.979 547.423 177.727 547.583 177.432 cv
547.743 177.137 547.826 176.813 547.826 176.46 cv
547.826 175.999 547.68 175.627 547.391 175.344 cv
547.105 175.059 546.744 174.917 546.315 174.917 cv
545.622 174.917 545.041 175.288 544.577 176.031 cv
cp
f
551.026 178.793 mo
551.026 177.756 551.181 176.863 551.496 176.114 cv
551.808 175.365 552.226 174.806 552.744 174.44 cv
553.148 174.15 553.563 174.004 553.992 174.004 cv
554.69 174.004 555.317 174.36 555.873 175.071 cv
556.565 175.951 556.912 177.145 556.912 178.653 cv
556.912 179.708 556.757 180.604 556.454 181.343 cv
556.15 182.08 555.761 182.615 555.289 182.948 cv
554.819 183.281 554.364 183.448 553.923 183.448 cv
553.056 183.448 552.335 182.936 551.756 181.911 cv
551.27 181.049 551.026 180.009 551.026 178.793 cv
cp
552.34 178.96 mo
552.34 180.212 552.495 181.234 552.804 182.025 cv
553.059 182.692 553.439 183.025 553.946 183.025 cv
554.187 183.025 554.436 182.917 554.696 182.701 cv
554.957 182.484 555.154 182.12 555.289 181.611 cv
555.492 180.841 555.595 179.757 555.595 178.357 cv
555.595 177.32 555.486 176.455 555.271 175.762 cv
555.111 175.247 554.905 174.882 554.65 174.668 cv
554.467 174.52 554.244 174.446 553.983 174.446 cv
553.68 174.446 553.411 174.583 553.173 174.856 cv
552.85 175.227 552.632 175.811 552.515 176.608 cv
552.4 177.403 552.34 178.188 552.34 178.96 cv
cp
f
334.697 164.322 mo
332.023 164.322 li
gsave
[2.86245 1.29414e-7 -3.92231e-7 -2.8611 299.4 191.983 ]ct
@
grestore newpath
305.797 164.596 mo
305.797 163.559 305.954 162.665 306.268 161.918 cv
306.581 161.169 306.997 160.611 307.515 160.244 cv
307.919 159.953 308.335 159.807 308.765 159.807 cv
309.462 159.807 310.088 160.164 310.644 160.874 cv
311.337 161.755 311.683 162.948 311.683 164.457 cv
311.683 165.511 311.53 166.408 311.226 167.146 cv
310.922 167.883 310.534 168.418 310.062 168.752 cv
309.591 169.085 309.135 169.252 308.696 169.252 cv
307.828 169.252 307.106 168.74 306.529 167.715 cv
306.041 166.852 305.797 165.813 305.797 164.596 cv
cp
307.113 164.764 mo
307.113 166.016 307.267 167.038 307.575 167.829 cv
307.831 168.496 308.212 168.829 308.718 168.829 cv
308.958 168.829 309.208 168.721 309.467 168.505 cv
309.727 168.288 309.925 167.924 310.06 167.415 cv
310.264 166.645 310.367 165.56 310.367 164.161 cv
310.367 163.123 310.259 162.259 310.045 161.566 cv
309.884 161.051 309.677 160.685 309.422 160.471 cv
309.239 160.325 309.017 160.25 308.756 160.25 cv
308.453 160.25 308.182 160.388 307.944 160.659 cv
307.622 161.031 307.403 161.615 307.287 162.41 cv
307.172 163.206 307.113 163.991 307.113 164.764 cv
cp
f
313.891 167.79 mo
314.101 167.79 314.278 167.863 314.421 168.009 cv
314.564 168.154 314.636 168.329 314.636 168.535 cv
314.636 168.74 314.563 168.915 314.417 169.061 cv
314.272 169.207 314.097 169.28 313.891 169.28 cv
313.684 169.28 313.508 169.207 313.362 169.061 cv
313.218 168.915 313.145 168.74 313.145 168.535 cv
313.145 168.325 313.218 168.148 313.362 168.005 cv
313.508 167.862 313.684 167.79 313.891 167.79 cv
cp
f
318.245 164.511 mo
317.525 163.92 317.061 163.445 316.852 163.088 cv
316.644 162.731 316.54 162.359 316.54 161.973 cv
316.54 161.383 316.769 160.877 317.225 160.45 cv
317.682 160.021 318.288 159.807 319.044 159.807 cv
319.779 159.807 320.369 160.007 320.816 160.405 cv
321.264 160.802 321.488 161.257 321.488 161.767 cv
321.488 162.107 321.367 162.453 321.125 162.805 cv
320.883 163.16 320.38 163.576 319.615 164.053 cv
320.403 164.662 320.924 165.14 321.179 165.489 cv
321.518 165.946 321.688 166.427 321.688 166.932 cv
321.688 167.571 321.443 168.118 320.955 168.571 cv
320.468 169.025 319.829 169.252 319.038 169.252 cv
318.174 169.252 317.501 168.981 317.017 168.441 cv
316.633 168.007 316.442 167.533 316.442 167.018 cv
316.442 166.616 316.577 166.217 316.847 165.822 cv
317.118 165.426 317.584 164.988 318.245 164.511 cv
cp
319.3 163.792 mo
319.836 163.309 320.177 162.928 320.32 162.651 cv
320.463 162.37 320.534 162.053 320.534 161.698 cv
320.534 161.229 320.402 160.862 320.137 160.596 cv
319.874 160.33 319.514 160.196 319.057 160.196 cv
318.602 160.196 318.231 160.33 317.945 160.594 cv
317.658 160.857 317.515 161.166 317.515 161.518 cv
317.515 161.749 317.574 161.984 317.691 162.216 cv
317.81 162.448 317.979 162.668 318.198 162.88 cv
cp
318.561 164.764 mo
318.19 165.077 317.915 165.418 317.736 165.788 cv
317.557 166.157 317.468 166.556 317.468 166.986 cv
317.468 167.562 317.625 168.024 317.94 168.37 cv
318.255 168.716 318.657 168.889 319.145 168.889 cv
319.628 168.889 320.014 168.753 320.305 168.481 cv
320.597 168.208 320.743 167.877 320.743 167.488 cv
320.743 167.166 320.657 166.877 320.487 166.623 cv
320.169 166.149 319.527 165.53 318.561 164.764 cv
cp
f
322.976 164.596 mo
322.976 163.559 323.133 162.665 323.446 161.918 cv
323.76 161.169 324.176 160.611 324.694 160.244 cv
325.098 159.953 325.514 159.807 325.943 159.807 cv
326.641 159.807 327.267 160.164 327.822 160.874 cv
328.514 161.755 328.863 162.948 328.863 164.457 cv
328.863 165.511 328.709 166.408 328.405 167.146 cv
328.102 167.883 327.713 168.418 327.24 168.752 cv
326.77 169.085 326.314 169.252 325.875 169.252 cv
325.007 169.252 324.285 168.74 323.708 167.715 cv
323.22 166.852 322.976 165.813 322.976 164.596 cv
cp
324.292 164.764 mo
324.292 166.016 324.446 167.038 324.754 167.829 cv
325.01 168.496 325.391 168.829 325.896 168.829 cv
326.137 168.829 326.387 168.721 326.646 168.505 cv
326.906 168.288 327.104 167.924 327.238 167.415 cv
327.443 166.645 327.546 165.56 327.546 164.161 cv
327.546 163.123 327.438 162.259 327.223 161.566 cv
327.063 161.051 326.855 160.685 326.601 160.471 cv
326.418 160.325 326.195 160.25 325.935 160.25 cv
325.631 160.25 325.361 160.388 325.123 160.659 cv
324.801 161.031 324.582 161.615 324.466 162.41 cv
324.35 163.206 324.292 163.991 324.292 164.764 cv
cp
f
334.697 125.11 mo
332.023 125.11 li
gsave
[2.86245 1.29414e-7 -3.92231e-7 -2.8611 299.4 191.983 ]ct
@
grestore newpath
305.797 125.385 mo
305.797 124.349 305.954 123.456 306.268 122.707 cv
306.581 121.957 306.997 121.399 307.515 121.033 cv
307.919 120.741 308.335 120.598 308.765 120.598 cv
309.462 120.598 310.088 120.953 310.644 121.663 cv
311.337 122.544 311.683 123.737 311.683 125.248 cv
311.683 126.3 311.53 127.196 311.226 127.934 cv
310.922 128.672 310.534 129.207 310.062 129.542 cv
309.591 129.874 309.135 130.04 308.696 130.04 cv
307.828 130.04 307.106 129.528 306.529 128.503 cv
306.041 127.642 305.797 126.601 305.797 125.385 cv
cp
307.113 125.554 mo
307.113 126.804 307.267 127.825 307.575 128.618 cv
307.831 129.285 308.212 129.619 308.718 129.619 cv
308.958 129.619 309.208 129.511 309.467 129.293 cv
309.727 129.076 309.925 128.712 310.06 128.203 cv
310.264 127.433 310.367 126.349 310.367 124.95 cv
310.367 123.911 310.259 123.047 310.045 122.355 cv
309.884 121.84 309.677 121.474 309.422 121.259 cv
309.239 121.113 309.017 121.039 308.756 121.039 cv
308.453 121.039 308.182 121.176 307.944 121.448 cv
307.622 121.82 307.403 122.404 307.287 123.202 cv
307.172 123.997 307.113 124.781 307.113 125.554 cv
cp
f
313.891 128.581 mo
314.101 128.581 314.278 128.652 314.421 128.798 cv
314.564 128.944 314.636 129.119 314.636 129.325 cv
314.636 129.528 314.563 129.705 314.417 129.851 cv
314.272 129.997 314.097 130.068 313.891 130.068 cv
313.684 130.068 313.508 129.997 313.362 129.851 cv
313.218 129.705 313.145 129.528 313.145 129.325 cv
313.145 129.113 313.218 128.938 313.362 128.795 cv
313.508 128.652 313.684 128.581 313.891 128.581 cv
cp
f
318.245 125.299 mo
317.525 124.71 317.061 124.235 316.852 123.877 cv
316.644 123.519 316.54 123.147 316.54 122.764 cv
316.54 122.175 316.769 121.665 317.225 121.239 cv
317.682 120.81 318.288 120.598 319.044 120.598 cv
319.779 120.598 320.369 120.796 320.816 121.193 cv
321.264 121.591 321.488 122.046 321.488 122.555 cv
321.488 122.896 321.367 123.242 321.125 123.597 cv
320.883 123.949 320.38 124.363 319.615 124.841 cv
320.403 125.451 320.924 125.928 321.179 126.278 cv
321.518 126.735 321.688 127.216 321.688 127.719 cv
321.688 128.36 321.443 128.907 320.955 129.362 cv
320.468 129.814 319.829 130.04 319.038 130.04 cv
318.174 130.04 317.501 129.771 317.017 129.23 cv
316.633 128.795 316.442 128.323 316.442 127.805 cv
316.442 127.405 316.577 127.007 316.847 126.612 cv
317.118 126.215 317.584 125.777 318.245 125.299 cv
cp
319.3 124.581 mo
319.836 124.097 320.176 123.717 320.32 123.439 cv
320.463 123.159 320.534 122.841 320.534 122.489 cv
320.534 122.017 320.402 121.651 320.137 121.385 cv
319.874 121.119 319.514 120.984 319.057 120.984 cv
318.602 120.984 318.231 121.119 317.945 121.382 cv
317.658 121.645 317.515 121.954 317.515 122.309 cv
317.515 122.541 317.574 122.773 317.691 123.004 cv
317.81 123.236 317.979 123.459 318.198 123.668 cv
cp
318.561 125.554 mo
318.19 125.866 317.915 126.209 317.736 126.578 cv
317.557 126.947 317.468 127.345 317.468 127.774 cv
317.468 128.352 317.625 128.812 317.94 129.159 cv
318.255 129.505 318.657 129.679 319.145 129.679 cv
319.627 129.679 320.014 129.542 320.305 129.27 cv
320.597 128.998 320.743 128.667 320.743 128.277 cv
320.743 127.954 320.657 127.665 320.487 127.41 cv
320.169 126.938 319.527 126.318 318.561 125.554 cv
cp
f
328.445 120.784 mo
327.921 121.926 li
325.184 121.926 li
324.586 123.145 li
325.772 123.319 326.711 123.76 327.406 124.466 cv
328 125.076 328.296 125.791 328.296 126.612 cv
328.296 127.09 328.199 127.534 328.005 127.943 cv
327.812 128.349 327.567 128.695 327.271 128.981 cv
326.976 129.267 326.647 129.496 326.285 129.671 cv
325.771 129.917 325.243 130.04 324.7 130.04 cv
324.155 130.04 323.757 129.948 323.508 129.765 cv
323.261 129.579 323.137 129.373 323.137 129.147 cv
323.137 129.024 323.188 128.913 323.292 128.818 cv
323.395 128.721 323.524 128.672 323.68 128.672 cv
323.797 128.672 323.9 128.689 323.987 128.727 cv
324.075 128.761 324.223 128.852 324.432 129.001 cv
324.768 129.233 325.108 129.35 325.452 129.35 cv
325.976 129.35 326.435 129.153 326.83 128.758 cv
327.227 128.36 327.425 127.88 327.425 127.31 cv
327.425 126.761 327.248 126.249 326.895 125.771 cv
326.541 125.296 326.054 124.927 325.433 124.67 cv
324.944 124.466 324.28 124.349 323.44 124.318 cv
325.184 120.784 li
cp
f
334.697 85.8988 mo
332.023 85.8988 li
gsave
[2.86245 1.29414e-7 -3.92231e-7 -2.8611 299.4 191.983 ]ct
@
grestore newpath
305.797 86.1735 mo
305.797 85.1377 305.954 84.2451 306.268 83.4955 cv
306.581 82.7459 306.997 82.1879 307.515 81.8217 cv
307.919 81.5328 308.335 81.3868 308.765 81.3868 cv
309.462 81.3868 310.088 81.7416 310.644 82.454 cv
311.337 83.3324 311.683 84.5283 311.683 86.0361 cv
311.683 87.089 311.53 87.9874 311.226 88.7256 cv
310.922 89.4609 310.534 89.9959 310.062 90.3306 cv
309.591 90.6625 309.135 90.8313 308.696 90.8313 cv
307.828 90.8313 307.106 90.3192 306.529 89.2921 cv
306.041 88.4309 305.797 87.3923 305.797 86.1735 cv
cp
307.113 86.3423 mo
307.113 87.5954 307.267 88.6168 307.575 89.4065 cv
307.831 90.0731 308.212 90.4079 308.718 90.4079 cv
308.958 90.4079 309.208 90.2992 309.467 90.0817 cv
309.727 89.8643 309.925 89.5009 310.06 88.9916 cv
310.264 88.222 310.367 87.1376 310.367 85.7386 cv
310.367 84.7029 310.259 83.8359 310.045 83.1436 cv
309.884 82.6286 309.677 82.2652 309.422 82.0506 cv
309.239 81.9018 309.017 81.8274 308.756 81.8274 cv
308.453 81.8274 308.182 81.9648 307.944 82.2394 cv
307.622 82.6085 307.403 83.1922 307.287 83.9904 cv
307.172 84.7858 307.113 85.5698 307.113 86.3423 cv
cp
f
313.891 89.3693 mo
314.101 89.3693 314.278 89.4408 314.421 89.5867 cv
314.564 89.7327 314.636 89.9072 314.636 90.1132 cv
314.636 90.3192 314.563 90.4937 314.417 90.6396 cv
314.272 90.7856 314.097 90.8571 313.891 90.8571 cv
313.684 90.8571 313.508 90.7856 313.362 90.6396 cv
313.218 90.4937 313.145 90.3192 313.145 90.1132 cv
313.145 89.9015 313.218 89.7269 313.362 89.5839 cv
313.508 89.4408 313.684 89.3693 313.891 89.3693 cv
cp
f
316.334 90.8571 mo
316.334 90.6082 li
316.915 90.5996 317.457 90.4651 317.958 90.2047 cv
318.459 89.9415 318.943 89.4837 319.409 88.8314 cv
319.877 88.1791 320.203 87.461 320.386 86.6799 cv
319.683 87.1291 319.048 87.3551 318.482 87.3551 cv
317.842 87.3551 317.293 87.109 316.837 86.6141 cv
316.38 86.122 316.152 85.4639 316.152 84.6456 cv
316.152 83.8503 316.38 83.1407 316.837 82.5198 cv
317.386 81.7645 318.104 81.3868 318.991 81.3868 cv
319.738 81.3868 320.378 81.6958 320.91 82.311 cv
321.563 83.0778 321.889 84.0191 321.889 85.1435 cv
321.889 86.1534 321.641 87.0947 321.144 87.9702 cv
320.647 88.8429 319.957 89.5696 319.072 90.1447 cv
318.351 90.6196 317.565 90.8571 316.716 90.8571 cv
cp
320.494 86.182 mo
320.574 85.6012 320.614 85.1349 320.614 84.7858 cv
320.614 84.3538 320.54 83.8846 320.393 83.381 cv
320.245 82.8775 320.036 82.4941 319.766 82.2251 cv
319.495 81.9562 319.187 81.8217 318.842 81.8217 cv
318.444 81.8217 318.095 82.002 317.794 82.3596 cv
317.495 82.7173 317.346 83.2494 317.346 83.9561 cv
317.346 84.8974 317.545 85.6356 317.945 86.1677 cv
318.235 86.554 318.593 86.7457 319.018 86.7457 cv
319.223 86.7457 319.466 86.697 319.749 86.5969 cv
320.031 86.4996 320.279 86.3594 320.494 86.182 cv
cp
f
322.976 86.1735 mo
322.976 85.1377 323.133 84.2451 323.446 83.4955 cv
323.76 82.7459 324.176 82.188 324.694 81.8217 cv
325.098 81.5328 325.514 81.3868 325.943 81.3868 cv
326.641 81.3868 327.267 81.7416 327.822 82.454 cv
328.514 83.3324 328.863 84.5283 328.863 86.0361 cv
328.863 87.089 328.709 87.9874 328.405 88.7256 cv
328.102 89.4609 327.713 89.9959 327.24 90.3306 cv
326.77 90.6625 326.314 90.8313 325.875 90.8313 cv
325.007 90.8313 324.285 90.3192 323.708 89.2921 cv
323.22 88.4309 322.976 87.3923 322.976 86.1735 cv
cp
324.292 86.3423 mo
324.292 87.5954 324.446 88.6168 324.754 89.4065 cv
325.01 90.0731 325.391 90.4079 325.896 90.4079 cv
326.137 90.4079 326.387 90.2992 326.646 90.0817 cv
326.906 89.8643 327.104 89.5009 327.238 88.9916 cv
327.443 88.222 327.546 87.1376 327.546 85.7386 cv
327.546 84.7029 327.438 83.8359 327.223 83.1436 cv
327.063 82.6286 326.855 82.2652 326.601 82.0506 cv
326.417 81.9018 326.195 81.8275 325.935 81.8275 cv
325.631 81.8275 325.361 81.9648 325.123 82.2394 cv
324.801 82.6085 324.582 83.1922 324.466 83.9904 cv
324.35 84.7858 324.292 85.5698 324.292 86.3423 cv
cp
f
334.697 46.6903 mo
332.023 46.6903 li
gsave
[2.86245 1.29414e-7 -3.92231e-7 -2.8611 299.4 191.983 ]ct
@
grestore newpath
305.797 46.9649 mo
305.797 45.9264 305.954 45.0337 306.268 44.2841 cv
306.581 43.5345 306.997 42.9766 307.515 42.6104 cv
307.919 42.3214 308.335 42.1755 308.765 42.1755 cv
309.462 42.1755 310.088 42.5302 310.644 43.2426 cv
311.337 44.121 311.683 45.3169 311.683 46.8248 cv
311.683 47.8776 311.53 48.776 311.226 49.5142 cv
310.922 50.2495 310.534 50.7845 310.062 51.1193 cv
309.591 51.4511 309.135 51.62 308.696 51.62 cv
307.828 51.62 307.106 51.1078 306.529 50.0835 cv
306.041 49.2195 305.797 48.1809 305.797 46.9649 cv
cp
307.113 47.1309 mo
307.113 48.384 307.267 49.4055 307.575 50.1951 cv
307.831 50.8618 308.212 51.1965 308.718 51.1965 cv
308.958 51.1965 309.208 51.0878 309.467 50.8732 cv
309.727 50.6558 309.925 50.2924 310.06 49.7831 cv
310.264 49.0135 310.367 47.9263 310.367 46.5272 cv
310.367 45.4915 310.259 44.6246 310.045 43.9322 cv
309.884 43.4172 309.677 43.0538 309.422 42.8392 cv
309.239 42.6905 309.017 42.6161 308.756 42.6161 cv
308.453 42.6161 308.182 42.7534 307.944 43.0281 cv
307.622 43.3972 307.403 43.9808 307.287 44.7791 cv
307.172 45.5744 307.113 46.3584 307.113 47.1309 cv
cp
f
313.891 50.1579 mo
314.101 50.1579 314.278 50.2295 314.421 50.3754 cv
314.564 50.5213 314.636 50.6958 314.636 50.9018 cv
314.636 51.1078 314.563 51.2823 314.417 51.4283 cv
314.272 51.5742 314.097 51.6457 313.891 51.6457 cv
313.684 51.6457 313.508 51.5742 313.362 51.4283 cv
313.218 51.2823 313.145 51.1078 313.145 50.9018 cv
313.145 50.693 313.218 50.5156 313.362 50.3725 cv
313.508 50.2295 313.684 50.1579 313.891 50.1579 cv
cp
f
316.334 51.6457 mo
316.334 51.3968 li
316.915 51.3882 317.457 51.2537 317.958 50.9934 cv
318.459 50.7301 318.942 50.2724 319.409 49.62 cv
319.877 48.9677 320.203 48.2496 320.386 47.4685 cv
319.683 47.9177 319.048 48.1437 318.482 48.1437 cv
317.842 48.1437 317.293 47.8977 316.837 47.4027 cv
316.38 46.9106 316.152 46.2554 316.152 45.4342 cv
316.152 44.6389 316.38 43.9293 316.837 43.3085 cv
317.386 42.5531 318.104 42.1755 318.991 42.1755 cv
319.738 42.1755 320.378 42.4845 320.91 43.0996 cv
321.563 43.8664 321.889 44.8105 321.889 45.9321 cv
321.889 46.942 321.641 47.8833 321.144 48.7589 cv
320.647 49.6315 319.957 50.3582 319.072 50.9333 cv
318.351 51.4082 317.565 51.6457 316.716 51.6457 cv
cp
320.494 46.9707 mo
320.574 46.3899 320.614 45.9235 320.614 45.5744 cv
320.614 45.1424 320.54 44.6732 320.393 44.1725 cv
320.245 43.6689 320.036 43.2827 319.766 43.0138 cv
319.495 42.7448 319.187 42.6104 318.842 42.6104 cv
318.444 42.6104 318.095 42.7906 317.794 43.1482 cv
317.495 43.5059 317.346 44.038 317.346 44.7447 cv
317.346 45.686 317.545 46.4242 317.945 46.9564 cv
318.235 47.3426 318.593 47.5343 319.018 47.5343 cv
319.223 47.5343 319.466 47.4857 319.749 47.3855 cv
320.031 47.2882 320.279 47.148 320.494 46.9707 cv
cp
f
328.445 42.3614 mo
327.921 43.503 li
325.183 43.503 li
324.586 44.7218 li
325.772 44.8964 326.711 45.337 327.406 46.0465 cv
328 46.6531 328.296 47.3684 328.296 48.1924 cv
328.296 48.6702 328.199 49.1136 328.005 49.5199 cv
327.812 49.9262 327.567 50.2724 327.271 50.5585 cv
326.976 50.8446 326.647 51.0763 326.285 51.2509 cv
325.771 51.4969 325.243 51.62 324.7 51.62 cv
324.155 51.62 323.757 51.5255 323.508 51.3424 cv
323.261 51.1564 323.137 50.9505 323.137 50.7273 cv
323.137 50.6014 323.188 50.4927 323.292 50.3954 cv
323.395 50.2981 323.524 50.2495 323.68 50.2495 cv
323.797 50.2495 323.9 50.2666 323.987 50.3038 cv
324.075 50.3382 324.223 50.4326 324.432 50.5814 cv
324.768 50.8131 325.108 50.9276 325.452 50.9276 cv
325.976 50.9276 326.435 50.7301 326.83 50.3353 cv
327.227 49.9405 327.425 49.457 327.425 48.8876 cv
327.425 48.3383 327.248 47.8261 326.895 47.3512 cv
326.541 46.8734 326.054 46.5072 325.433 46.2468 cv
324.944 46.0465 324.28 45.9292 323.44 45.8978 cv
325.183 42.3614 li
cp
f
334.697 7.4789 mo
332.023 7.4789 li
gsave
[2.86245 1.29414e-7 -3.92231e-7 -2.8611 299.4 191.983 ]ct
@
grestore newpath
306.912 4.04271 mo
309.125 2.96408 li
309.347 2.96408 li
309.347 10.6433 li
309.347 11.1526 309.368 11.4701 309.411 11.596 cv
309.454 11.7219 309.542 11.8163 309.675 11.885 cv
309.81 11.9508 310.083 11.9909 310.496 11.9994 cv
310.496 12.2484 li
307.073 12.2484 li
307.073 11.9994 li
307.502 11.9909 307.779 11.9537 307.904 11.8879 cv
308.03 11.822 308.117 11.7362 308.166 11.6275 cv
308.216 11.5159 308.241 11.1897 308.241 10.6433 cv
308.241 5.73648 li
308.241 5.07271 308.219 4.64642 308.174 4.46043 cv
308.143 4.31737 308.086 4.21153 308.002 4.14572 cv
307.919 4.07704 307.82 4.04271 307.704 4.04271 cv
307.538 4.04271 307.307 4.11424 307.013 4.25159 cv
cp
f
313.891 10.9465 mo
314.101 10.9465 314.278 11.0209 314.421 11.1669 cv
314.564 11.3099 314.636 11.4844 314.636 11.6904 cv
314.636 11.8964 314.563 12.071 314.417 12.2169 cv
314.272 12.3628 314.097 12.4372 313.891 12.4372 cv
313.684 12.4372 313.508 12.3628 313.362 12.2169 cv
313.218 12.071 313.145 11.8964 313.145 11.6904 cv
313.145 11.4816 313.218 11.3042 313.362 11.1611 cv
313.508 11.0181 313.684 10.9465 313.891 10.9465 cv
cp
f
316.104 7.75357 mo
316.104 6.715 316.261 5.82231 316.575 5.07556 cv
316.888 4.32312 317.304 3.76518 317.822 3.39896 cv
318.226 3.11 318.642 2.96408 319.072 2.96408 cv
319.769 2.96408 320.395 3.31885 320.951 4.03127 cv
321.644 4.90962 321.99 6.10556 321.99 7.61336 cv
321.99 8.66911 321.838 9.56464 321.533 10.3028 cv
321.229 11.041 320.841 11.576 320.369 11.9079 cv
319.898 12.2426 319.443 12.4086 319.003 12.4086 cv
318.136 12.4086 317.414 11.8964 316.837 10.8722 cv
316.349 10.0081 316.104 8.96953 316.104 7.75357 cv
cp
317.421 7.91951 mo
317.421 9.17267 317.575 10.1941 317.883 10.9866 cv
318.139 11.6532 318.519 11.9851 319.025 11.9851 cv
319.265 11.9851 319.515 11.8764 319.774 11.6618 cv
320.035 11.4444 320.232 11.081 320.367 10.5717 cv
320.572 9.80211 320.674 8.71776 320.674 7.31583 cv
320.674 6.28011 320.567 5.41605 320.352 4.72081 cv
320.192 4.20581 319.984 3.84244 319.729 3.62785 cv
319.546 3.47908 319.324 3.40755 319.064 3.40755 cv
318.76 3.40755 318.489 3.54202 318.252 3.8167 cv
317.93 4.18578 317.71 4.76944 317.595 5.56769 cv
317.479 6.36307 317.421 7.14702 317.421 7.91951 cv
cp
f
322.976 7.75357 mo
322.976 6.715 323.133 5.82231 323.446 5.07556 cv
323.76 4.32312 324.176 3.76518 324.694 3.39897 cv
325.098 3.11 325.514 2.96408 325.943 2.96408 cv
326.641 2.96408 327.267 3.31885 327.822 4.03127 cv
328.514 4.90962 328.863 6.10556 328.863 7.61336 cv
328.863 8.66911 328.709 9.56464 328.405 10.3028 cv
328.102 11.041 327.713 11.576 327.24 11.9079 cv
326.77 12.2426 326.314 12.4086 325.875 12.4086 cv
325.007 12.4086 324.285 11.8964 323.708 10.8722 cv
323.22 10.0081 322.976 8.96953 322.976 7.75357 cv
cp
324.292 7.91951 mo
324.292 9.17267 324.446 10.1941 324.754 10.9866 cv
325.01 11.6532 325.391 11.9851 325.896 11.9851 cv
326.137 11.9851 326.387 11.8764 326.646 11.6618 cv
326.906 11.4444 327.104 11.081 327.238 10.5717 cv
327.443 9.80211 327.546 8.71776 327.546 7.31583 cv
327.546 6.28011 327.438 5.41605 327.223 4.72081 cv
327.063 4.20581 326.855 3.84244 326.601 3.62785 cv
326.417 3.47908 326.195 3.40755 325.935 3.40755 cv
325.631 3.40755 325.361 3.54202 325.123 3.8167 cv
324.801 4.18578 324.582 4.76944 324.466 5.56769 cv
324.35 6.36307 324.292 7.14702 324.292 7.91951 cv
cp
f
345.766 81.8072 mo
352.807 57.6939 li
352.876 57.4583 353.09 57.2916 353.335 57.2824 cv
353.581 57.273 353.806 57.423 353.893 57.6528 cv
360.85 76.1312 li
367.238 78.9603 li
374.01 69.1399 li
374.099 69.0123 374.235 68.9257 374.388 68.9 cv
374.541 68.8745 374.698 68.9123 374.822 69.0043 cv
381.864 74.2059 li
381.956 74.2737 382.025 74.3677 382.064 74.4753 cv
389.101 94.3818 li
396.082 111.531 li
402.919 117.077 li
409.853 119.099 li
409.973 119.134 410.079 119.207 410.153 119.308 cv
416.658 128.083 li
423.272 115.837 li
423.36 115.674 423.523 115.563 423.707 115.541 cv
423.891 115.518 424.075 115.587 424.2 115.724 cv
430.798 122.987 li
437.418 114.995 li
437.525 114.865 437.683 114.79 437.851 114.787 cv
438.018 114.785 438.178 114.855 438.289 114.981 cv
444.81 122.381 li
451.45 111.151 li
451.553 110.977 451.74 110.87 451.943 110.87 cv
452.145 110.87 452.332 110.977 452.436 111.151 cv
459.374 122.878 li
466.045 125.331 li
472.904 123.283 li
473.136 123.214 473.386 123.298 473.529 123.493 cv
480.515 133.01 li
487.479 137.88 li
487.645 138.06 li
494.499 149.816 li
500.896 149.01 li
507.763 138.035 li
514.785 119.599 li
514.828 119.485 514.909 119.386 515.012 119.32 cv
521.938 114.908 li
528.91 103.05 li
529.005 102.888 529.173 102.784 529.36 102.769 cv
529.547 102.755 529.729 102.833 529.848 102.979 cv
536.22 110.808 li
542.941 89.6027 li
543.017 89.3621 543.242 89.1999 543.494 89.2032 cv
543.747 89.2066 543.967 89.3751 544.037 89.6176 cv
550.695 112.778 li
557.068 101.159 li
557.182 100.95 557.413 100.835 557.649 100.868 cv
557.886 100.901 558.075 101.075 558.128 101.308 cv
565.131 132.104 li
572.047 138.651 li
572.117 138.718 572.168 138.798 572.198 138.891 cv
579.419 161.234 li
578.329 161.586 li
571.153 139.382 li
564.218 132.816 li
564.135 132.737 564.078 132.639 564.053 132.527 cv
557.346 103.033 li
551.03 114.548 li
550.919 114.75 550.695 114.867 550.465 114.841 cv
550.235 114.815 550.042 114.653 549.978 114.43 cv
543.46 91.755 li
536.991 112.165 li
536.927 112.365 536.758 112.515 536.552 112.554 cv
536.346 112.593 536.133 112.516 536.001 112.353 cv
529.479 104.34 li
522.855 115.607 li
522.67 115.799 li
515.788 120.184 li
508.814 138.495 li
508.764 138.595 li
501.722 149.848 li
501.631 149.993 501.479 150.09 501.308 150.112 cv
494.267 150.999 li
494.039 151.028 493.816 150.918 493.7 150.719 cv
486.719 138.745 li
479.781 133.894 li
479.647 133.763 li
472.845 124.495 li
466.19 126.483 li
466.07 126.518 465.945 126.514 465.828 126.471 cv
458.787 123.882 li
458.662 123.836 458.559 123.75 458.492 123.636 cv
451.943 112.567 li
445.394 123.642 li
445.301 123.8 445.138 123.903 444.955 123.92 cv
444.772 123.938 444.593 123.867 444.471 123.729 cv
437.873 116.241 li
431.259 124.225 li
431.153 124.353 430.997 124.428 430.831 124.432 cv
430.665 124.436 430.505 124.367 430.394 124.245 cv
423.896 117.092 li
417.238 129.419 li
417.146 129.591 416.97 129.704 416.775 129.718 cv
416.581 129.732 416.391 129.645 416.274 129.488 cv
409.348 120.144 li
402.488 118.144 li
402.288 118.039 li
395.246 112.328 li
395.076 112.099 li
388.035 94.8009 li
388.025 94.7757 li
381.042 75.0221 li
374.617 70.2766 li
367.912 80.0007 li
367.756 80.2268 367.46 80.3105 367.208 80.1992 cv
360.167 77.0805 li
360.027 77.0187 359.917 76.9019 359.863 76.7589 cv
353.426 59.6619 li
346.705 82.6774 li
345.605 82.3566 li
345.766 81.8072 li
/1 
[/DeviceCMYK] /CSA add_res
.90573 .514275 .0514229 .00137331 cmyk
f
346.315 10.0138 mo
353.357 32.196 li
360.399 38.9624 li
367.44 41.9523 li
374.482 39.5947 li
381.524 39.7779 li
388.565 39.3372 li
395.607 40.4388 li
402.648 42.9079 li
409.693 45.6918 li
416.735 49.9805 li
423.776 48.241 li
430.818 53.4968 li
437.859 43.6289 li
444.901 44.9994 li
451.943 42.2184 li
458.984 43.8263 li
466.026 43.3056 li
473.068 43.8463 li
480.109 46.387 li
487.151 40.599 li
494.195 55.5568 li
501.237 56.6698 li
508.279 68.3917 li
515.32 64.1573 li
522.362 78.7661 li
529.403 79.4012 li
536.445 96.9512 li
543.487 85.8673 li
550.528 118.615 li
557.57 90.2162 li
564.612 139.828 li
571.653 59.7169 li
578.698 23.9331 li
0 .642634 1 0 cmyk
.40009 lw
2 lc
gsave
[2.86245 1.29414e-7 -3.92231e-7 -2.8611 299.4 191.983 ]ct
@
grestore newpath
346.315 11.4387 mo
353.357 29.5752 li
360.399 36.9683 li
367.44 40.1298 li
374.482 33.1573 li
381.524 36.9883 li
388.565 32.1073 li
395.607 38.1785 li
402.648 36.7708 li
409.693 34.9598 li
416.735 38.9081 li
423.776 47.5543 li
430.818 47.5429 li
437.859 38.7221 li
444.901 38.3044 li
451.943 36.1071 li
458.984 37.7322 li
466.026 43.8635 li
473.068 42.0124 li
480.109 45.8148 li
487.151 43.2141 li
494.195 49.4913 li
501.237 53.4482 li
508.279 77.2297 li
515.32 68.4947 li
522.362 83.1722 li
529.403 82.2309 li
536.445 96.565 li
543.487 87.1491 li
550.528 119.714 li
557.57 87.7185 li
564.612 153.032 li
571.653 66.2345 li
578.698 33.4491 li
.831937 .113405 1 .0184939 cmyk
gsave
[2.86245 1.29414e-7 -3.92231e-7 -2.8611 299.4 191.983 ]ct
@
grestore newpath
334.697 168.407 mo
334.697 2.4691 li
1 /0 /CSD get_res sepcs
1 sep
.21338 lw
0 lj
4 ml
gsave
[2.86245 1.29414e-7 -3.92231e-7 -2.8611 299.4 191.983 ]ct
@
grestore newpath
590.311 168.407 mo
590.311 2.46915 li
gsave
[2.86245 1.29414e-7 -3.92231e-7 -2.8611 299.4 191.983 ]ct
@
grestore newpath
334.697 168.407 mo
590.311 168.407 li
gsave
[2.86245 1.29414e-7 -3.92231e-7 -2.8611 299.4 191.983 ]ct
@
grestore newpath
334.697 2.4691 mo
590.311 2.46915 li
gsave
[2.86245 1.29414e-7 -3.92231e-7 -2.8611 299.4 191.983 ]ct
@
grestore newpath
456.586 162.536 mo
340.37 162.536 li
340.37 98.4476 li
389.519 98.4476 li
395.076 112.099 li
395.246 112.328 li
402.288 118.039 li
402.488 118.144 li
409.348 120.144 li
416.274 129.488 li
416.383 129.634 416.555 129.72 416.735 129.72 cv
416.748 129.72 416.762 129.719 416.775 129.718 cv
416.97 129.704 417.146 129.591 417.238 129.419 cv
423.896 117.092 li
430.394 124.245 li
430.503 124.364 430.657 124.432 430.819 124.432 cv
430.823 124.432 430.827 124.432 430.831 124.432 cv
430.997 124.428 431.153 124.353 431.259 124.225 cv
437.873 116.241 li
444.471 123.729 li
444.581 123.853 444.737 123.923 444.901 123.923 cv
444.919 123.923 444.937 123.922 444.955 123.92 cv
445.138 123.903 445.301 123.8 445.394 123.642 cv
451.943 112.567 li
456.586 120.415 li
456.586 162.536 li
416.658 128.083 mo
410.153 119.308 li
410.079 119.207 409.973 119.134 409.853 119.099 cv
402.919 117.077 li
396.082 111.531 li
390.756 98.4476 li
456.586 98.4476 li
456.586 118.166 li
452.436 111.151 li
452.332 110.977 452.145 110.87 451.943 110.87 cv
451.74 110.87 451.553 110.977 451.45 111.151 cv
444.81 122.381 li
438.289 114.981 li
438.18 114.858 438.024 114.787 437.86 114.787 cv
437.857 114.787 437.854 114.787 437.851 114.787 cv
437.683 114.79 437.525 114.865 437.418 114.995 cv
430.798 122.987 li
424.2 115.724 li
424.091 115.604 423.937 115.537 423.776 115.537 cv
423.753 115.537 423.73 115.538 423.707 115.541 cv
423.523 115.563 423.36 115.674 423.272 115.837 cv
416.658 128.083 li
gsave
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 286.299 205.512 ]ct
[117.36 -5.30596e-6 -8.94286e-6 65.2331 53.4985 42.4034 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 205 
/H 114 
/M[205 0 0 -114 0 114 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 205 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 205 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 205 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 205 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
q#H9[]*eTDnc7;KJdLcM!!_uoV[8q$!!_QcJcNOc`!_/)!=K/'!0[_p#lk2#!9"69$0)<l#,)$R!!<<@
-n>3;Jf_oQ"!]9?');M0!YZUubnbmHpD*iM+WCpe!!<9:+!R3kW>>XU+r_'L!.k3s!!<BM&-B?AM?!\^
(E`PT"98QD$j)1a])Vm8&Jt<E!sBSP!n@:&!:0[e";2Q?!0mNb*=M?:JcO$q!?)LH!!*i@^AricrVus5
%/^)+(C?*%YQ+b>$ig9Z!3lM)"";Y!JcP!7!=9kH!!*-BUB$__!<sA=!!*-CnGn.@b5_PJ(qK^!!;6Bn
#pG?0XoJJ)-iF#G#8u=tJcO[.!<XDA!!*<BX8n@_!<O>7!.k3`!!*TKaT-nmnc/Y>r;Zj,'USlr!!"2@
!!*KBjoBu5eGoRnY5j.S!>$-%!4W"/.fB>J%27.iJcP$8!$V:@!=]a:!1Nrg,3])Z!65'?&/i1^JcP`L
!%RpI!=]^%!3ZA(+TMKE!!!HBL&eX^!$]\gJcOd1!>$-D!1<fe.fB>J%2873JcNpn!$V:@!=]aY!.k4J
!!"4"!2oku&/j:(JcOX-!%RpI!=]^D!0@0\+oMBA%2AX=JcNUe!$];\JcP0<!>$-9!2KSp.fB>J%27k(
JcO=$!$V:@!=]aN!/COS,5hLn!4)Y+&/imrJcP$8!%RpI!=]^9!1Nrg+oMBA%2A72JcO!p!$\oQJcPQG
!>$-.!3ZA(.KBGN!!!HAL&eX^!$V:@!=]am!.k46!!"46!0dHa&/k!<JcNpn!%RpI!=]^X!.k4J!!"2@
!!*NCNrZ9^!$^"pJcOI(!>$-M!0@0\.fB>J%28R<JcNUe!$V:@!=]ab!.k4A!!"4+!1s5l&/jU1JcO=$
!%RpI!=]^M!/COS+oMBA%2=Hq\,ZLQbQ*4pj8]2l)5.&"!!"MI!!*NBmf7q>bQ%Vdr;Zj-'YXR!!;ult
,)60"!!<3$&/g3&[K$:Wr;Zj-'@[#6!9X=^+oMBA%2>Q;R/d42lMuM:`;foM)8H6(!;c`r.fB>J%24d&
XT/>Er;Zj-'\rb@!8[\U,,P?u!!*WKq>c*I_#OHbr;Zj-'?L6+!:g*i+oMBA%2>00U]:B=huJ?/ci=(X
)79I"!!"MI!!*NBKE/L^!$V:@!=]ak!.k48!!"44!1!Tc&/jp:JcO!p!%RpI!=]^V!.k4L!!"2@!!*NC
N<$-^![7UEJcN%U!>$-u!.k46!!"MI!!*NBUB$\^!$V:@!=]b5!.k3n!!"4S!.k4E!!*WKNrZ9^!%RpI
!=]^u!.k4-!!"2@!!*NCX8n=^!$_%8JcNF`!>$-j!.k4A!!"MI!!*NBQiNo^!$V:@!=]b*!.k4$!!"4H
!.k1O&/g-$\,ZLYr;Zj-'@Hl4!9jI`+oMBA%2>K9RfEF4kl?;8`rH,O)86*&!;ult.fB>J%24^$Y5eVI
!!!*$!"BWs!4Dk-,0g1?!9*tZ&/h5CR/d4:r;Zj-'Cc'S!6P9A+oMBA%2?SXJcPZJ!$[7"VuQi0);P:E
!8[\U.fB>J%25fCO8o8(r;Zj-'`%f]!5SX8,/XD4!:9ae&/gi8U]:BEr;Zj-'BT:H!7_&L+oMBA%2?2M
LB%;ur;_ELZN(";):AM:!9jI`.fB>J%25E8RfEF3r;Zj-'^l$R!6bEC,.IW)!;HNp&/gH-Y5eVR!!!*$
!"BTr!4Dk-+oMBA%2@:lJcOs6!$[s6PQ1^q)=[]Y!6P9A.fB>J%26MWJcPZJ!$V:@!=]a(!3H5$,1cgH
!8.>Q&/hPLO8o81r;Zj-'D_]\!5SX8+oMBA%2?naJcP?A!$[R+T)\m')<LpN!7_&L.fB>J%26,LLB%;t
r;Zj-'SHIr!!"4e!.k43!!*WKT`CP^!%RpI!=]_2!.k3p!!"2@!!*NC^&W`br;ZgALB+CU!rr<4)28."
!!"MI!!*NBe,Y(#k5YK*r;Zj-'VbYr!!"5/!.k3i!!*WK^]8rdqZ$UGr;Zj-'9<-q!!"2@!!*NCh#N$,
h>dO"V>uMS!>$.F!.k3e!!"MI!!*NBaT-nmnc/Y5r;Zj-'USlr!!"5$!.k3t!!*WK[/bs^!%RpI!=]]q
!4W"/+oMBA%2@4jJcP$8!$[m4Q2gps)=IQW!6bEC.fB>J%26GUJcP`L!$V:@!=]a&!3ZA(+ohUp!3lM)
&/istJcOs6!%RpI!=]^;!1<fe+oMBA%2A=4JcNpn!$\uSJcPKE!>$-0!3H5$.fB>J%27OtJcOX-!$V:@
!=]aE!0@0\,4kke!5&:4&/iRiJcP?A!%RpI!=]^0!2KSp+oMBA%2@q)JcO=$!$\THJcGf_)2&""!!"MI
!!*NBdK"k!kl:],r;Zj-'VPMr!!"5-!.k3k!!*WK^&W`br;ZgIr;Zj-'9*!q!!4;D!!<3$%2=Ns[K$:O
c2`FriW&uj)5@2"!!"MI!!*NBnGn.@aoDDbr;Zj-'Yj^#!;c`r,)H;u!!*WKh#N$,h>dO*r;Zj-'<D1q
!!"2@!!*NCq>c*I_#OHZ_Z58gm/R.u)41E"!!"MI!!*NBjoBu5eGoRmr;Zj-'X[pr!!"5A!.k3W!!*WK
dK"k!kl:]5r;Zj-';5Dq!!"2@!!*NCmf7q>bQ%Ve\,_*\p](=+)3"X"!!4VM!!<3$%24Hr[K$:Nr;Zj-
'\!,7!9X=^,+S^u!!*WKnGn.@aoDDkr;Zj-'>OU"!;c`r+oMBA%2=j'XT/>Ff)UC&f`2$a)6<h"!!"MI
!!*NBq>c*I_#OHYr;Zj-'Zg?,!:g*i,*Dqu!!*WKjoBu5eGoS!r;Zj-'=@gq!!"2@!!*NCKE/L^!$]Ve
JcOj3!>$-B!1Nrg.fB>J%2811JcO!p!$V:@!=]aW!.k4L!!"3u!3?/&!!!QJL&eX^!%RpI!=]^l!.k46
!!"2@!!*NCUB$\^!$^_/JcNai!>$-a!.k4J!!"MI!!*NBNrZ9^!$V:@!=]b!!.k4-!!"4?!/ggX&/k<E
JcNUe!%RpI!=]^a!.k4A!!"2@!!*NCQiNo^!$^>$JcO-t!>$-V!/COS.fB>J%24Bp\,ZLPr;Zj-'[cu5
!9jI`,+ARu!!*WKmf7q>bQ%Vmr;Zj-'>=Hu!;ult+oMBA%2=d%Y5eVJ!!%TNYlFe9):SY<!9X=^.fB>J
%25K:R/d41r;Zj-'_)0T!6P9A,.[c+!;6Bn&/gN/XT/>Nr;Zj-'AWY?!8[\U+oMBA%2>lDO8o8)oDjIC
]DqsD)9Dl1!:g*i.fB>J%25*/U]:B<r;Zj-']oCI!7_&L,-Luu!!*WKKE/L^!%RpI!=]^j!.k48!!"2@
!!*NCT`CP^!$^Y-JcNgk!>$-_!.k4L!!"MI!!*NBN<$-^![.OD!rr<1'SZUr!!"4g!.k41!!*WKUB$\^
!%RpI!=]_4!.k3n!!"2@!!*NC^]8rdqZ$U?M#aIS!>$.)!.k4-!!"MI!!*NBX8n=^!$V:@!=]b>!.k3e
!!"4\!.k4<!!*WKQiNo^!%RpI!=]_)!.k4$!!"2@!!*NC[/bs^!$_@AJcN+W!>$-s!.k48!!"MI!!*NB
T`CP^!$V:@!=]b3!.k3p!!"4Q!.k4G!!*WKN<$-^!\+0M!rr<1'8?Lq!!"2@!!*NCe,Y(#k5YK+SH+lS
!>$.=!.k3n!!"MI!!*NB^]8rdqZ$U>r;Zj-'TW6r!!"4p!.k4(!!*WKX8n=^!%RpI!=]_=!.k3e!!"2@
!!*NCaT-nmnc/Y6OoV*S!>$.2!.k4$!!"MI!!*NB[/bs^!$V:@!=]`r!4W"/,0U%=!9=+\&/h/ARfEF<
r;Zj-'CPpQ!6bEC+oMBA%2?MVJcP`L!$[0uX8i>&!"^$&!4Dk-.fB>J%274kJcOs6!$V:@!=]a<!1<fe
,3o5\!6"p=&/i7`JcPZJ!%RpI!=]^'!3H5$+oMBA%2@UuJcOX-!$\9?MZ<bh)>X>b!5SX8.fB>J%26h`
JcP?A!$V:@!=]a1!2KSp,2`HQ!71]H&/hkULB%<(r;Zj-'8-@q!!"2@!!*NCdK"k!kl:]-RfJ`S!>$.;
!.k3p!!"MI!!*NB^&W`br;Zg@r;Zj-'TE*r!!4>E!.k3U!!*WKe,Y(#k5YK3r;Zj-';GPq!!"2@!!*NC
nGn.@aoDDc\c@<^p&G+))34d"!!"MI!!*NBh#N$,h>dO!r;Zj-'W_:r!!"58!.k3`!!*WKaT-nmnc/Y>
r;Zj-':8cq!!"2@!!*NCjoBu5eGoRnY5j.S!>$-%!4W"/.fB>J%27.iJcP$8!$V:@!=]a:!1Nrg,3])Z
!65'?&/i1^JcP`L!%RpI!=]^%!3ZA(+TMKE!!!HBL&eX^!$]\gJcOd1!>$-D!1<fe.fB>J%2873JcNpn
!$V:@!=]aY!.k4J!!"4"!2oku&/j:(JcOX-!%RpI!=]^D!0@0\+oMBA%2AX=JcNUe!$];\JcP0<!>$-9
!2KSp.fB>J%27k(JcO=$!$V:@!=]aN!/COS,5hLn!4)Y+&/imrJcP$8!%RpI!=]^9!1Nrg+oMBA%2A72
JcO!p!$\oQJcPQG!>$-.!3ZA(.KBGN!!!HAL&eX^!$V:@!=]am!.k46!!"46!0dHa&/k!<JcNpn!%RpI
!=]^X!.k4J!!"2@!!*NCNrZ9^!$^"pJcOI(!>$-M!0@0\.fB>J%28R<JcNUe!$V:@!=]ab!.k4A!!"4+
!1s5l&/jU1JcO=$!%RpI!=]^M!/COS+oMBA%2=Hq\,ZLQbQ*4pj8]2l)5.&"!!"MI!!*NBmf7q>bQ%Vd
r;Zj-'YXR!!;ult,)60"!!<3$&/g3&[K$:Wr;Zj-'@[#6!9X=^+oMBA%2>Q;R/d42lMuM:`;foM)8H6(
!;c`r.fB>J%24d&XT/>Er;Zj-'\rb@!8[\U,,P?u!!*WKq>c*I_#OHbr;Zj-'?L6+!:g*i+oMBA%2>00
U]:B=huJ?/ci=(X)79I"!!"MI!!*NBKE/L^!$V:@!=]ak!.k48!!"44!1!Tc&/jp:JcO!p!%RpI!=]^V
!.k4L!!"2@!!*NCN<$-^![7UEJcN%U!>$-u!.k46!!"MI!!*NBUB$\^!$V:@!=]b5!.k3n!!"4S!.k4E
!!*WKNrZ9^!%RpI!=]^u!.k4-!!"2@!!*NCX8n=^!$_%8JcNF`!>$-j!.k4A!!"MI!!*NBQiNo^!$V:@
!=]b*!.k4$!!"4H!.k1O&/g-$\,ZLYr;Zj-'@Hl4!9jI`+oMBA%2>K9RfEF4kl?;8`rH,O)86*&!;ult
.fB>J%24^$Y5eVI!!!*$!"BWs!4Dk-,0g1?!9*tZ&/h5CR/d4:r;Zj-'Cc'S!6P9A+oMBA%2?SXJcPZJ
!$[7"VuQi/)VkCF!8[\U.fB>J$l#cCO8o8(r;Zj,'`%f]!5SX8,/XD4!:9ae#pP`:V#UN!,lI]D#9)_)
JcO@%!<aA?!!*<D[/c!_!<aD@!.k3W!!33M!n..$!9sOb$6T3H!WjDEU&^\`!='G>!!33D!q62A!6kKE
#T1&OJcPNF!>cB/!3cG**X_rJrVus2%>Oqm!!*iAqu?a1%b1Q2!9aC`(C?W4P5k^f+VtFho`0RDc2[qO
$R$;_!!E?@&I&BV!.k1S!!!0.)%l`G"9KJS#6^4jYlFk0#oO?+!.k4%!!3cT,HrY^.KUb6$2=K%%Mp)`
+bClV+T`Ms#P\9#%i?81,(_$4+p&Z!#ESq;!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!3?0N~>

%%EndBinary
grestore
np
416.735 129.72 mo
416.555 129.72 416.383 129.634 416.274 129.488 cv
409.348 120.144 li
402.488 118.144 li
402.288 118.039 li
395.246 112.328 li
395.076 112.099 li
389.519 98.4476 li
390.756 98.4476 li
396.082 111.531 li
402.919 117.077 li
409.853 119.099 li
409.973 119.134 410.079 119.207 410.153 119.308 cv
416.658 128.083 li
423.272 115.837 li
423.36 115.674 423.523 115.563 423.707 115.541 cv
423.73 115.538 423.753 115.537 423.776 115.537 cv
423.937 115.537 424.091 115.604 424.2 115.724 cv
430.798 122.987 li
437.418 114.995 li
437.525 114.865 437.683 114.79 437.851 114.787 cv
437.854 114.787 437.857 114.787 437.86 114.787 cv
438.024 114.787 438.18 114.858 438.289 114.981 cv
444.81 122.381 li
451.45 111.151 li
451.553 110.977 451.74 110.87 451.943 110.87 cv
452.145 110.87 452.332 110.977 452.436 111.151 cv
456.586 118.166 li
456.586 120.415 li
451.943 112.567 li
445.394 123.642 li
445.301 123.8 445.138 123.903 444.955 123.92 cv
444.937 123.922 444.919 123.923 444.901 123.923 cv
444.737 123.923 444.581 123.853 444.471 123.729 cv
437.873 116.241 li
431.259 124.225 li
431.153 124.353 430.997 124.428 430.831 124.432 cv
430.827 124.432 430.823 124.432 430.819 124.432 cv
430.657 124.432 430.503 124.364 430.394 124.245 cv
423.896 117.092 li
417.238 129.419 li
417.146 129.591 416.97 129.704 416.775 129.718 cv
416.762 129.719 416.748 129.72 416.735 129.72 cv
gsave
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 286.299 205.512 ]ct
[68.1263 -3.08004e-6 -4.47143e-6 32.6165 102.733 75.0199 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 119 
/H 57 
/M[119 0 0 -57 0 57 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
P/@:HqW@ToRW8CQqLe;OU([M=q@2ZhU&a/iZGQ[hqW?IO\oIdqqLd0/_@ln]q@1OH_>qDSdT?TU=CeH1
k.*G)2Zl-'5\9nHYo;U?"!/^0(]=fB!9+!P0(:Ip1er2mk*[._)?Ls78H+7(!s8W1'cm8_M?!W/O"LN7
Zf^EF)OD?E2JIern,o9b!uD[]%Hmee!8oK5/d"%Ok2t;7[i,>l7>$6>"2=p?$69Qba8j*X^b3qc"#40F
k-u>])?V!CK7gB1hZEra+UnmZ!94'P0((=n=Q\b5)YP'N4+i0I"9&B(,Rk3?!<4[4/co/;k4]d\)?N!Q
K8fs7,Rk4Y!0R?P/tFTr=Q\c1)Pn>R4+i1E"0DY,,Rk49!3uUP0"ik==Q\bf)T<Tr4+i1%"3goL,Rk3n
!7CkP0&8,]=Q\bF)W_k=4+i0Z"760l,Rk3N!:g,P0)[C(=Q\b*)?W'RK*.,9![J3ap]-KXn1L:b!a+UI
kSg<:!]u$ehug+a![J3afDr5Xcn<$b!a+UIa;W&:!]u$e^]Vja![J3a\,atXYV+cb!a+UIW#Fe:!]u$e
TEFTa![J3aQiQ^XO=pMb!a+UIN>_p]K7a7.NroG/%1W%3PQ6[q!a+UIq&5M:!]u$enH5<a![J3akl@FX
i@_5b!a+UIfc%7:!]u$ed0%&a![J3aaT00X_(Ntb!a+UI\Jj!:!]u$eYliea![J3aW;toXTe>^b!a+UI
R2Y`:!]u$eOTYOa![J3aM?!W/N\1B8k2uFWQ5TfdK7iXqSc]$>%1VM$UB'4)XtBcXk2t;7[Mf3/K7hMQ
^&nE^%1UAY_Z7J)c7T0#k2s/lef"TOK7gB1h?*g)%1T69irG`)mOeQCk2r$Lp)3uoK7f6frW<3I%1S0p
s"9?b!a+UIpDTA:!]u$eN<95-%1W+5OoY#)SLstGk2tnHV&BCsK7i+bXTJVM%1UtjZ2i9)]e0@gk2sc(
`>Se>K7guBbl\"m%1TiJdK$O)h(Ab2k2rW]jVe1^K7fj"m/mD8%1S^*nc4e)r@S.Rk2qXA"$;-f"-*Hb
,Rk4X!0[EP/tOZs=Q\c0)Q"DS4+i1D"0M_-,Rk48!4)[P0"rq>=Q\be)TEZs4+i1$"3puM,Rk3m!7LqP
0&A2^=Q\bE)Whq>4+i0Y"7?6m,Rk3M!:p2P0)dI)=Q\b*)?`-SK*)4:!s0_W%JKje!0&T4=Q\cA)O23B
4+i1U".]Mq,Rk4I!29JP0!-`-=Q\c!)RUIb4+i15"2+d<,Rk4)!5\`P0$Q!M=Q\bV)V#`-4+i0j"5O%\
,Rk3^!9+!P0't7m=Q\b6)YG!M4+i0J"8r<',Rk3?!!"X3/co/;k4fj\)?N!QKCAu7!s0_W%Hmee!8oK4
/co/;k1CT\)?N!QK?s_7!s0_W%EJOe!5L54/co/;k-u>\)?N!QK<PI7!s0_W%B'9e!2(t4/co/;k*R(\
)?N!QK9-37!s0_W%>k/c/rqUd=Q\c?)OD?D4+i0F!s0_W%J^!e!:_\4/co/;k33e\)?N!QKAcp7!s0_W
%G:`e!7<F4/co/;k/eO\)?N!QK>@Z7!s0_W%ClJe!3n04/co/;k,B9\)?N!QK:rD7!s0_W%@I4e!0Jo4
/co/;k)C8]4+i.fNWT>.%1W(4P5t))Sh:(Hk2tkGVA]LtK7i(aXoe_N%1UqiZN/?)^+KIhk2s`'`Ynn?
K7grAc3"+n%1TfIdf?U)hC\k3k2rT\jr+:_K7fg!mK3M9%1S[)o)Ok)r[n7Sk2qXA"?V6g!s=Sd![J3a
pAgEXN@k97k2uIXPo9]cK7i[rSHAp=%1VP%U&a.)XY'ZWk2t>8[2K*.K7hPR]`S<]%1UDZ_>qD)bq9'"
k2s2meJ\KNK7gE2h#d^(%1T9:iW,Z)m4JHBk2r'MobmlnK7f9gr<!*H%1S0p!%s9a!a+UIp_oG:!]u$e
n,o6a![J3akQ%@Xi%D/b!a+UIfG_1:!]u$eci^ua![J3aa8j*XJ,~>

%%EndBinary
grestore
np
347.065 109.454 mo
374.551 109.454 li
.90573 .514275 .0514229 .00137331 cmyk
.40009 lw
1 lj
gsave
[2.86245 1.29414e-7 -3.92231e-7 -2.8611 299.4 191.983 ]ct
@
grestore newpath
391.891 109.62 mo
392.524 109.755 392.996 109.969 393.308 110.264 cv
393.743 110.676 393.961 111.179 393.961 111.775 cv
393.961 112.224 393.818 112.656 393.532 113.071 cv
393.245 113.483 392.85 113.786 392.352 113.975 cv
391.854 114.166 391.093 114.261 390.068 114.261 cv
385.772 114.261 li
385.772 114.012 li
386.115 114.012 li
386.496 114.012 386.768 113.892 386.934 113.651 cv
387.037 113.494 387.088 113.162 387.088 112.653 cv
387.088 106.776 li
387.088 106.213 387.022 105.858 386.894 105.712 cv
386.719 105.514 386.458 105.414 386.115 105.414 cv
385.772 105.414 li
385.772 105.165 li
389.707 105.165 li
390.44 105.165 391.027 105.22 391.471 105.326 cv
392.14 105.489 392.653 105.775 393.008 106.184 cv
393.36 106.593 393.537 107.062 393.537 107.595 cv
393.537 108.049 393.397 108.459 393.119 108.819 cv
392.842 109.18 392.432 109.446 391.891 109.62 cv
cp
388.376 109.26 mo
388.542 109.291 388.731 109.314 388.943 109.328 cv
389.155 109.343 389.39 109.351 389.644 109.351 cv
390.297 109.351 390.789 109.28 391.119 109.14 cv
391.448 108.999 391.7 108.785 391.874 108.496 cv
392.049 108.201 392.135 107.883 392.135 107.54 cv
392.135 107.008 391.917 106.556 391.485 106.181 cv
391.05 105.803 390.417 105.618 389.584 105.618 cv
389.138 105.618 388.734 105.666 388.376 105.763 cv
cp
388.376 113.606 mo
388.894 113.726 389.407 113.786 389.913 113.786 cv
390.724 113.786 391.342 113.603 391.766 113.239 cv
392.192 112.876 392.404 112.424 392.404 111.889 cv
392.404 111.534 392.306 111.194 392.115 110.868 cv
391.923 110.541 391.608 110.284 391.176 110.098 cv
390.741 109.909 390.205 109.815 389.564 109.815 cv
389.287 109.815 389.049 109.82 388.852 109.829 cv
388.657 109.838 388.497 109.852 388.376 109.875 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
398.624 113.374 mo
397.991 113.863 397.596 114.144 397.436 114.221 cv
397.196 114.332 396.938 114.387 396.663 114.387 cv
396.24 114.387 395.89 114.244 395.613 113.952 cv
395.338 113.663 395.2 113.28 395.2 112.807 cv
395.2 112.507 395.269 112.247 395.404 112.026 cv
395.587 111.723 395.905 111.437 396.36 111.171 cv
396.812 110.902 397.568 110.576 398.624 110.19 cv
398.624 109.949 li
398.624 109.337 398.527 108.916 398.332 108.687 cv
398.137 108.459 397.854 108.347 397.485 108.347 cv
397.201 108.347 396.978 108.421 396.812 108.573 cv
396.64 108.725 396.557 108.899 396.557 109.097 cv
396.572 109.486 li
396.572 109.692 396.517 109.852 396.411 109.964 cv
396.308 110.075 396.171 110.129 395.999 110.129 cv
395.833 110.129 395.698 110.072 395.593 109.955 cv
395.49 109.838 395.438 109.68 395.438 109.48 cv
395.438 109.094 395.633 108.742 396.028 108.419 cv
396.423 108.098 396.972 107.935 397.682 107.935 cv
398.229 107.935 398.678 108.027 399.025 108.21 cv
399.291 108.35 399.486 108.567 399.609 108.862 cv
399.692 109.054 399.732 109.449 399.732 110.041 cv
399.732 112.129 li
399.732 112.716 399.743 113.074 399.763 113.205 cv
399.786 113.337 399.823 113.425 399.875 113.468 cv
400.055 113.537 li
400.241 113.491 li
400.336 113.431 400.516 113.268 400.785 112.999 cv
400.785 113.374 li
400.284 114.046 399.803 114.381 399.348 114.381 cv
399.128 114.381 398.953 114.307 398.824 114.155 cv
398.695 114.003 398.627 113.743 398.624 113.374 cv
cp
398.624 112.939 mo
398.624 110.599 li
397.948 110.868 397.513 111.056 397.316 111.168 cv
396.964 111.365 396.709 111.571 396.557 111.786 cv
396.406 112.001 396.328 112.235 396.328 112.49 cv
396.328 112.813 396.426 113.079 396.617 113.294 cv
396.809 113.506 397.032 113.611 397.281 113.611 cv
397.622 113.611 398.069 113.388 398.624 112.939 cv
cp
f
405.213 107.935 mo
405.213 110.029 li
404.993 110.029 li
404.821 109.371 404.604 108.925 404.337 108.687 cv
404.071 108.45 403.733 108.33 403.321 108.33 cv
403.009 108.33 402.754 108.413 402.563 108.582 cv
402.371 108.748 402.274 108.931 402.274 109.131 cv
402.274 109.38 402.345 109.594 402.488 109.775 cv
402.628 109.958 402.909 110.152 403.336 110.358 cv
404.314 110.833 li
405.222 111.277 405.677 111.86 405.677 112.584 cv
405.677 113.142 405.465 113.594 405.042 113.938 cv
404.618 114.278 404.146 114.45 403.622 114.45 cv
403.247 114.45 402.817 114.384 402.334 114.249 cv
402.185 114.204 402.065 114.181 401.973 114.181 cv
401.87 114.181 401.79 114.238 401.73 114.355 cv
401.509 114.355 li
401.509 112.164 li
401.73 112.164 li
401.856 112.787 402.096 113.259 402.448 113.577 cv
402.8 113.895 403.198 114.052 403.636 114.052 cv
403.945 114.052 404.197 113.963 404.392 113.783 cv
404.586 113.6 404.684 113.383 404.684 113.128 cv
404.684 112.819 404.575 112.559 404.357 112.35 cv
404.14 112.138 403.708 111.872 403.061 111.551 cv
402.411 111.228 401.984 110.939 401.784 110.679 cv
401.584 110.424 401.483 110.104 401.483 109.715 cv
401.483 109.208 401.655 108.788 402.002 108.447 cv
402.351 108.107 402.797 107.935 403.347 107.935 cv
403.59 107.935 403.882 107.986 404.229 108.089 cv
404.455 108.158 404.606 108.192 404.684 108.192 cv
404.85 108.144 li
404.89 108.112 404.938 108.044 404.993 107.935 cv
cp
f
407.621 110.433 mo
407.618 111.343 407.838 112.061 408.288 112.579 cv
408.734 113.096 409.261 113.357 409.865 113.357 cv
410.266 113.357 410.615 113.245 410.912 113.025 cv
411.21 112.805 411.462 112.424 411.662 111.889 cv
411.868 112.021 li
411.777 112.633 411.502 113.191 411.05 113.694 cv
410.6 114.198 410.034 114.45 409.355 114.45 cv
408.617 114.45 407.984 114.164 407.457 113.589 cv
406.934 113.013 406.67 112.241 406.67 111.268 cv
406.67 110.218 406.939 109.4 407.477 108.813 cv
408.018 108.224 408.694 107.929 409.507 107.929 cv
410.197 107.929 410.764 108.155 411.204 108.61 cv
411.648 109.065 411.868 109.672 411.868 110.433 cv
cp
407.621 110.041 mo
410.466 110.041 li
410.446 109.649 410.4 109.371 410.328 109.211 cv
410.217 108.962 410.048 108.765 409.828 108.622 cv
409.604 108.479 409.372 108.407 409.132 108.407 cv
408.76 108.407 408.428 108.55 408.136 108.839 cv
407.844 109.128 407.672 109.529 407.621 110.041 cv
cp
f
414.802 104.722 mo
414.802 112.873 li
414.802 113.257 414.828 113.514 414.885 113.64 cv
414.943 113.763 415.029 113.857 415.146 113.923 cv
415.26 113.986 415.478 114.018 415.796 114.018 cv
415.796 114.261 li
412.784 114.261 li
412.784 114.018 li
413.065 114.018 413.257 113.989 413.36 113.932 cv
413.463 113.875 413.543 113.777 413.6 113.646 cv
413.66 113.511 413.689 113.254 413.689 112.873 cv
413.689 107.291 li
413.689 106.599 413.675 106.175 413.643 106.015 cv
413.612 105.858 413.56 105.749 413.489 105.692 cv
413.42 105.632 413.334 105.603 413.225 105.603 cv
413.111 105.603 412.962 105.64 412.784 105.712 cv
412.67 105.474 li
414.502 104.722 li
cp
f
418.071 104.722 mo
418.257 104.722 418.418 104.791 418.549 104.922 cv
418.681 105.054 418.75 105.214 418.75 105.4 cv
418.75 105.589 418.681 105.749 418.549 105.884 cv
418.418 106.018 418.257 106.087 418.071 106.087 cv
417.882 106.087 417.722 106.018 417.588 105.884 cv
417.453 105.749 417.384 105.589 417.384 105.4 cv
417.384 105.214 417.45 105.054 417.582 104.922 cv
417.716 104.791 417.88 104.722 418.071 104.722 cv
cp
418.63 107.935 mo
418.63 112.873 li
418.63 113.257 418.655 113.514 418.713 113.64 cv
418.767 113.769 418.85 113.863 418.959 113.926 cv
419.07 113.989 419.271 114.018 419.56 114.018 cv
419.56 114.261 li
416.574 114.261 li
416.574 114.018 li
416.875 114.018 417.075 113.989 417.178 113.932 cv
417.281 113.875 417.362 113.777 417.422 113.646 cv
417.485 113.511 417.513 113.254 417.513 112.873 cv
417.513 110.504 li
417.513 109.838 417.493 109.408 417.453 109.211 cv
417.422 109.068 417.373 108.968 417.307 108.913 cv
417.238 108.856 417.147 108.831 417.029 108.831 cv
416.904 108.831 416.752 108.862 416.574 108.931 cv
416.48 108.687 li
418.332 107.935 li
cp
f
422.116 109.237 mo
422.837 108.37 423.524 107.935 424.177 107.935 cv
424.512 107.935 424.801 108.021 425.041 108.187 cv
425.285 108.356 425.477 108.63 425.62 109.016 cv
425.717 109.285 425.766 109.697 425.766 110.25 cv
425.766 112.873 li
425.766 113.262 425.797 113.526 425.86 113.666 cv
425.912 113.777 425.992 113.863 426.101 113.926 cv
426.209 113.989 426.413 114.018 426.707 114.018 cv
426.707 114.261 li
423.667 114.261 li
423.667 114.018 li
423.796 114.018 li
424.083 114.018 424.28 113.975 424.395 113.889 cv
424.509 113.803 424.589 113.674 424.632 113.503 cv
424.652 113.437 424.661 113.225 424.661 112.873 cv
424.661 110.358 li
424.661 109.8 424.586 109.394 424.44 109.14 cv
424.297 108.888 424.051 108.762 423.708 108.762 cv
423.175 108.762 422.646 109.051 422.116 109.634 cv
422.116 112.873 li
422.116 113.288 422.142 113.546 422.19 113.643 cv
422.253 113.774 422.339 113.869 422.448 113.929 cv
422.56 113.989 422.783 114.018 423.118 114.018 cv
423.118 114.261 li
420.075 114.261 li
420.075 114.018 li
420.213 114.018 li
420.525 114.018 420.736 113.94 420.845 113.783 cv
420.954 113.623 421.011 113.32 421.011 112.873 cv
421.011 110.593 li
421.011 109.855 420.994 109.406 420.96 109.245 cv
420.925 109.085 420.874 108.974 420.805 108.916 cv
420.736 108.859 420.642 108.831 420.527 108.831 cv
420.401 108.831 420.25 108.862 420.075 108.931 cv
419.978 108.687 li
421.827 107.935 li
422.116 107.935 li
cp
f
428.23 110.433 mo
428.224 111.343 428.448 112.061 428.894 112.579 cv
429.341 113.096 429.868 113.357 430.472 113.357 cv
430.872 113.357 431.224 113.245 431.522 113.025 cv
431.82 112.805 432.069 112.424 432.272 111.889 cv
432.478 112.021 li
432.384 112.633 432.112 113.191 431.659 113.694 cv
431.207 114.198 430.643 114.45 429.962 114.45 cv
429.224 114.45 428.591 114.164 428.067 113.589 cv
427.54 113.013 427.277 112.241 427.277 111.268 cv
427.277 110.218 427.546 109.4 428.084 108.813 cv
428.625 108.224 429.301 107.929 430.114 107.929 cv
430.804 107.929 431.37 108.155 431.814 108.61 cv
432.255 109.065 432.478 109.672 432.478 110.433 cv
cp
428.23 110.041 mo
431.076 110.041 li
431.053 109.649 431.007 109.371 430.935 109.211 cv
430.824 108.962 430.658 108.765 430.434 108.622 cv
430.214 108.479 429.982 108.407 429.739 108.407 cv
429.369 108.407 429.037 108.55 428.743 108.839 cv
428.451 109.128 428.279 109.529 428.23 110.041 cv
cp
f
347.065 128.875 mo
374.551 128.875 li
0 .642634 1 0 cmyk
gsave
[2.86245 1.29414e-7 -3.92231e-7 -2.8611 299.4 191.983 ]ct
@
grestore newpath
389.785 133.436 mo
389.785 133.685 li
385.886 133.685 li
385.886 133.436 li
386.209 133.436 li
386.584 133.436 386.859 133.324 387.028 133.107 cv
387.137 132.964 387.188 132.618 387.188 132.074 cv
387.188 126.197 li
387.188 125.737 387.16 125.433 387.103 125.285 cv
387.057 125.173 386.965 125.079 386.828 124.999 cv
386.63 124.89 386.424 124.836 386.209 124.836 cv
385.886 124.836 li
385.886 124.587 li
389.785 124.587 li
389.785 124.836 li
389.458 124.836 li
389.086 124.836 388.817 124.947 388.645 125.165 cv
388.534 125.308 388.479 125.651 388.479 126.197 cv
388.479 132.074 li
388.479 132.535 388.508 132.838 388.565 132.987 cv
388.611 133.098 388.706 133.193 388.849 133.273 cv
389.04 133.382 389.244 133.436 389.458 133.436 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
392.341 128.658 mo
393.062 127.791 393.749 127.359 394.405 127.359 cv
394.74 127.359 395.026 127.442 395.269 127.611 cv
395.51 127.777 395.704 128.054 395.847 128.438 cv
395.945 128.707 395.993 129.119 395.993 129.671 cv
395.993 132.294 li
395.993 132.684 396.025 132.95 396.088 133.087 cv
396.136 133.199 396.217 133.287 396.325 133.35 cv
396.434 133.41 396.637 133.442 396.932 133.442 cv
396.932 133.685 li
393.892 133.685 li
393.892 133.442 li
394.021 133.442 li
394.307 133.442 394.508 133.399 394.619 133.313 cv
394.734 133.224 394.814 133.096 394.86 132.927 cv
394.877 132.858 394.886 132.649 394.886 132.294 cv
394.886 129.779 li
394.886 129.222 394.814 128.815 394.668 128.564 cv
394.522 128.309 394.279 128.183 393.932 128.183 cv
393.4 128.183 392.87 128.475 392.341 129.056 cv
392.341 132.294 li
392.341 132.712 392.367 132.97 392.418 133.067 cv
392.481 133.196 392.567 133.29 392.676 133.35 cv
392.785 133.41 393.008 133.442 393.343 133.442 cv
393.343 133.685 li
390.303 133.685 li
390.303 133.442 li
390.437 133.442 li
390.749 133.442 390.961 133.362 391.07 133.204 cv
391.182 133.047 391.236 132.744 391.236 132.294 cv
391.236 130.017 li
391.236 129.276 391.219 128.827 391.184 128.667 cv
391.15 128.506 391.099 128.398 391.03 128.34 cv
390.961 128.28 390.87 128.252 390.752 128.252 cv
390.626 128.252 390.477 128.286 390.303 128.352 cv
390.203 128.109 li
392.055 127.359 li
392.341 127.359 li
cp
f
398.985 124.146 mo
399.173 124.146 399.334 124.212 399.465 124.346 cv
399.597 124.478 399.663 124.635 399.663 124.824 cv
399.663 125.01 399.597 125.173 399.465 125.308 cv
399.334 125.442 399.173 125.508 398.985 125.508 cv
398.799 125.508 398.638 125.442 398.504 125.308 cv
398.369 125.173 398.3 125.01 398.3 124.824 cv
398.3 124.635 398.366 124.478 398.498 124.346 cv
398.633 124.212 398.793 124.146 398.985 124.146 cv
cp
399.543 127.359 mo
399.543 132.294 li
399.543 132.681 399.571 132.935 399.629 133.064 cv
399.683 133.19 399.766 133.287 399.875 133.35 cv
399.984 133.41 400.184 133.442 400.476 133.442 cv
400.476 133.685 li
397.49 133.685 li
397.49 133.442 li
397.791 133.442 397.991 133.413 398.091 133.356 cv
398.195 133.296 398.278 133.201 398.338 133.067 cv
398.398 132.932 398.429 132.675 398.429 132.294 cv
398.429 129.928 li
398.429 129.262 398.409 128.83 398.369 128.632 cv
398.338 128.489 398.289 128.392 398.22 128.335 cv
398.154 128.28 398.063 128.252 397.945 128.252 cv
397.82 128.252 397.668 128.286 397.49 128.352 cv
397.396 128.109 li
399.248 127.359 li
cp
f
403.026 125.522 mo
403.026 127.539 li
404.46 127.539 li
404.46 128.008 li
403.026 128.008 li
403.026 131.991 li
403.026 132.392 403.084 132.661 403.198 132.798 cv
403.313 132.938 403.459 133.007 403.636 133.007 cv
403.785 133.007 403.928 132.961 404.065 132.869 cv
404.206 132.775 404.312 132.641 404.389 132.463 cv
404.649 132.463 li
404.492 132.901 404.272 133.23 403.985 133.453 cv
403.699 133.673 403.404 133.785 403.101 133.785 cv
402.895 133.785 402.691 133.728 402.494 133.613 cv
402.299 133.499 402.153 133.336 402.059 133.124 cv
401.964 132.912 401.919 132.583 401.919 132.14 cv
401.919 128.008 li
400.945 128.008 li
400.945 127.788 li
401.192 127.688 401.443 127.522 401.701 127.287 cv
401.959 127.053 402.188 126.775 402.388 126.452 cv
402.491 126.283 402.634 125.971 402.817 125.522 cv
cp
f
406.347 132.383 mo
406.559 132.383 406.733 132.455 406.876 132.601 cv
407.019 132.746 407.091 132.921 407.091 133.127 cv
407.091 133.333 407.019 133.508 406.874 133.653 cv
406.728 133.799 406.553 133.874 406.347 133.874 cv
406.141 133.874 405.966 133.799 405.82 133.653 cv
405.674 133.508 405.603 133.333 405.603 133.127 cv
405.603 132.918 405.674 132.741 405.82 132.598 cv
405.966 132.455 406.141 132.383 406.347 132.383 cv
cp
f
411.657 132.738 mo
411.657 129.39 li
408.313 129.39 li
408.313 128.841 li
411.657 128.841 li
411.657 125.508 li
412.192 125.508 li
412.192 128.841 li
415.547 128.841 li
415.547 129.39 li
412.192 129.39 li
412.192 132.738 li
cp
f
416.051 133.685 mo
416.051 133.436 li
416.394 133.436 li
416.778 133.436 417.052 133.313 417.213 133.067 cv
417.31 132.918 417.359 132.586 417.359 132.074 cv
417.359 126.197 li
417.359 125.631 417.296 125.276 417.17 125.133 cv
416.995 124.936 416.737 124.836 416.394 124.836 cv
416.051 124.836 li
416.051 124.587 li
419.755 124.587 li
421.114 124.587 422.148 124.741 422.857 125.05 cv
423.567 125.359 424.137 125.874 424.569 126.595 cv
425.001 127.313 425.216 128.146 425.216 129.087 cv
425.216 130.355 424.832 131.413 424.063 132.26 cv
423.201 133.21 421.884 133.685 420.118 133.685 cv
cp
418.647 133.027 mo
419.216 133.153 419.692 133.213 420.075 133.213 cv
421.114 133.213 421.976 132.849 422.66 132.12 cv
423.344 131.39 423.688 130.403 423.688 129.156 cv
423.688 127.9 423.344 126.91 422.66 126.183 cv
421.976 125.459 421.097 125.099 420.024 125.099 cv
419.62 125.099 419.162 125.165 418.647 125.293 cv
cp
f
427.732 124.146 mo
427.921 124.146 428.081 124.212 428.213 124.346 cv
428.345 124.478 428.411 124.635 428.411 124.824 cv
428.411 125.01 428.345 125.173 428.213 125.308 cv
428.081 125.442 427.921 125.508 427.732 125.508 cv
427.546 125.508 427.386 125.442 427.251 125.308 cv
427.117 125.173 427.048 125.01 427.048 124.824 cv
427.048 124.635 427.114 124.478 427.246 124.346 cv
427.38 124.212 427.54 124.146 427.732 124.146 cv
cp
428.29 127.359 mo
428.29 132.294 li
428.29 132.681 428.319 132.935 428.376 133.064 cv
428.431 133.19 428.514 133.287 428.622 133.35 cv
428.731 133.41 428.932 133.442 429.224 133.442 cv
429.224 133.685 li
426.235 133.685 li
426.235 133.442 li
426.539 133.442 426.739 133.413 426.839 133.356 cv
426.942 133.296 427.025 133.201 427.085 133.067 cv
427.145 132.932 427.177 132.675 427.177 132.294 cv
427.177 129.928 li
427.177 129.262 427.157 128.83 427.117 128.632 cv
427.085 128.489 427.037 128.392 426.968 128.335 cv
426.902 128.28 426.81 128.252 426.693 128.252 cv
426.567 128.252 426.415 128.286 426.235 128.352 cv
426.143 128.109 li
427.995 127.359 li
cp
f
433.961 127.359 mo
433.961 129.45 li
433.74 129.45 li
433.569 128.795 433.351 128.346 433.085 128.109 cv
432.819 127.871 432.481 127.754 432.069 127.754 cv
431.757 127.754 431.502 127.837 431.31 128.003 cv
431.116 128.169 431.021 128.352 431.021 128.552 cv
431.021 128.801 431.093 129.016 431.236 129.196 cv
431.376 129.379 431.657 129.573 432.083 129.779 cv
433.062 130.257 li
433.969 130.698 434.425 131.282 434.425 132.008 cv
434.425 132.566 434.213 133.015 433.789 133.359 cv
433.365 133.702 432.893 133.874 432.369 133.874 cv
431.994 133.874 431.565 133.805 431.081 133.671 cv
430.932 133.625 430.812 133.602 430.721 133.602 cv
430.617 133.602 430.537 133.662 430.477 133.779 cv
430.257 133.779 li
430.257 131.585 li
430.477 131.585 li
430.603 132.209 430.844 132.681 431.196 132.998 cv
431.548 133.316 431.946 133.476 432.384 133.476 cv
432.693 133.476 432.945 133.384 433.139 133.204 cv
433.334 133.024 433.431 132.807 433.431 132.549 cv
433.431 132.24 433.323 131.983 433.105 131.771 cv
432.887 131.562 432.455 131.296 431.808 130.973 cv
431.159 130.652 430.732 130.36 430.532 130.103 cv
430.331 129.848 430.231 129.525 430.231 129.136 cv
430.231 128.629 430.403 128.209 430.749 127.868 cv
431.096 127.528 431.545 127.359 432.095 127.359 cv
432.338 127.359 432.63 127.41 432.976 127.513 cv
433.202 127.579 433.354 127.614 433.431 127.614 cv
433.597 127.568 li
433.637 127.536 433.686 127.465 433.74 127.359 cv
cp
f
437.121 125.522 mo
437.121 127.539 li
438.558 127.539 li
438.558 128.008 li
437.121 128.008 li
437.121 131.991 li
437.121 132.392 437.178 132.661 437.293 132.798 cv
437.407 132.938 437.553 133.007 437.734 133.007 cv
437.88 133.007 438.023 132.961 438.163 132.869 cv
438.3 132.775 438.409 132.641 438.484 132.463 cv
438.747 132.463 li
438.589 132.901 438.366 133.23 438.08 133.453 cv
437.794 133.673 437.499 133.785 437.195 133.785 cv
436.989 133.785 436.789 133.728 436.591 133.613 cv
436.394 133.499 436.248 133.336 436.154 133.124 cv
436.062 132.912 436.016 132.583 436.016 132.14 cv
436.016 128.008 li
435.043 128.008 li
435.043 127.788 li
435.286 127.688 435.538 127.522 435.796 127.287 cv
436.053 127.053 436.282 126.775 436.483 126.452 cv
436.586 126.283 436.729 125.971 436.912 125.522 cv
cp
f
440.719 124.146 mo
440.905 124.146 441.065 124.212 441.197 124.346 cv
441.329 124.478 441.397 124.635 441.397 124.824 cv
441.397 125.01 441.329 125.173 441.197 125.308 cv
441.065 125.442 440.905 125.508 440.719 125.508 cv
440.53 125.508 440.37 125.442 440.235 125.308 cv
440.101 125.173 440.032 125.01 440.032 124.824 cv
440.032 124.635 440.098 124.478 440.23 124.346 cv
440.364 124.212 440.527 124.146 440.719 124.146 cv
cp
441.277 127.359 mo
441.277 132.294 li
441.277 132.681 441.303 132.935 441.36 133.064 cv
441.415 133.19 441.498 133.287 441.606 133.35 cv
441.718 133.41 441.918 133.442 442.208 133.442 cv
442.208 133.685 li
439.222 133.685 li
439.222 133.442 li
439.523 133.442 439.723 133.413 439.826 133.356 cv
439.929 133.296 440.009 133.201 440.069 133.067 cv
440.132 132.932 440.161 132.675 440.161 132.294 cv
440.161 129.928 li
440.161 129.262 440.141 128.83 440.101 128.632 cv
440.069 128.489 440.021 128.392 439.955 128.335 cv
439.886 128.28 439.795 128.252 439.68 128.252 cv
439.554 128.252 439.4 128.286 439.222 128.352 cv
439.128 128.109 li
440.98 127.359 li
cp
f
445.087 124.146 mo
445.087 132.294 li
445.087 132.681 445.113 132.935 445.17 133.061 cv
445.227 133.187 445.313 133.281 445.431 133.344 cv
445.545 133.41 445.763 133.442 446.08 133.442 cv
446.08 133.685 li
443.066 133.685 li
443.066 133.442 li
443.35 133.442 443.541 133.413 443.642 133.356 cv
443.745 133.296 443.828 133.201 443.885 133.067 cv
443.945 132.932 443.974 132.675 443.974 132.294 cv
443.974 126.715 li
443.974 126.023 443.957 125.597 443.925 125.436 cv
443.894 125.279 443.845 125.17 443.773 125.113 cv
443.705 125.056 443.616 125.024 443.51 125.024 cv
443.393 125.024 443.247 125.062 443.066 125.133 cv
442.955 124.896 li
444.787 124.146 li
cp
f
448.903 124.146 mo
448.903 132.294 li
448.903 132.681 448.931 132.935 448.989 133.061 cv
449.046 133.187 449.132 133.281 449.246 133.344 cv
449.364 133.41 449.581 133.442 449.899 133.442 cv
449.899 133.685 li
446.885 133.685 li
446.885 133.442 li
447.168 133.442 447.36 133.413 447.46 133.356 cv
447.563 133.296 447.646 133.201 447.703 133.067 cv
447.764 132.932 447.792 132.675 447.792 132.294 cv
447.792 126.715 li
447.792 126.023 447.775 125.597 447.744 125.436 cv
447.712 125.279 447.663 125.17 447.592 125.113 cv
447.523 125.056 447.434 125.024 447.328 125.024 cv
447.211 125.024 447.065 125.062 446.885 125.133 cv
446.773 124.896 li
448.602 124.146 li
cp
f
347.065 148.299 mo
374.551 148.299 li
.831937 .113405 1 .0184939 cmyk
gsave
[2.86245 1.29414e-7 -3.92231e-7 -2.8611 299.4 191.983 ]ct
@
grestore newpath
389.785 152.857 mo
389.785 153.106 li
385.886 153.106 li
385.886 152.857 li
386.209 152.857 li
386.584 152.857 386.859 152.748 387.028 152.528 cv
387.137 152.385 387.188 152.042 387.188 151.495 cv
387.188 145.619 li
387.188 145.161 387.16 144.855 387.103 144.706 cv
387.057 144.594 386.965 144.5 386.828 144.42 cv
386.63 144.311 386.424 144.26 386.209 144.26 cv
385.886 144.26 li
385.886 144.011 li
389.785 144.011 li
389.785 144.26 li
389.458 144.26 li
389.086 144.26 388.817 144.368 388.645 144.586 cv
388.534 144.729 388.479 145.075 388.479 145.619 cv
388.479 151.495 li
388.479 151.956 388.508 152.262 388.565 152.408 cv
388.611 152.52 388.706 152.617 388.849 152.697 cv
389.04 152.803 389.244 152.857 389.458 152.857 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
392.341 148.082 mo
393.062 147.215 393.749 146.78 394.405 146.78 cv
394.74 146.78 395.026 146.863 395.269 147.032 cv
395.51 147.198 395.704 147.475 395.847 147.859 cv
395.945 148.131 395.993 148.54 395.993 149.095 cv
395.993 151.718 li
395.993 152.108 396.025 152.371 396.088 152.508 cv
396.136 152.62 396.217 152.708 396.325 152.771 cv
396.434 152.831 396.637 152.863 396.932 152.863 cv
396.932 153.106 li
393.892 153.106 li
393.892 152.863 li
394.021 152.863 li
394.307 152.863 394.508 152.82 394.619 152.734 cv
394.734 152.648 394.814 152.52 394.86 152.348 cv
394.877 152.282 394.886 152.07 394.886 151.718 cv
394.886 149.201 li
394.886 148.643 394.814 148.239 394.668 147.985 cv
394.522 147.73 394.279 147.604 393.932 147.604 cv
393.4 147.604 392.87 147.896 392.341 148.48 cv
392.341 151.718 li
392.341 152.133 392.367 152.391 392.418 152.488 cv
392.481 152.617 392.567 152.714 392.676 152.774 cv
392.785 152.834 393.008 152.863 393.343 152.863 cv
393.343 153.106 li
390.303 153.106 li
390.303 152.863 li
390.437 152.863 li
390.749 152.863 390.961 152.786 391.07 152.628 cv
391.182 152.468 391.236 152.165 391.236 151.718 cv
391.236 149.438 li
391.236 148.7 391.219 148.251 391.184 148.091 cv
391.15 147.927 391.099 147.819 391.03 147.762 cv
390.961 147.701 390.87 147.673 390.752 147.673 cv
390.626 147.673 390.477 147.707 390.303 147.773 cv
390.203 147.533 li
392.055 146.78 li
392.341 146.78 li
cp
f
398.985 143.567 mo
399.174 143.567 399.334 143.633 399.465 143.767 cv
399.597 143.899 399.663 144.059 399.663 144.245 cv
399.663 144.434 399.597 144.594 399.465 144.729 cv
399.334 144.863 399.174 144.929 398.985 144.929 cv
398.799 144.929 398.638 144.863 398.504 144.729 cv
398.369 144.594 398.3 144.434 398.3 144.245 cv
398.3 144.059 398.366 143.899 398.498 143.767 cv
398.633 143.633 398.793 143.567 398.985 143.567 cv
cp
399.543 146.78 mo
399.543 151.718 li
399.543 152.102 399.571 152.359 399.629 152.485 cv
399.683 152.614 399.766 152.708 399.875 152.771 cv
399.984 152.831 400.184 152.863 400.476 152.863 cv
400.476 153.106 li
397.49 153.106 li
397.49 152.863 li
397.791 152.863 397.991 152.834 398.091 152.777 cv
398.195 152.72 398.278 152.623 398.338 152.491 cv
398.398 152.356 398.429 152.099 398.429 151.718 cv
398.429 149.349 li
398.429 148.683 398.409 148.251 398.369 148.056 cv
398.338 147.913 398.289 147.813 398.22 147.756 cv
398.154 147.701 398.063 147.673 397.945 147.673 cv
397.82 147.673 397.668 147.707 397.49 147.773 cv
397.396 147.533 li
399.248 146.78 li
cp
f
403.026 144.943 mo
403.026 146.96 li
404.46 146.96 li
404.46 147.43 li
403.026 147.43 li
403.026 151.415 li
403.026 151.813 403.084 152.082 403.198 152.222 cv
403.313 152.359 403.459 152.428 403.636 152.428 cv
403.785 152.428 403.928 152.382 404.065 152.291 cv
404.206 152.199 404.312 152.065 404.389 151.884 cv
404.649 151.884 li
404.492 152.322 404.272 152.651 403.985 152.874 cv
403.699 153.095 403.404 153.206 403.101 153.206 cv
402.895 153.206 402.691 153.149 402.494 153.035 cv
402.299 152.92 402.153 152.757 402.059 152.545 cv
401.964 152.334 401.919 152.007 401.919 151.564 cv
401.919 147.43 li
400.945 147.43 li
400.945 147.209 li
401.192 147.112 401.443 146.943 401.701 146.709 cv
401.959 146.474 402.188 146.196 402.388 145.876 cv
402.491 145.704 402.634 145.395 402.817 144.943 cv
cp
f
406.347 151.804 mo
406.559 151.804 406.733 151.879 406.876 152.025 cv
407.019 152.168 407.091 152.345 407.091 152.551 cv
407.091 152.754 407.019 152.929 406.874 153.075 cv
406.728 153.22 406.553 153.295 406.347 153.295 cv
406.141 153.295 405.966 153.22 405.82 153.075 cv
405.674 152.929 405.603 152.754 405.603 152.551 cv
405.603 152.339 405.674 152.162 405.82 152.019 cv
405.966 151.876 406.141 151.804 406.347 151.804 cv
cp
f
%ADOBeginSubsetFont: PBAAAA+CourierNewPSMT Initial
ct_T42Dict begin
-0.121 -0.68 0.621 1.02
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+CourierNewPSMT
Type42DictBegin
[<00010000000c000c000c000c4f532f32132c8072000000cc000000606376
7420aa0e65140000012c0000078c6670676d5ca2610e000008b8000006ca
676c7966329f8efb0000831400001e2268656164e4790dae00000f840000
0036686865610aae01c400000fbc00000024686d7478d094b77a00000fe0
00001d6c6c6f63616152690800002d4c00001d686d61787013170b740000
4ab4000000206e616d653a84527100004ad400002d7a70726570afc0175c
0000785000000ac367646972000000000000000000000000000304cd0190
00050008059a05330000011d059a05330000036100660212050502070309
020205020404e0002effc00078430000000900000000544d432000400020
25cc04e7fe7e000006a90267400001ffffff000003620492000000200015
04e700000492001b04e7001e0362001e0000ffdf0000ffdf0000ffe2fe7e
000004e70000fefdffff02d7000000540000005400000000000000000054
00540095005400540054014d005400540054006400d4006d009100970054
013301ce00a90040000f005400d4000301000158003c0093007700d50055
fff10054002100a300ef002c00390068fffe0011007f00fe017d00a30102
0002000f003800d300650090023c032b04eb0001002a013003ab0182002d
003c00540096001700cf0158002aff0a003c00b3021d023c0002005400cb
035f082cff30fff201c004c9ff6200a2013c02d604ae00cc00ed01220400
fe83ff8bff9bff9c000e00f4031dfdc3ff31ff6d0054005500600075007c
007f0080009e00cd0159023d02bfff89001100580065007f00b700cb012b
040004600012005200550084009800b900be00cf00d800e50101010f0128
018001d301d40500fdc4fec4ff49ff62ff6f0045004e00500080010f011d
01250141025a035a03ad03d7fde3fee0ff1e0011005400760078007b008f
009000ab00d700d900db0103020a0254025503ad001b003d005a00620091
0093009e00a900c900df01080134013a0140018601ac02760403fdc40003
0004001500390048005400640091009b00a300a500af00c400d000d100d7
00f100fe01030119012b0155015c017d0185018e019401a501ac01ae01eb
020502d80303038104c604ebfed6ff0aff9affa9001b001b001c00200029
002c0038004c006d00cd00ea0128012a012c013f01d2022b022c0301040c
fdfefe33ff47ff7fffc5ffd7002300270038003d00440045004d00570062
0079008300bb00c600cd00cd00ce00e600f701010103010a0112011d0120
012301520153017501ac01ad01ef01fd0216021d0238026c02b202d4032b
03cd045704aefdb4fe15feb2feeffeffffabffb0ffc3ffcc000200540036
003800430055005d00700073007c007f00b500bb00c500e400e900f50101
0106011f01280148014b0155019801ac01df01fc02000208027e02ac02ff
033d039003c904190498fe4efe6dfe98feb3ff34ff4d0001000300050019
00340034003a003c0055005900730082009100a300aa00ab00b300cc00d6
00ee0118011e013001490156015801600168016f01700171017b017c0185
01a901b401bb01d601db01ee020402060215022b022b02630282029302b4
02c402d602e40300035303580371037b039303b403d003e80410042c0430
044d04600479047a05000503061608ccfc17fc6dfd62fd9afdc3fe2efe44
fe6bfe8bfec1fed6fee2ff0bffbfffe500060030003c005900670073007d
007f0086008e009f00a900aa00d600e100e700eb00f100f200f501030109
011a011e011f012c013f01430149014d015601570159016601660168016a
0175018001ab01b201bc01c001c101c901cb01d201dc01ef02010215022e
022e023b023d025502660282029a02ab02b002d902d902f502f90326032c
03320333033e03600371038703880393039703dc03e50402041504310453
047f04c7050305640596059b05c405c805ea0610065b0054005400540054
00000000000000000000000003cc02c1043e036c00a00050020303ea02d2
023c017d02fb01a7021d01c102f5021d035003500243023b000201bb0048
006d0014079b06210621021400100760000000000299022d03570426030c
007400500000025a0286026000a601bc00fb02480152017603cd02a0025f
039b0492043e01d7007f02c10400020d01f600410041013e01a901d30071
02d6022d03af04ce00000000050803fc056d020dff8704e7050203d20000
043d010203ca015a01ed0150021601c1013b028e0023015a011001ed0023
0149003900d9004d00b90157003804e0038c024a02db0039006c009301c1
03cc02bb006c02bb01a200f2003800fe01720150019c0331007e01710054
0039006a0294002202700222007c005500f30182011500d700fb01ab0124
02660004030d026300d40259003c00d00112022e017e0034006d008b018a
002c01fd01c000cc02910036016503befc19fd280201fced01b1034800b1
01fb04c904c9020400fb01c1021d01300108014000e100a3009b005500c6
0021032600a900380005022c0003005d0060004c001102f5017c026c0069
019803e901a50241004f0065037302460196fef504410333004100ba0119
014306390800053c051d0434041504e7003e006700670000066804df0582
0067006703d303f4ff59ff21fe5f050efedc007a00d9004800db018b00b3
004800da0116015e015104ff024b04ffff5600ab02af04dcff17010c0121
00d1ff300149feb5013c0124ff200171ff0b01510086005e06a9fd99048b
04850475047c0000fffb007b00860092009a00c200d500a4001e00270039
004c0054005c00620069002d0030003200350038003e004200440049004c
00500056005a006000640066006e00710078009d00ac00b10040004b0055
005e00620066006a007100730077007b007e00820087008c0091009600a6
00d102aa029f0321028802c50276026900da00da03c70340015600d40489
047f005300240051011300690037003c001f008c008cffd3005a0029001b
010f0134007f00540054ffebffd6ffa8fdcf00a600a600920092064200eb
06430028004f01f6041a01054043585554403f3e3d3c3b3a393837353433
3231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a1918171615
14131211100f0e0d0c0b0a090807060504030201002c4523466020b02660
b004262348482d2c452346236120b02661b004262348482d2c45234660b0
206120b04660b004262348482d2c4523462361b0206020b02661b02061b0
04262348482d2c45234660b0406120b06660b004262348482d2c45234623
61b0406020b02661b04061b004262348482d2c0110203c003c2d2c204523
20b0cd442320b8015a51582320b08d44235920b0ed51582320b04d442359
20b09051582320b00d44235921212d2c20204518684420b001602045b046
76688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00
b0172370b101173e01b0172370b10217453ab10200080d2d2c45b01a2344
45b01923442d2c2045b00325456164b050515845441b2121592d2cb00143
632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a
2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b0
0361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2c
b01243588745b0112bb0172344b0177ae41b038a45186920b01723448a8a
8720b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2c
b0022546608a46b040618c482d2c4b53205c58b002855958b00185592d2c
20b0032545b019234445b01a23444565234520b00325606a20b009234223
688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a54582321
b03f1b235961441cb114008a5279b31940201945208a54582321b03f1b23
5961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b
2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343650b
2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b00052
5823b002253823b002256538008a63381b212121212159012d2c4bb06451
584569b00943608a103a1b212121592d2c01b005251023208af500b00160
23edec2d2c01b005251023208af500b0016123edec2d2c01b0062510f500
edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2cb02b
2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b8026923
701020b802694520b0005058b00161593a2f182d2c21210c6423648bb840
00622d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c
21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c642364
8bb84000626023212d2cb4000100000015b00826b00826b00826b008260f
10161345683ab001162d2cb4000100000015b00826b00826b00826b00826
0f1016134568653ab001162d2c4b53234b515a5820458a60441b2121592d
2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d2c4b
5458381b2121592d2cb0134358031b02592d2cb0134358021b03592d2c4b
54b012435c5a58381b2121592d2cb012435c580cb00425b00425060c6423
646164b807085158b00425b00425012046b01060482046b0106048590a21
211b2121592d2cb012435c580cb00425b00425060c6423646164b8070851
58b00425b00425012046b8fff060482046b8fff06048590a21211b212159
2d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b21
21592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54b004
26024b545a8a8a0ab012435c5a58381b2121592d2c462346608a8a462320
468a608a61b8ff8062232010238ab9032603268a70456020b0005058b001
61b8ffba8b1bb0468c59b0106068013a2d2cb1020042b123018851b14001
88535a58b910000020885458b202010243604259b12401885158b9200000
40885458b2020202436042b12401885458b2022002436042004b014b5258
b2020802436042591bb940000080885458b202040243604259b940000080
63b80100885458b202080243604259b94000010063b80200885458b20210
0243604259b12601885158b94000020063b80400885458b2024002436042
59b94000040063b80800885458b202800243604259b12801885158b94000
080063b81000885458ba000201000002436042595959595959592d2cb002
4354584b53234b515a58381b2121591b21212121592d2c20b0024354b001
23b07b237821b1000243b072237921b10002438ab020205c58212121b063
1c598a8a208a208a23b81000635658b81000635658b00426b0015bb00426
b00426b004261b21212121b13600231c591b2159b0042623b08062205c58
8a5c8a5a23212321b01d1c598ab08062205c5821212321b00e1c59b00426
b00161b8ff981c23212d0000000100000006eb8589da411d5f0f3cf50809
080000000000a325516100000000d62f890fff07fa9004fb082b00000009
00010000000000000001000006a9fd99000004cdff07ff5a04fb00010000
000000000000000000000000000304cd00670000000004cd0000000001eb
010a00bb00e400bb00fe01e1025d012d00e20090012b00ba01cd00e600e5
00e400ab00c300d600c4011200d300e7011301cd01380062006500940113
00d700110057007f009e0058009f0080006b00e500ab005900800018002e
006800b30068005800b9008f0053001000250050006300d5023d00e3013c
00e4000001bc0090002d00ab007e008000d7007d005500bd00b400bf00bb
0015006c0091002d008000ab00cf0092005b003b00380065009500ed0195
023c019400bb00110011007f0058002e0068005300900090009000900090
009000ab008000800080008000ba00ba00ba00ba006c0091009100910091
0091005b005b005b005b00fc015100e4007c008f016f00ab005900000000
000401bb013f006500120050006d0090006200940062005a00b0002b0036
00a700e101280126003d0010007000e601eb0018008900b100bb00530063
007f0065001100110068001100120091fff100b300db01fd01250090009b
0095006300670007006b0254000e001300fb01cd012b00e0003d00110058
00110058005800e500e500e500e500680068006800530053005300ba013c
0128013c013a020001b101ba013b01d4013c005600bb00b900cf00d500ed
023cfffd00810063009500b3002d0090010e017601550163000000000000
009f0080007d00e500b900cf007f00ab007f00ab007effe502c400110090
00110090009e007efffd0058008000580080008000bb008000bb008000bb
002e006c002e006c00680091005800ab005800ab00b900cf008f0092008f
00920053005b0053005b00d500ed00d500ed007f0067005a006200b5011b
009800d0007bffe50112011b000e0002017d0002017d0002017d017d0002
00a9006500990090021d01000000021d021d0000021d0000021d00000000
000000000000017d021d017d017d000000000000021d017d017d00000000
0000021d017d017d00000000000000000000000000000000000000000000
00000000000000000000026700000000000000020002000f0002000f0002
00ae007c0026000300030002014100b800800002006c009f010f005a0009
001300000201012500bb014100020169016900ae016f00110090007f00ab
007f00ab0058008000580080005800800080007d0080007d0080007d006b
0055006b003e00e500bb00e500bb00e500bb00e500bd00ab00b4005900bf
0092008000bb002e006c0080006c0068009100680091005800ab00b900cf
008f007a0053005b0053005b0053005b0053005b002500380063009500d7
00110090001200100050007001cd00250038002500380025003800630095
01fd013c0088005a000c0011000b001b020801d401bb01080040fffc0013
0041fff6002affd400f2001100570065005800d5006b00e50059000f0018
002e00930068006400b300c4008f00630050001d003c00e500630062011b
008b01bb0057010400460156008b00b3020f009e00410054004a01450091
00ca00cf00570099004500750128005700910057007500580011007f007f
00b900e500e500ab0023000000110077002c0064001100570057007f004a
0058fffb007200280028007700230018006b0068006400b3007f008f002c
00630050005900290004000400020002005700810016000f00900080007b
0098005a008000140090003a003a00780033001f006b0091006b002d00ab
00a6003c00770065004d004600210021004b001800a60082002400830080
008e009800ab00cf00bd00ba00b40033ffee003e0078003c006b007f0098
002b00310068025802580258025802580258025802580258021602580216
022d00b50189023c038200aa01cc00d0009e011500a300a0017701490092
00680173009500b400c0006d00850176011c004f00c000f200fa00de00a2
00c500ac00cc00a0007a0085008501bf00f7005b017700950095ffedffed
00c000cc00b900cc00b900d000d000d0009e011500a300a00167013a0068
0173009500b400c00085011c004f00f200fa00a200c500ac00cc00a00177
009e00b400fa00ac0243018c0160012401c701c700fb0201000001dc0197
01dc01dc01a301dc01ca01db01d90164013f00f4017f0154013701080107
0127009601f100e6024a01d101f3010d0127011101450000000000000000
000001ca02030201020301a201a401ab016d01520000019c016201600025
002500000000000b0006000000000110009e000000000090006500030003
00000000000a000a0000000000aa007000f0009700f000f0009e009e00bf
00bf00bf013f0090009000f0009700f00097018301d501c701a801ca0000
001d002b002b0000001d002b002b002b002b0000001d0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
019c019c010a010a000000140201010a00cb0197019700c400c001bc01f8
00aa007000000000020001f8002500250000000001c80184002500250000
000000250025000000000110009e000000000110009e000000000110009e
00000000019e0151019e0151009000650090006500060006000000000006
00060000000000000000000000000000000000000000000c000a00000000
000c000a00000000011a011c00000000011a011c00000000000b00060000
000000a600d60000000000b4003800000000010800710000000001b201b2
0000000000fe008e0000000001f301840000000000c400c000aa007000aa
00760000000000670099008200a1009c00d7009c00d7021901d101dc01dc
0061004c019c01db01ca010d024a01a30197005d0020000501c701ca01ca
01d501a8018301db01b201b2009c009c01ea01f501f50075006b01b501f4
01e30126026301bc01b0007f0041002601e001e301e301ee01c1019c01c7
019e019e00d700d700c300ce00cd016a0174008e00cd00bc0000013c0095
0089017f011100ee00b900bc00bc00c7009a00750186015d015d01be01be
01bc019a01df00000025002500000000000b00060000000000f00097009e
0000001d002b0000000001470147015800f300da01f801f800ce00000068
00910053005b01c10199019801c401cb01c001bb01c501ab01b9012b0124
0118015e0144037d00c800000000019f01bd01a501c301b701b7012b012b
012b01280128012801ff01ff01ff01ff01ff01c401a8012801ff01ff01ff
01ff01ff01ff01ff01ff01ff01ff0142012b0142012b0011009000110090
001100900011009000110090001100900011009000110090001100900011
009000110090001100900058008000580080005800800058008000580080
00580080005800800058008000e500ba00e500bd00680091006800910068
009100680091006800910068009100680091006800910068009100680091
00680091006800910053005b0053005b0053005b0053005b0053005b0053
005b0053005b0063009500630095006300950011009000e500ba00680091
0053005b0053005b0053005b0053005b0053005b012f011400f50114007f
0098fffb00140077007800770078006b006b006200950062009500500065
00290046006b0055004200800068009101f4018c015b014801bf01bf0148
014801480177020001f800c400c000c400c000aa00700025002500000000
002500250000000000250025000000000025002500000000002500250000
0000002500250000000000250025000000000110009e000000000110009e
000000000110009e000000000110009e000000000110009e000000000110
009e00000000019e0151019e0151019e0151019e0151019e0151019e0151
019e015101970151019b0151009000650090006500900065009000650090
006500900065009000650090006500060006000000000006000600000000
000600060000000000000000000000000000000000000000000c000a0000
0000011a011c00000000000b000600000000000b000600000000000b0006
00000000000b000600000000000b00060000000000a600d600a600d600a6
00d60005000500000000000300030000000000b400380000000000b40038
0000000000b4003800000000000a000a00000000000a000a00000000000a
000a00000000000a000a00000000000a000a000000000108007100000000
01080071000000000108007100000000010800710000000000fe008e0000
000000fe008e0000000000fe008e0000000000fe008e0000000000fe008e
000000000110009e0000000001f3018401b101f30000000001b101f301b1
01c800c400c000c400c000c400c000c400c000c400c000c400c000c400c0
00c400c0000f001d00aa00700000000000c400c000aa00760000000000aa
0076005a005a005a005a01d101f300e70158016d01c001a001f801730014
000a01ee021401ea01c0017301cc0174017401ad003101be01be01ee01c0
00060006000000000000000000000000011a011c00000000020101b20003
000300030018009c00b7009c00d7009c00d7009c00d7009c00d7009c00d7
0173012b016900850212021b0076008e00f9010d005700570097007f007f
0015002e001200250051008f0004008f00b3002d00160057002d0057002d
007f007f00abfffd00160057008000b50058007200000080003b001500e5
00e3005900bf00bb004100150000006c0068003c00910016002d00b300b9
00cf00c401560092005d0092008f003c0053003d000000d500ed00a100a1
00a100db00ab00c400900092002d023c01e7006501eb00080008000a0012
0008001100070007000a008000110090012f00110090001200100080007d
0080007d005900bf006800910068009100a1008c00b400080008000a0080
007d000a002d002e006c0011009000110090005800800058008000e500ba
00e500ba0068009100680091005800ab005800ab0053005b0053005b00b9
00cf008f009200ab00ab006b0055006b008600e700d500ed001100900058
0080006800910128006800910068009100680091006300950068007e002a
002d00ab006a007e007e0080004e00900090006800870087007d007d00ab
00a4009100550067006700bd020f00e500bb00bb01120011001500150015
0000006c003a0091004e0075009100730073007300ab00db00dc00ab008e
008e00cf00b100b100b100d100920092005b00b80057003b003800410092
00ed00a7008c00ad00aa00b400aa00ab0068007b008700ab006b00b9006e
0098008000aa00b4000a000a000a000a0062000a000a000a000a00a900ed
01120112016d012d012a012a012d00e8010d0201010701fd012501fd020e
020e013b014000620094007a007a023601bb01bc0236013c01bc01bc01ff
01ff020e020e019801980198013c01a0010e0133014d015901350140013c
013c00db013c013cffe5013a0200013f01b1013b013c023601d5013b013a
013a01fd01250125031901bc01bc01980198013c01e7020e019801980198
013c00b100b1013f01b1020801ba01d40236013c0121013c013c013a013a
0128013c0000013c0128013c000000a700e6020e013c01aa011e01c30200
ffe501bc01bb0128012501080236013c006501d50198012801280128016a
01b700000000000000270128013001500126011701390103011200d1012d
013b00f5013501bb01bc023600b30047006d0000006d0091003200bc0068
0091008c00cf009f009f0040008b008c00f00015001500ab00ab006b0075
00b900b9008800c3008000ab008100e700bc008000ab00b4006800ab00f9
005800280080003a00140096002100390000000c00110013000000050029
00500000000500790097001d004500680091001a003b001a003b001e001f
0040005f0014001400a700140096007f00b400b40159013c020d020d0001
00010028003a0057006600b3002d00250034007200900077007800170024
00110011000a000700570051007f00ab008f00a6000c000c002900460005
000f0005000f00e5fffb00140077007800230033006b006b006b006b0029
00460018001f013a0011009000110090001200100058008000420080fffb
00140072009000c3008c0028003a0028003a006800910068009100810082
002c0095002c0095002c009500290046000200180074007e0010001e0007
000a0051005a000a0008000a0014008000ab008f00a601a401a801dc0216
01b2019601d6012efff103ca01960196033a014500c501a001b701ba01dc
0196014501d3019601a001a401dc01ba033afff101c20216012f012f0128
012801dd017b012f001100900057002d0057002d0057002d007f00ab009e
007e009e007e009e007e009e007e009e007e005800800058008000580080
0058008000580080009f00d70080007d006b0055006b0055006b0055006b
0055006b005500e500bd00e500ba005900bf005900bf005900bf008000bb
008000bb008000bb008000bb001800150018001500180015002e006c002e
006c002e006c002e006c0068009100680091006800910068009100b3002d
00b3002d005800ab005800ab005800ab005800ab00b900cf00b900cf00b9
00cf00b900cf00b900cf008f0092008f0092008f0092008f00920053005b
0053005b0053005b0053005b0053005b0010003b0010003b002500380025
003800500065005000650063009500d500ed00d500ed00d500ed00550092
00380095009000d700620062006200620062006200620062000000000000
000000000000ff1bff1b011b011b011b011b011b011b0000000000000000
00000000008b008b008b008b008b008b008b008b00000000000000000000
0000ff1bff1b020d01e501a0019601a00196010a01000000000000000000
000000000001000100910091009100910091009100000000ff9cff9cffc4
ffc4005700570057005700570057005700570000ff74ff74ff1b00750075
0075007500750075007500750000ffecff56ff56ff7eff7eff1bff070062
0062011b011b008b008b018001ab00910091005700570075007500620062
006200620062006200620062000000000000000000000000ff1bff1b008b
008b008b008b008b008b008b008b000000000000000000000000ff1bff1b
007500750075007500750075007500750000ffecff56ff56ff7eff7eff1b
ff07006200620062006200620062006200110011000200020011020d0236
020d01280128008b008b008b008b008b0002000200020002006b01be01be
012801120114011b011b0100010000e500e50002000201be01be01280057
00570057005700ca00ca0057005700630063000200020000010801080228
007500750075007500750002000200020002003c0228020d0099006b0000
00000000000000bd00b400260112003a00e60021002101a201a201e401e4
01b101bc013b013b012801cd01e901e901e901e9013c013c014901e4020e
013a01bd01e401e40118020e00000000000000b3002d003b002b002500cf
00ab00cf00cf00cf009000b70101009e00cf001f003a00910082009100ab
0065002301240091009100a60083008300a600560099001800aa003b0038
00ed009000b000910098003b006b00a6001d003300e100d6011101110116
01170117010801070166011400fb011700d400f100e70112014b014c0136
0123010b00dd01280128010300d200fe0103013001350131013101030150
012800d1013b0126013c0126012600fe013b0117014c00d700f501360159
00fd01480120012a0150012d011700f5015900fd01310120012a00000000
0000000000000190011a018601920179013b015d024a01be021a015b019e
0151009000650000000000000000003a000d000a001e002a001d0016001e
0090012d012d012d002b00b3003f000000000000000000140000007f0018
001f000b004700470011007f00ab0080008f00cf00ed0078038b01a2011b
01a000000023007f007f007f007f009801a4021602150177025800dc019a
01e201bf01bf01cd01be01da012a00250025000000000025002500000000
002500250000000000250025000000000025002500000000002500250000
000000250025000000000110009e000000000110009e00000000019e0151
019e0151009000650006000600000000011a011c00000000011a011c0000
0000011a011c00000000000b000600000000000b00060000000000030003
000000000003000300000000000300030000000001b201b20000000001b2
01b20000000000fe008e0000000000fe008e0000000000fe008e00000000
0108007100000000009000650090006500060006000000000000004500be
0000003c0000009b005f0059005700ed004e011900b5000000e300e4002d
00560036002d007e00d7000f00bf00bb0015006c002d00ab00cf00b1003b
006500ed005a002a007e003f00380090000700bd00ab00b10000008c0103
0139010f01240131016401640103011e015002300175017501620173013c
00df00c400d100d5011e0114012601140154014e013b0117014801130111
00f5017101710171013401430126012601ec013c01cd0128013001260135
0135008000100058007f00ba006200620062006200620062006200620114
011401140114010c010c010c010c00570057005700570057005700570057
01050105010c010c0057005700570057009c00d700bd00b0002a0053000f
0058008000ab00b400540080000f00ab0063009500ab00ab00ab00bb007f
009800500065005000650072009000230033015701570157015700c100c1
019e01e40118000000cf00ab007400bb00700088005800900092006b0055
005900bf00d500ed0078006b006b007b01c601e0012c013c013c013c0080
002e0080017f017601550163017801680180017801780180012500680080
00250038007500e20068003b0005001a01cd012d01e101e1017d017d01eb
01eb01eb013c001401c701b601b80178016601ad01ba01ba009000e40079
007900090030000f021401f801cc01f501e901d201d501d101d101da01e6
01db01d601d901db01b5021201ff01fa0110009e000000000110009e0000
00000006000600000000009000650110009e0000000001140102010100ef
00aa00700000000000aa00700000000000aa00700000000000c400c000c4
00c0002f005a002f005a0110009e00000000000600060000000000060006
0000000000b400380000000000470016003e00170150004d002c002a0045
0155018401f701c401f700aa007600000000000300030000000000030003
0000000000aa00700000000000aa00700000000000aa0070000000000198
00b1005f008f00a00052003a00590113000000b70064000b0009001d000e
000b000e0059009e000f00070008000b0064006b006b005500d700d700b5
0031007500e200e20032000400180011001f001200730091012a016d00f5
00b900d500000000000001bb01a001dc00000197016701dc01dc000001a3
000001dc000001ca000001db000001f9019101910191018c01e801f401e9
0170017000a800fc00fc0059002f0019001b0019001b0019001b0019001b
0097002b00000097002b000000250025000000000110009e00000000000c
000c000c0000000b00060000000000a600d6000000000108007100000000
01b201b20000000000aa00760000000000aa0076000000000081005900c4
00c00103010301c601d501cb01a301c201ac022201c701ad022201c701ad
01900150019001cc019c01de01de02010201020102010199015901c301a4
009c00d701c701c700000000000000000000000000000000000001c70108
019701f00215011500a300a000a00216019800530076005d0019008200af
008200520027004400a90092003b0049005400c8009f0019005b001500b7
0017009c005300aa001100a400370053001900b70071009300ec005a0009
0068009901c1019701a1013e01bc00e4006d001400940043006e004f0057
009c007100400059006c011dfffd0088005d005500dd008c0096005a00f7
ffe100fa006c0142003200f2008b005b00780014006c007d00bd00140035
00910085000001cd00bc0008000800370010001000100016001000b30014
00000037ffca002500250000000000b3019e015100000000000000000003
0003000000000170022a0090006501d000abffbaffff0000000000250043
00230033000e000e000e000e000f0057001200a900c2011a011c00000000
00b400380000000001a30057002500250000000000250025000000000025
0025000000000090006500aa007600000000000b00060000000000a600d6
0000000000fe008e000000000164019d004400f2016b016f01ad01ad0025
00000002000100ad0024013e00ca011d00000037003700370037009100e5
00e500e500e500e500e500e500e500e500e500e500e500e500e500e500e5
00e500e500e500e500e500e500e500e500e500e500e500e500e500e500e5
00e500e500e500e500e500e500e500e501810181018101e9035403540354
035403540354042304230423042304230423042304230423042304230423
0423042305210521052105cf066e066e066e066e06db06db06db073108a4
09b509b509b509b50a7e0a7e0b220b220b220b220ccd0e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060e060e060e06
0e060e060e060e060e060e060e060e060e060e060e060e060f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f110f11000100000eb300800010000000000002
0010002f0059000003ea0ac3000000000000003a02be0000000300000000
021a000000000003000000010016021a0000000300000002000e02880000
0003000000030040029600000003000000040016021a0000000300000005
001802d60000000300000006001c02ee0000000300000007006e021a0000
000300000008003003180000000300000009001c0528000000030000000d
0e0605440001000000000000010d134a0001000000000001000b14570001
0000000000020007148e0001000000000003002014950001000000000004
000b14570001000000000005000c14b50001000000000006000e14c10001
000000000007003714570001000000000008001813510001000000000009
000e14cf000100000000000d070314dd0003000104030002000c1be00003
00010405000200101bf00003000104060002000c1c000003000104070002
00101c0c000300010408000200101c1c0003000104090000021e030a0003
0001040900010016021a0003000104090002000e02880003000104090003
0040029600030001040900040016021a0003000104090005001802d60003
000104090006001c02ee0003000104090007006e021a0003000104090008
003003180003000104090009001c0528000300010409000d0e181c2c0003
0001040a0002000c1be000030001040b000200102a4400030001040c0002
000c1be000030001040e0002000c2a540003000104100002000e2a640003
00010413000200122a720003000104140002000c1be00003000104150002
00101be00003000104160002000c1be00003000104190002000e2a840003
0001041b000200102a5400030001041d0002000c1be000030001041f0002
000c1be00003000104240002000e2a9200030001042a0002000e2aa00003
0001042d0002000e2aae00030001080a0002000c1be00003000108160002
000c1be0000300010c0a0002000c1be0000300010c0c0002000c1be000a9
0020003200300031003700200054006800650020004d006f006e006f0074
00790070006500200043006f00720070006f0072006100740069006f006e
002e00200041006c006c0020005200690067006800740073002000520065
007300650072007600650064002e0020000d000d00480065006200720065
00770020004f00700065006e00540079007000650020004c00610079006f
007500740020006c006f00670069006300200063006f0070007900720069
006700680074002000a90020003200300030003300200026002000320030
00300037002c002000520061006c00700068002000480061006e0063006f
0063006b002000260020004a006f0068006e00200048007500640073006f
006e002e002000540068006900730020006c00610079006f007500740020
006c006f00670069006300200066006f00720020004200690062006c0069
00630061006c00200048006500620072006500770020006900730020006f
00700065006e00200073006f007500720063006500200073006f00660074
007700610072006500200075006e00640065007200200074006800650020
004d004900540020004c006900630065006e00730065003b002000730065
006500200065006d0062006500640064006500640020006c006900630065
006e007300650020006400650073006300720069007000740069006f006e
00200066006f0072002000640065007400610069006c0073002e0043006f
007500720069006500720020004e00650077002000690073002000610020
00740072006100640065006d00610072006b0020006f0066002000540068
00650020004d006f006e006f007400790070006500200043006f00720070
006f0072006100740069006f006e002e0052006500670075006c00610072
004d006f006e006f0074007900700065003a0043006f0075007200690065
00720020004e0065007700200028004d006900630072006f0073006f0066
0074002900560065007200730069006f006e00200036002e003900320043
006f00750072006900650072004e0065007700500053004d005400a90020
003200300031003700200054006800650020004d006f006e006f00740079
0070006500200043006f00720070006f0072006100740069006f006e002e
00200041006c006c00200052006900670068007400730020005200650073
00650072007600650064002e0020000d000a000d000a0048006500620072
006500770020004f00700065006e00540079007000650020004c00610079
006f007500740020006c006f00670069006300200063006f007000790072
0069006700680074002000a9002000320030003000330020002600200032
003000300037002c002000520061006c00700068002000480061006e0063
006f0063006b002000260020004a006f0068006e00200048007500640073
006f006e002e002000540068006900730020006c00610079006f00750074
0020006c006f00670069006300200066006f00720020004200690062006c
006900630061006c00200048006500620072006500770020006900730020
006f00700065006e00200073006f007500720063006500200073006f0066
0074007700610072006500200075006e0064006500720020007400680065
0020004d004900540020004c006900630065006e00730065003b00200073
0065006500200065006d0062006500640064006500640020006c00690063
0065006e007300650020006400650073006300720069007000740069006f
006e00200066006f0072002000640065007400610069006c0073002e0048
006f00770061007200640020004b006500740074006c00650072004d0069
00630072006f0073006f0066007400200073007500700070006c00690065
006400200066006f006e0074002e00200059006f00750020006d00610079
00200075007300650020007400680069007300200066006f006e00740020
0074006f0020006300720065006100740065002c00200064006900730070
006c00610079002c00200061006e00640020007000720069006e00740020
0063006f006e00740065006e00740020006100730020007000650072006d
0069007400740065006400200062007900200074006800650020006c0069
00630065006e007300650020007400650072006d00730020006f00720020
007400650072006d00730020006f00660020007500730065002c0020006f
006600200074006800650020004d006900630072006f0073006f00660074
002000700072006f0064007500630074002c002000730065007200760069
00630065002c0020006f007200200063006f006e00740065006e00740020
0069006e0020007700680069006300680020007400680069007300200066
006f006e0074002000770061007300200069006e0063006c007500640065
0064002e00200059006f00750020006d006100790020006f006e006c0079
002000280069002900200065006d00620065006400200074006800690073
00200066006f006e007400200069006e00200063006f006e00740065006e
00740020006100730020007000650072006d006900740074006500640020
00620079002000740068006500200065006d00620065006400640069006e
00670020007200650073007400720069006300740069006f006e00730020
0069006e0063006c007500640065006400200069006e0020007400680069
007300200066006f006e0074003b00200061006e00640020002800690069
0029002000740065006d0070006f0072006100720069006c007900200064
006f0077006e006c006f006100640020007400680069007300200066006f
006e007400200074006f002000610020007000720069006e007400650072
0020006f00720020006f00740068006500720020006f0075007400700075
0074002000640065007600690063006500200074006f002000680065006c
00700020007000720069006e007400200063006f006e00740065006e0074
002e00200041006e00790020006f00740068006500720020007500730065
002000690073002000700072006f0068006900620069007400650064002e
000d000d00540068006500200066006f006c006c006f00770069006e0067
0020006c006900630065006e00730065002c002000620061007300650064
0020006f006e00200074006800650020004d004900540020006c00690063
0065006e00730065002000280068007400740070003a002f002f0065006e
002e00770069006b006900700065006400690061002e006f00720067002f
00770069006b0069002f004d00490054005f004c006900630065006e0073
00650029002c0020006100700070006c00690065007300200074006f0020
0074006800650020004f00700065006e00540079007000650020004c0061
0079006f007500740020006c006f00670069006300200066006f00720020
004200690062006c006900630061006c0020004800650062007200650077
0020201c004c00610079006f007500740020004c006f006700690063201d
0020006100730020006a006f0069006e0074006c00790020006400650076
0065006c006f007000650064002000620079002000520061006c00700068
002000480061006e0063006f0063006b00200061006e00640020004a006f
0068006e00200048007500640073006f006e002e0020000d000d00500065
0072006d0069007300730069006f006e0020006900730020006800650072
0065006200790020006700720061006e007400650064002c002000660072
006500650020006f00660020006300680061007200670065002c00200074
006f00200061006e007900200070006500720073006f006e0020006f0062
007400610069006e0069006e00670020006100200063006f007000790020
006f006600200074006800650020004f00700065006e0054007900700065
0020004c00610079006f007500740020006c006f00670069006300200066
006f00720020004200690062006c006900630061006c0020004800650062
00720065007700200061006e00640020006100730073006f006300690061
00740065006400200064006f00630075006d0065006e0074006100740069
006f006e002000660069006c00650073002000280074006800650020201c
004c00610079006f007500740020004c006f00670069006300200053006f
006600740077006100720065201d0029002c00200074006f002000640065
0061006c00200069006e00200074006800650020004c00610079006f0075
00740020004c006f00670069006300200053006f00660074007700610072
006500200077006900740068006f00750074002000720065007300740072
0069006300740069006f006e002c00200069006e0063006c007500640069
006e006700200077006900740068006f007500740020006c0069006d0069
0074006100740069006f006e002000740068006500200072006900670068
0074007300200074006f0020007500730065002c00200063006f00700079
002c0020006d006f0064006900660079002c0020006d0065007200670065
002c0020007000750062006c006900730068002c00200064006900730074
007200690062007500740065002c0020007300750062006c006900630065
006e00730065002c00200061006e0064002f006f0072002000730065006c
006c00200063006f00700069006500730020006f00660020007400680065
0020004c00610079006f007500740020004c006f00670069006300200053
006f006600740077006100720065002c00200061006e006400200074006f
0020007000650072006d0069007400200070006500720073006f006e0073
00200074006f002000770068006f006d00200074006800650020004c0061
0079006f007500740020004c006f00670069006300200053006f00660074
00770061007200650020006900730020006600750072006e006900730068
0065006400200074006f00200064006f00200073006f002c002000730075
0062006a00650063007400200074006f002000740068006500200066006f
006c006c006f00770069006e006700200063006f006e0064006900740069
006f006e0073003a000d000d005400680065002000610062006f00760065
00200063006f00700079007200690067006800740020006e006f00740069
0063006500200061006e0064002000740068006900730020007000650072
006d0069007300730069006f006e0020006e006f00740069006300650020
007300680061006c006c00200062006500200069006e0063006c00750064
0065006400200069006e00200061006c006c00200063006f007000690065
00730020006f00720020007300750062007300740061006e007400690061
006c00200070006f007200740069006f006e00730020006f006600200074
006800650020004c00610079006f007500740020004c006f006700690063
00200053006f006600740077006100720065002e000d000d005400480045
00200053004f004600540057004100520045002000490053002000500052
004f0056004900440045004400200027004100530020004900530027002c
00200057004900540048004f00550054002000570041005200520041004e
005400590020004f004600200041004e00590020004b0049004e0044002c
002000450058005000520045005300530020004f005200200049004d0050
004c004900450044002c00200049004e0043004c005500440049004e0047
00200042005500540020004e004f00540020004c0049004d004900540045
004400200054004f0020005400480045002000570041005200520041004e
00540049004500530020004f00460020004d00450052004300480041004e
0054004100420049004c004900540059002c0020004600490054004e0045
0053005300200046004f0052002000410020005000410052005400490043
0055004c0041005200200050005500520050004f0053004500200041004e
00440020004e004f004e0049004e004600520049004e00470045004d0045
004e0054002e00200049004e0020004e004f0020004500560045004e0054
0020005300480041004c004c002000540048004500200041005500540048
004f005200530020004f005200200043004f005000590052004900470048
005400200048004f004c00440045005200530020004200450020004c0049
00410042004c004500200046004f005200200041004e005900200043004c
00410049004d002c002000440041004d00410047004500530020004f0052
0020004f00540048004500520020004c0049004100420049004c00490054
0059002c0020005700480045005400480045005200200049004e00200041
004e00200041004300540049004f004e0020004f004600200043004f004e
00540052004100430054002c00200054004f005200540020004f00520020
004f00540048004500520057004900530045002c00200041005200490053
0049004e0047002000460052004f004d002c0020004f005500540020004f
00460020004f005200200049004e00200043004f004e004e004500430054
0049004f004e00200057004900540048002000540048004500200053004f
0046005400570041005200450020004f0052002000540048004500200055
005300450020004f00520020004f00540048004500520020004400450041
004c0049004e0047005300200049004e002000540048004500200053004f
004600540057004100520045002e000da9203230313720546865204d6f6e
6f7479706520436f72706f726174696f6e2e20416c6c2052696768747320
52657365727665642e200d0d486562726577204f70656e54797065204c61
796f7574206c6f67696320636f7079726967687420a92032303033202620
323030372c2052616c70682048616e636f636b2026204a6f686e20487564
736f6e2e2054686973206c61796f7574206c6f67696320666f7220426962
6c6963616c20486562726577206973206f70656e20736f7572636520736f
66747761726520756e64657220746865204d4954204c6963656e73653b20
73656520656d626564646564206c6963656e736520646573637269707469
6f6e20666f722064657461696c732e436f7572696572204e657720697320
612074726164656d61726b206f6620546865204d6f6e6f7479706520436f
72706f726174696f6e2e526567756c61724d6f6e6f747970653a436f7572
696572204e657720284d6963726f736f66742956657273696f6e20362e39
32436f75726965724e657750534d54486f77617264204b6574746c65724d
6963726f736f667420737570706c69656420666f6e742e20596f75206d61
7920757365207468697320666f6e7420746f206372656174652c20646973
706c61792c20616e64207072696e7420636f6e74656e7420617320706572
6d697474656420627920746865206c6963656e7365207465726d73206f72
207465726d73206f66207573652c206f6620746865204d6963726f736f66
742070726f647563742c20736572766963652c206f7220636f6e74656e74
20696e207768696368207468697320666f6e742077617320696e636c7564
65642e20596f75206d6179206f6e6c792028692920656d62656420746869
7320666f6e7420696e20636f6e74656e74206173207065726d6974746564
2062792074686520656d62656464696e67207265737472696374696f6e73
20696e636c7564656420696e207468697320666f6e743b20616e64202869
69292074656d706f726172696c7920646f776e6c6f616420746869732066
6f6e7420746f2061207072696e746572206f72206f74686572206f757470
75742064657669636520746f2068656c70207072696e7420636f6e74656e
742e20416e79206f74686572207573652069732070726f68696269746564
2e0d0d54686520666f6c6c6f77696e67206c6963656e73652c2062617365
64206f6e20746865204d4954206c6963656e73652028687474703a2f2f65
6e2e77696b6970656469612e6f72672f77696b692f4d49545f4c6963656e
7365292c206170706c69657320746f20746865204f70656e54797065204c
61796f7574206c6f67696320666f72204269626c6963616c204865627265
7720d24c61796f7574204c6f676963d3206173206a6f696e746c79206465
76656c6f7065642062792052616c70682048616e636f636b20616e64204a
6f686e20487564736f6e2e200d0d5065726d697373696f6e206973206865
72656279206772616e7465642c2066726565206f66206368617267652c20
746f20616e7920706572736f6e206f627461696e696e67206120636f7079
206f6620746865204f70656e54797065204c61796f7574206c6f67696320
666f72204269626c6963616c2048656272657720616e64206173736f6369
6174656420646f63756d656e746174696f6e2066696c6573202874686520
d24c61796f7574204c6f67696320536f667477617265d3292c20746f2064
65616c20696e20746865204c61796f7574204c6f67696320536f66747761
726520776974686f7574207265737472696374696f6e2c20696e636c7564
696e6720776974686f7574206c696d69746174696f6e2074686520726967
68747320746f207573652c20636f70792c206d6f646966792c206d657267
652c207075626c6973682c20646973747269627574652c207375626c6963
656e73652c20616e642f6f722073656c6c20636f70696573206f66207468
65204c61796f7574204c6f67696320536f6674776172652c20616e642074
6f207065726d697420706572736f6e7320746f2077686f6d20746865204c
61796f7574204c6f67696320536f667477617265206973206675726e6973
68656420746f20646f20736f2c207375626a65637420746f207468652066
6f6c6c6f77696e6720636f6e646974696f6e733a0d0d5468652061626f76
6520636f70797269676874206e6f7469636520616e642074686973207065
726d697373696f6e206e6f74696365207368616c6c20626520696e636c75
64656420696e20616c6c20636f70696573206f72207375627374616e7469
616c20706f7274696f6e73206f6620746865204c61796f7574204c6f6769
6320536f6674776172652e0d0d54484520534f4654574152452049532050
524f564944454420274153204953272c20574954484f5554205741525241
4e5459204f4620414e59204b494e442c2045585052455353204f5220494d
504c4945442c20494e434c5544494e4720425554204e4f54204c494d4954
454420544f205448452057415252414e54494553204f46204d4552434841
4e544142494c4954592c204649544e45535320464f522041205041525449
43554c415220505552504f534520414e44204e4f4e494e4652494e47454d
454e542e20494e204e4f204556454e54205348414c4c2054484520415554
484f5253204f5220434f5059524947485420484f4c44455253204245204c
4941424c4520464f5220414e5920434c41494d2c2044414d41474553204f
52204f54484552204c494142494c4954592c205748455448455220494e20
414e20414354494f4e204f4620434f4e54524143542c20544f5254204f52
204f54484552574953452c2041524953494e472046524f4d2c204f555420
4f46204f5220494e20434f4e4e454354494f4e2057495448205448452053
4f465457415245204f522054484520555345204f52204f54484552204445
414c494e475320494e2054484520534f4654574152452e0d004e006f0072
006d0061006c006e0079006f00620079010d0065006a006e00e9006e006f
0072006d0061006c005300740061006e0064006100720064039a03b103bd
03bf03bd03b903ba03ac004d006900630072006f0073006f006600740020
0073007500700070006c00690065006400200066006f006e0074002e0020
0059006f00750020006d0061007900200075007300650020007400680069
007300200066006f006e007400200074006f002000630072006500610074
0065002c00200064006900730070006c00610079002c00200061006e0064
0020007000720069006e007400200063006f006e00740065006e00740020
006100730020007000650072006d00690074007400650064002000620079
00200074006800650020006c006900630065006e00730065002000740065
0072006d00730020006f00720020007400650072006d00730020006f0066
0020007500730065002c0020006f006600200074006800650020004d0069
00630072006f0073006f00660074002000700072006f0064007500630074
002c00200073006500720076006900630065002c0020006f007200200063
006f006e00740065006e007400200069006e002000770068006900630068
0020007400680069007300200066006f006e007400200077006100730020
0069006e0063006c0075006400650064002e00200059006f00750020006d
006100790020006f006e006c0079002000280069002900200065006d0062
006500640020007400680069007300200066006f006e007400200069006e
00200063006f006e00740065006e00740020006100730020007000650072
006d00690074007400650064002000620079002000740068006500200065
006d00620065006400640069006e00670020007200650073007400720069
006300740069006f006e007300200069006e0063006c0075006400650064
00200069006e0020007400680069007300200066006f006e0074003b0020
0061006e006400200028006900690029002000740065006d0070006f0072
006100720069006c007900200064006f0077006e006c006f006100640020
007400680069007300200066006f006e007400200074006f002000610020
007000720069006e0074006500720020006f00720020006f007400680065
00720020006f007500740070007500740020006400650076006900630065
00200074006f002000680065006c00700020007000720069006e00740020
0063006f006e00740065006e0074002e00200041006e00790020006f0074
0068006500720020007500730065002000690073002000700072006f0068
006900620069007400650064002e000d000a000d000a0054006800650020
0066006f006c006c006f00770069006e00670020006c006900630065006e
00730065002c0020006200610073006500640020006f006e002000740068
00650020004d004900540020006c006900630065006e0073006500200028
0068007400740070003a002f002f0065006e002e00770069006b00690070
0065006400690061002e006f00720067002f00770069006b0069002f004d
00490054005f004c006900630065006e007300650029002c002000610070
0070006c00690065007300200074006f00200074006800650020004f0070
0065006e00540079007000650020004c00610079006f007500740020006c
006f00670069006300200066006f00720020004200690062006c00690063
0061006c00200048006500620072006500770020201c004c00610079006f
007500740020004c006f006700690063201d0020006100730020006a006f
0069006e0074006c007900200064006500760065006c006f007000650064
002000620079002000520061006c00700068002000480061006e0063006f
0063006b00200061006e00640020004a006f0068006e0020004800750064
0073006f006e002e0020000d000a000d000a005000650072006d00690073
00730069006f006e00200069007300200068006500720065006200790020
006700720061006e007400650064002c002000660072006500650020006f
00660020006300680061007200670065002c00200074006f00200061006e
007900200070006500720073006f006e0020006f0062007400610069006e
0069006e00670020006100200063006f007000790020006f006600200074
006800650020004f00700065006e00540079007000650020004c00610079
006f007500740020006c006f00670069006300200066006f007200200042
00690062006c006900630061006c00200048006500620072006500770020
0061006e00640020006100730073006f0063006900610074006500640020
0064006f00630075006d0065006e0074006100740069006f006e00200066
0069006c00650073002000280074006800650020201c004c00610079006f
007500740020004c006f00670069006300200053006f0066007400770061
00720065201d0029002c00200074006f0020006400650061006c00200069
006e00200074006800650020004c00610079006f007500740020004c006f
00670069006300200053006f006600740077006100720065002000770069
00740068006f007500740020007200650073007400720069006300740069
006f006e002c00200069006e0063006c007500640069006e006700200077
006900740068006f007500740020006c0069006d00690074006100740069
006f006e0020007400680065002000720069006700680074007300200074
006f0020007500730065002c00200063006f00700079002c0020006d006f
0064006900660079002c0020006d0065007200670065002c002000700075
0062006c006900730068002c002000640069007300740072006900620075
00740065002c0020007300750062006c006900630065006e00730065002c
00200061006e0064002f006f0072002000730065006c006c00200063006f
00700069006500730020006f006600200074006800650020004c00610079
006f007500740020004c006f00670069006300200053006f006600740077
006100720065002c00200061006e006400200074006f0020007000650072
006d0069007400200070006500720073006f006e007300200074006f0020
00770068006f006d00200074006800650020004c00610079006f00750074
0020004c006f00670069006300200053006f006600740077006100720065
0020006900730020006600750072006e0069007300680065006400200074
006f00200064006f00200073006f002c0020007300750062006a00650063
007400200074006f002000740068006500200066006f006c006c006f0077
0069006e006700200063006f006e0064006900740069006f006e0073003a
000d000a000d000a005400680065002000610062006f0076006500200063
006f00700079007200690067006800740020006e006f0074006900630065
00200061006e0064002000740068006900730020007000650072006d0069
007300730069006f006e0020006e006f0074006900630065002000730068
0061006c006c00200062006500200069006e0063006c0075006400650064
00200069006e00200061006c006c00200063006f00700069006500730020
006f00720020007300750062007300740061006e007400690061006c0020
0070006f007200740069006f006e00730020006f00660020007400680065
0020004c00610079006f007500740020004c006f00670069006300200053
006f006600740077006100720065002e000d000a000d000a005400480045
00200053004f004600540057004100520045002000490053002000500052
004f0056004900440045004400200027004100530020004900530027002c
00200057004900540048004f00550054002000570041005200520041004e
005400590020004f004600200041004e00590020004b0049004e0044002c
002000450058005000520045005300530020004f005200200049004d0050
004c004900450044002c00200049004e0043004c005500440049004e0047
00200042005500540020004e004f00540020004c0049004d004900540045
004400200054004f0020005400480045002000570041005200520041004e
00540049004500530020004f00460020004d00450052004300480041004e
0054004100420049004c004900540059002c0020004600490054004e0045
0053005300200046004f0052002000410020005000410052005400490043
0055004c0041005200200050005500520050004f0053004500200041004e
00440020004e004f004e0049004e004600520049004e00470045004d0045
004e0054002e00200049004e0020004e004f0020004500560045004e0054
0020005300480041004c004c002000540048004500200041005500540048
004f005200530020004f005200200043004f005000590052004900470048
005400200048004f004c00440045005200530020004200450020004c0049
00410042004c004500200046004f005200200041004e005900200043004c
00410049004d002c002000440041004d00410047004500530020004f0052
0020004f00540048004500520020004c0049004100420049004c00490054
0059002c0020005700480045005400480045005200200049004e00200041
004e00200041004300540049004f004e0020004f004600200043004f004e
00540052004100430054002c00200054004f005200540020004f00520020
004f00540048004500520057004900530045002c00200041005200490053
0049004e0047002000460052004f004d002c0020004f005500540020004f
00460020004f005200200049004e00200043004f004e004e004500430054
0049004f004e00200057004900540048002000540048004500200053004f
0046005400570041005200450020004f0052002000540048004500200055
005300450020004f00520020004f00540048004500520020004400450041
004c0049004e0047005300200049004e002000540048004500200053004f
004600540057004100520045002e000d000a004e006f0072006d00610061
006c0069004e006f0072006d00e1006c006e0065004e006f0072006d0061
006c0065005300740061006e00640061006100720064041e0431044b0447
043d044b0439004e0061007600610064006e006f0074006801b001a10300
006e00670041007200720075006e00740061000000>
<ba0054ffc003c0b2553340b803c0b23a3340b803c0b30e243280b803c0b3
0b0d3280b803c0b209333f412f03c0007003c000af03c000cf03c0000400
5f03c0007f03c000af03c00003001f03c0003f03c0005f03c0008f03c000
0400a003bb00b003bb00c003bb00d003bb000400a003ba00b003ba00c003
ba00d003ba0004003f03b8000103b703b6b2241f40b803b4b3192432ef41
1a03b300ff03b300020391038b0021001f035e038b0021001f035f038b00
21001f038f038b002a001f0390038b002a001f038d038bb23b1f0f410903
8b000100ef038b00ff038b0002ffc0039cb2474f32b9ffc0039cb2373c32
b9ffc0039bb2474f32b9ffc0039bb3373c321f4119039c00b0039c00c003
9c00d0039c000400ef039c0001001f039b00b0039b00c0039b00d0039b00
0400ef039b0001ffc0039cb2212932b9ffc0039bb2212932b9ffc0039cb2
0f1632b9ffc0039bb20f1632410a035903560032001f035803560032001f
03570356b2321fbf41600355000100af0355000100a003540001008f0354
0001005f03540001004f03540001007f03550001007f03540001006f0355
0001006f03540001003f03550001003f03540001003f03540001002f0354
0001002f03540001001f03540001000f03540001035203530029001f0351
034a0029001f035003450025001f034f034a0025001f034e03490025001f
034d03470025001f034c034a0018001f034b03450012001f034a03460018
001f034903450044001f034803460044001f03470346b2441f3041700346
005f03450002000f0344001f0344002f0344003f03440004000f0344008f
034400a0034400df03440004005f0344007f034400cf03440003002f0344
0001034403440343034303410341000f0340001f0340002f034000030340
0340033f033f033e033e000f033d0001033d033d0040033c0001001f033c
002f033c003f033c004f033c005f033c00c0033c00d0033c0007033c033c
00200335003003350040033500500335006003350005000f032c002f032c
008f032c0003032c032d0024001f0321028c0014001f0320028c0014001f
031f028b001e001f031e028bb21e1f40410902b4005002b4006002b40070
02b4008002b4b205120f4114028b001f028b002f028b004f028b005f028b
007f028b009f028b00af028b0008003f028b004f028b400b023f023f034f
024f030440b80329b33c3c3240b80329b333363240b80329b31c1d3240b8
0329b30c1a320f41720329007f0329009f03290003000f0329002f032900
3f03290003000f0329001f0329000200af032700bf032700cf032700df03
270004000f0327004f0327005f0327008f0327009f032700af0327000600
bf032700ef032700ff03270003006f0327007f0327008f0327009f032700
af03270005000f0327001f0327002f0327004f0327005f03270005000f03
28002f0328005f0328007f032800af0328000500df03280001000f032700
0f032800500328008f032800bf0328000500df03220001008f0322000100
3f0322004f03220002002f0322003f03220002000f0322001f0322b20209
0fb8028bb2013a0f413f028c004f028c0002000f028d002f028d003f028d
0003001f028b0001000f028b0001002f028b0001000f028c002f028c003f
028c004f028c008f028c00af028c000603b903b903290329032703270328
0328032203220321032103200320031f031f031e031e02900290028f028f
028e028e028d028d028c028c028b028b4014af2bbf2b025f356f357f358f
359f35af35bf3507bb0261026102600260400a0016160000001211081a41
100204005c000d01fa005c000d01ad005c000d0172005c000d0140005c00
0d0117401a5c0de45c0dc85c0d995c0d955c0d585c0d4e5c0d465c0d2f5c
0db8016240172b0ddb2b0d902b0d562b0d362b0d352b0d332b0d292b0d41
1101590157000d00be0157000d00420157000d00320157000d0022015700
0d001d0157b20d0009bc015b00210801001f0127b421811fe521b80401b2
1f8321b80801b21f8221b80401b21f5b21b80401b21f3b21b80801b61f30
21671f2c21b80401b21f2621b80401b21f2421bd0401001f005501ac0007
012b402c07c9075f07400739072e072d072807270723071f071408120810
080e080c080a080808060804080208000814b8ffe0402b00000100140610
000001000604000001000410000001001002000001000200000001000002
010802004a00b013034b024b5342014bb0c063004b6220b0f65323b8010a
515ab005234201b0124b004b544218b0372b4bb807ff52b0382b4bb00950
5b58b101018e59b0382bb00288b801005458b801ffb101018e851bb01243
58b90001012c858d1bb90001012c858d59594bb0095058b104018d8d5900
16763f183f123e113946443e113946443e113946443e113946443e113946
60443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b
2b2b18b0372b1db0964b5358b0aa1d59b0324b5358b0ff1d594bb8040153
205c58b9023802364544b90237023645445958b90a800238455258b90238
0a804459594bb8040153205c58b9002002384544b90021023845445958b9
0a800020455258b900200a804459594bb8040153205c58b9001e02374544
b90025023745445958b90a80001e455258b9001e0a804459594bb8040153
205c58b13d214544b1212145445958b90a80003d455258b9003d0a804459
594bb8040153205c58b167214544b1212145445958b90a800067455258b9
00670a804459594bb8030153205c58b121214544b1212145445958b907e0
0021455258b9002107e04459594bb8030153205c58b121214544b11e2145
445958b907e00021455258b9002107e04459594bb8030153205c58b12121
4544b1252145445958b907e00021455258b9002107e04459592b2b2b2b2b
2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b01b9004a01d6b1437a456523456023456560234560b08b76
6818b080622020b9004301d64565234520b003266062636820b003266165
b801d6236544b043234420b14a7a4565234520b003266062636820b00326
6165b07a236544b04a2344b1007a455458b17a406544b24a404a45236144
59b347612aad456523456023456560234560b089766818b080622020b12a
614565234520b003266062636820b003266165b061236544b02a234420b1
47ad4565234520b003266062636820b003266165b0ad236544b0472344b1
00ad455458b1ad406544b247404745236144594b5342014b5058b1080042
59435c58b108004259b3020b0a124358601b2159421610703eb0124358b9
3b21187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d
411bba04000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba
01a80400000b2b59b0102342b01123420018456944456944737318456944
456944456944456944456944456944456944456944456944456944456944
4569444569444569444569447373737373745e735e737373737473737473
737374757373742b2b2b2b007300737400435c58410c001f028b001f028d
0002000f028b000f028c000f028d000373735974002b2b2b2b2b73750045
694473744569447345694445694445694473456944456944456944757473
7301732b2b2b2b2b2b2b2b2b2b2b2b007373737373737373737373737373
7373732b2b2b012b002b012b002b017375007375012b2b002b2b0073752b
2b2b2b2b2b0173012b012b73017300737374752b2b2b2b2b2b0000>
[7715 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 1704 54 <000100b9ffdf041404ad004400e2402a3d334c1b4f335d3377168616871a
891b8c3999420a4920464102911fa21fa941a842d517e617f517071bb8ff
f6b2131836b8ffde405f2b40293d3b1a180f05140001370e323023032e34
0f0d0003110b19263c3c341125430b20090942550b8b042e8b2734252143
030402270821090e26086037255f1e6f1e021e1a46142540312623264041
6f297f298f299f29af29052919459dba011f0018012c852b4e10f45d4de4
eded10ed4e10f65d4dfdfded003f3f3f3f10ed10ed10ed2b10fd11392fed
11121739111217390111123939121739111239313000383838015d00715d
013534363332161515140623222627262623220615141e02171617161615
140623222715140623222635353436333216171616333236353426272627
2627263534363332039317131317171312170105a3848ba42e4c6066ab41
5759e6c3db8317131218171312170105bb9e9eb746453098d15c5cd3adb0
043e1c1e1a1a1ed61e1a181b54868f613252331f111c1d278a5e90cb8930
1e1a1a1ee81f1a181b5c979e6c42671e151a2348488584be>PBAAAA+CourierNewPSMT AddT42Char 
2 2118 68 <00020090ffdf045603800028003601624051aa07a41faa2e032607251f3b
047413771a761b8014851a9214951aab07a014a41aae2fb507bc0eb114b4
1ab91ecb0ef431150a0119012a01039a11941a027b2e8a2e9b2eaa0eab2e
c531d531e531082822b802ae401a252f21252522212228121d1317293621
0036290103330c092c36b801e0405a018828000a3321030b0921002c102c
702c032c293b0c0c28149c10211d073321030b0d00202021400d163f0f21
012f213f214f215f219f21af21bf21df2108211a38178f302106400d163f
6f069f06bf06df06040619372abb18b8012c852b4e10f45d012b4dfde64e
10f65d71012b3c4dfd3c003fed3feded12392fed2f5ded3fed3f3cf4ed11
12391217390111123939123911390010fd3d12392f180110f5f4c4313000
4bb019534bb024515a58bf0007fff80034fff00035fff00019fff4b31208
2e0838383838383859005d71004bb00b534bb014515a58bb001efff00013
ffc038385900715d015d2135062322263534363332161735342623220706
232226353437363736333216151133321615140623032626232207061514
16333236370358b7d097aae0d73a884f808062b1200910170a0e639c509f
b2701f1a1a1fc53b8449b7674e77726dbb63799a996f7ab60f1088456639
0a1812110a0f1a2a9d63fdd41713121801a211104f3b524c68575f00>PBAAAA+CourierNewPSMT AddT42Char 
2 3292 76 <000200bd0000041605110003001c007f402a221932194019521963197419
841907130d10581414220d060c09580505220c161c19951515221c03c502
b80194b61c060d0c0a0001bb015f0003000201e0400e04040520154f1401
14191d517f182b4e10f45d3c4dfd3c10fd3cfd3c003f3c3ff6ed10ed0110
f5d43c0010ed0110f5d43c0010ed0110f5d43c3130015d01152335131121
3216151406232122263534363321112322263534363302907c7f014a1f1a
1a1ffd181e1a1a1e014af51e1b1a1f0511d9d9fe51fcf217131218181213
1702b91812131800>PBAAAA+CourierNewPSMT AddT42Char 
2 3510 79 <000100bb0000041404e70018005d4034621573158315030f090c58101022
09020805580101220812181595111122180009080a0001201110104f10bf
1003101919517f182b4e10f45d3c4dfd3c003f3c3fed0110f5d43c0010ed
0110f5d43c0010ed0110f5d43c3130015d01112132161514062321222635
3436332111232226353436330291014a1f1a1a1ffd181e1a1a1e014af21e
1b1a1f04e7fb6d1713121818121317043e1813121800>PBAAAA+CourierNewPSMT AddT42Char 
2 3682 80 <00010015000004bf03800046022a403c0f370f380e390f3a0f3c0f3d0f40
0f430f450912260c360cb41bb22c042701360102551c6207621c7407741c
053607321c4507451c5507053008373db802ae400edf3a013a463e3a3a3d
3e2237150fb802ae401e2012015012d012e012f012040012101240120312
460e12120f0e2215251fb802ae4010002210220222461e22221f1e222536
30b802ae4010003310330233462f3333302f22364640b802ae4065df4301
43463f4343403f222d2f061e262e2d281d1c0601072a37403b0046062a21
031a21090903073736362525150a0d0e201716401f35301680160216fc26
1d1e202726401f35302680260226fc3e002f203f3e400d163f003ebf3ecf
3e033e19472aad182b4e10f45d012b3c4dfd3c10f45d2b3cfd3c10f45d2b
3cfd3c003f3c103c103c3f3c10ed10ed3f3ced1112173901111239123900
fd3d12392f180110f55df4c40010fd3d12392f180110f55df4c40010fd3d
12392f180110f55df4c40010fd3d12392f180110f55d5d71f4c40010fd3d
12392f180110f55df4c4b10602435458b90006ffc0b316243401b8ffc0b3
1b243401b8ffe0b2111a34002b2b2b59313043794020282918190a0c0405
0b252904271f010506190a171f0128052a1f01180c1a1f01002b2b012b10
3c2b2b81818181005d5d004bb01b534bb024515a58410a000affee0004ff
ee0007ffda0006ffda0001ffd338383838385900710171435c58b90007ff
c0b3161a3e06b8ffc0b3161a3e01b8ffc0b2161a3e002b2b2b59015d1315
363332161736363332171615113332161514062323113426232206071133
321615140623231134262322070607113332161514062323222635343633
331123222635343633e86b6c41622138733a5b3647471e1a1a1e9b4e332e
6641461e1a1a1e9b4f312d2c3d43471e1a1a1ee21e1a1a1e47471e1a1a1e
03625573454646453b4c5afdb517131218029740544565fdd31713121802
9143571d2964fdd3171312181812131702b918131218>PBAAAA+CourierNewPSMT AddT42Char 
2 4970 85 <000100ab0000045a0377002b011540147c0e012c094f0a6a127912891296
069d13071c22b802ae400b1fc8231f1f2223221c1b15ba02ae0018014040
091418181514221b2b25b802ae404f284e2428282524222b0b0e140c0b0a
090805070d011300140e100a24253b002b060a3f10210407153b1b223b1c
1c1b0a0f07f00702071a2d001420240f23502380239023a023f023062319
2cfd8e182b4e10f45d3c4dfd3c4e10e65d003f3c4d10ed10ed3feded3f3c
fd3c1112391112393911121739011139390010fd3d12392f180110f5f4c4
0010fd3d12392f180110f5f4c40010fd3d12392f180110f5f4c4b1060243
5458b90001ffc0b31b243401b8ffe0b2111a34002b2b593130004bb01153
4bb024515a58b513140e16121c3838385900710171011536363332161514
062322262726262322060711213216151406232122263534363333112322
26353436330202a4a3454b8119130a0e13233419379bbf01741f1a1a1ffd
6d1e1a191fcb9b1e1a191f0362d49455651a13190713231a58abfe341713
12181712111702bc18131218>PBAAAA+CourierNewPSMT AddT42Char 
2 5372 87 <00010092ffdf043b0492002c00c94024fb1b010d1b1a1b02a40ab50ac20a
d30ae40a05760e860e950ea60ec60bd60b0617080107ba02ae0004017240
150804040708220110140915110f1011121405190c29b801a340111e3b24
24073b010100060c21190b148804b801a940142c2c0809202621c6001c10
1c201c701cbf1c051cb802e5b32d2aad182b10f65de43cfd3c3c10f4e400
3fed3f3c10ed3c10fded111217391239011112390010fd3d12392f180110
f5f4c431304379400e1a1b0a0b0b1a091f000a1b0c1f00002b012b818100
715d01715d01213216151406232111141633323637363332161514070606
232226351123222635343633333534363332161501ba01c81e1a1a1efe38
757155c637140d10180d20f77193ae9b1e1a1a1e9b181213180362181312
18fdd1496233200d19110f0d214d8a75022f18131218f81e1a1a1e00>PBAAAA+CourierNewPSMT AddT42Char 
2 6554 92 <00010095fe7e04980362003201e040411800181218222b0d211735013511
4f0d4017fb13f9220b09134b134a22680168117813782288138822b911bd
13ba22c622d7220e2218090f42552318090f425500b8ffe8b4090e425501
b8ffe8400f090f42550000011232121132130a10b802ae401e0d0d2f110d
0d1011220a11121b221e801e011e99221e1e22221b22232b31b802aeb42e
302e012eb80117400b322e2e3132222b32130902b802ae400e0505990105
050201220901001a14b802ae401117301701172f1317171413221a13322a
24b802ae406d27272f2327272423222a2322133232202322142323221112
122000011400121300013223221312110100081e051209000a223b1b1b14
3b1a1a103b0a023b0a0906243b2a313b2b2b2a0e001e501e02701ee01ef0
1e031e1a345005010005100520057005e005f005060519332aba01210018
012c852b4e10e45d7110e65d71003f3c4d10ed10ed3f3ced10ed3c10ed3c
10ed3f1239011112173987082e2b057d10c4872e182b7d10c418000810fd
3d12392f180110f12ff4c4000810fd3d12392f180110f15d2ff4c4000810
fd3d12392f180110f12ff4c4000810fd3d12392f180110f15d2ff4c40008
10fd3d392f180110f15d2f10c4000810fd3d12392f180110f12ff4c40708
103c083c012b2b2b2b313001715d21012322263534363633333216151406
232301012322263534363333321615140606230133321615140623212226
3534363321026cfe7a191e1a0d1516e61e1a1a1e7101570152711e1a1a1e
e51f1a10142efdec831e1a1a1efe1c1e1a1a1e0107030d18120d15091813
1218fd4f02b11813121818130d1607fbc5171312181713131700>PBAAAA+CourierNewPSMT AddT42Char 
2 0 0 <00020067000004670500000300070046b10607b8010cb40201000504b801
0cb403000a0605b8010cb60303021a090704b8010cb6010019084f7b182b
4e10f43c4dfd3c4e10f63c4d10fd3c003f3cfd3c3f3cfd3c313033112111
25211121670400fc2003c0fc400500fb002004c0>PBAAAA+CourierNewPSMT AddT42Char 
PBAAAA+CourierNewPSMT /CharStrings get begin
/S 54 def
/a 68 def
/i 76 def
/l 79 def
/m 80 def
/r 85 def
/t 87 def
/y 92 def
end
PBAAAA+CourierNewPSMT /Encoding get
dup 83 /S put
dup 97 /a put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 114 /r put
dup 116 /t put
dup 121 /y put
pop
end
%ADOEndSubsetFont
/NSVAKV+CourierNewPSMT /PBAAAA+CourierNewPSMT findfont ct_VMDictPut
/NSVAKV+CourierNewPSMT*1 
[83{/.notdef}rp /S 13{/.notdef}rp /a 7{/.notdef}rp /i 2{/.notdef}rp /l 
/m 4{/.notdef}rp /r /.notdef /t 4{/.notdef}rp /y 134{/.notdef}rp]
NSVAKV+CourierNewPSMT nf
NSVAKV+CourierNewPSMT*1 [-6.16e-7 -14 -14 6.16e-7 0 0 ]msf
295.3 130.603 mo
(Similarity)
[-8.40009 -8.40009 -8.40009 -8.40007 -8.40009 -8.40009 -8.40009 -8.40009 -8.40009 0 ]ysh
%ADOBeginSubsetFont: PBAAAA+CourierNewPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+CourierNewPSMT gcheck setglobal} if

2 0 3 <> PBAAAA+CourierNewPSMT AddT42Char 
2 458 44 <000100e5000003e90492001f00d7402d2f042e05230c200d201420152f1c
2f1e3e05330c301430153f1c3f1e4e05430c401440154b1c4f1d4f1e1509
0fb802a4400b0c36100c0c0f101d09191fb802a4400b1c36001c1c1f001d
190802b802a4400b053601050502011d081812b802a44027153611151512
111d181f261912261918020226080f260909080800011e114f1001101920
8cdf182b4e10f45d3c4dfd3c003f3c10ed10ed3f3ced10ed10fd3d12392f
180110f5f4c40010fd3d12392f180110f5f4c40010fd3d12392f180110f5
f4c40010fd3d12392f180110f5f4c43130015d0111213216151406232122
263534363321112122263534363321321615140623029101201e1a1a1efd
6c1e1a1a1e0120fee01e1a1a1e02941e1a1a1e043efc1617131218181213
1703ea171313171713131700>PBAAAA+CourierNewPSMT AddT42Char 
2 770 47 <000100800000045804920021006c4038110b0e3512121d0b211b1e350000
1d1b030906db02021d09141a173513131d1a02260b1b1a020b080f090109
1a2300011e13121922a579182b4e10f43c4dfd3c4e10e65d003f3f3c4d10
ed10ed0110f5d43c10ed0010f5d43c10ed0110f5d43c0010ed0110f5d43c
313001112111343633321615112122263534363333112322263534363321
32161514062301d5022e18131218fc601e1a1a1ec8c81e1a1a1e01e51e1a
1a1e043efc16014e1e1a191ffe5e1812131703ea1713131717131317>PBAAAA+CourierNewPSMT AddT42Char 
2 2626 71 <0002007effdf04ab04e7001e002a00e1b6492a682a020802b802ae400e00
0501052f010505020122081e18b802ae40101b2f171b1b1817221e0a1622
28095d0ab80163b328210c16b8016340202221141e000c0b140700000001
171f09208001010f0101011a2c252180100110b8018cb32b2a8018b8012c
852b10f671ed4e10f65d714dfd3c3c103c003f3f3f103c10ede410ede4f4
1112393910fd3d12392f180110f5f4c40010fd3d12392f180110f55df4c4
31304bb016534bb024515a58b30e081208383859004bb00c534bb024515a
58b9002affecb2201427bafff80026ffe7b3230824193838383838385900
5d0111333216151406232335062322262635343636333217112322263534
36331334262322061514163332360402701f1a1a1fc592e172d17979d173
dc96701f1a1a1f70d89596d8d89695d804e7fb6d17131218a7c879e07778
df7ac801da18131218fcc8a0dcdca09fdddd>PBAAAA+CourierNewPSMT AddT42Char 
2 2974 72 <00020080ffdf042f03800019002000d040690a1699150232024202520263
02c602c613ca19da12da19dc1be318e51ffa160d191c2a1c3402381e4a1b
4c1f5c1b5a1f6f1b6c1f7e1b8c1b991c991eb7050f7516ba1cc403c412c9
1cc91e0608c5111a2020000101111d2117070421110b0c541a3ba0000170
000100b801e5401722203b013ba014016f14bf14cf14df14041419212aac
18b8012c852b4e10f45d714deded10f65d71ede4003fed3fed12392f3cfd
3c10ed3130004bb00c534bb024515a58b2161406b8fff0b41b141f1e02b8
ffec383838383859005d71015d7101211616333236373633321615140706
0623220035340033320007262623220607042dfca816e5a95ece41130e10
181030f581d8fedf010fc8ce010a5719d59393d41a019da3c73e330f1911
11103257011bc9b70106fef3818baeac8d00>PBAAAA+CourierNewPSMT AddT42Char 
2 4424 81 <0001006c000004570380003801874037d506d50802c406c40802a308b206
b20803710780070263076408641b039b1ba506027b1fb301b402031c1f6a
1f0200010402021e081218b802ae40100f151f1502154619151518192212
292fb802ae400b2c5c302c2c2f302229110bb802ae400e000e010e460a0e
0e0b0a22112822b802ae40100025102502255c212525222122283832b802
ae400d3546313535323122323b380601ba01e00020016340131d21040729
28281212110a090a201adf190119b802a340103a002120319030a0300230
19394761182b4e10f45d3c4dfd3c10f45d3cfd3c003f3c103c103c3ffdf4
ed3fedfd3d12392f180110f5f4c40010fd3d12392f180110f55df4c40010
fd3d12392f180110f55df4c40010fd3d12392f180110f5f4c40010fd3d12
392f180110f55df4c4b10602435458b90001ffc0b31b243401b8ffe0b211
1a34002b2b593130437940141b1c05080708060802061c051a1f011b081d
1f01002b012b2a8181004bb01b534bb024515a58b21f1401b8ffdeb11b14
38383859007171715d0171715d5d5d011536363332171616151133321615
140623232226353436333311342623220607113332161514062321222635
3436333311232226353436330157588e59604f385b471e1a1a1ee11f1a1a
1f46826d537a715f1e1a1a1efeee1e1a1a1e5f471e1a1a1e03627f594429
1e8b49fdef17131218181213170203597b4385fdf1171312181812131702
b91813121800>PBAAAA+CourierNewPSMT AddT42Char 
2 5700 91 <000100650000046a03620043029240951f111f12021238115711021b0001
10001f2260016d126f216f236043c301c310ce12ce21cc23cc32c234c243
0f0800180098220300320112431112432310222310213433320121343223
10121020013214010132344312121220213414212134023b013b0f3b103b
0a133b123b213b203b1a313b323b243b233b2a423b433b353b343b3b4043
433f38383f2323272e2e273f590534b8012eb420439a3f10b801e0401b01
01050c2121160c0c0500160116161d019a0f056f0502051a4532b801e0b3
239a2712b801e0401b219a27590f1d2f1d4f1d5f1d6f1d051d19440a0a1a
0a2a063b06e6ba01070018012c852b003f3f3f3f014e10f45d4de419f418
ed1910f418ed4e10f65d194de41812392f5d11392f1911392f1112392f18
ed1910e41aed1810e411392f1912392f1811392f1912392f1a001810eded
eded10edededed10edededed10edededed05872e2b435c58b90012ffcab3
19323f12b8ffd4b3172d3f12b8ffacb314283f12b8fff6b312233f12b8ff
e2b30e173f12b8ffdeb21b3c3e2b2b2b2b2b2b59877dc4872e182b435c58
4023103619323f102c172d3f104014283f100a12233f101e0e173f101e0d
163f10221b3c3e2b2b2b2b2b2b2b59877dc40f0f0f0fb10602435458b511
180d0f3433b8ffe8b20d0f34002b2b59313001715d005d71435c58b90033
ffe24009120b3f111e0b123f33b8ffe2404a0b123f110a16173e110a1112
3e43411e123f01411e123f43371c113f01371c113f43371b103f01371b10
3f4314190f3f0114190f3f210a1d203e340f1d203e3214191b3e10141015
3f32b8ffecb310153f12b8ffecb310153f43b8ffc4b310143e01b8ffc440
0d10143e233c10143e213c10143e012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b002b2b2b2b2b59005d010132161615140623212226353436333301
013332161514062321222635343636330101222626353436333332161514
062323010123222635343633333216151406062302a0018126140f1a1ffe
f21f1a1a1f8bfeb9febb8c1e1a1a1efeef1e1a0f13260181feaa24130f1a
1fe51f19191f64011b011d641e1b1a1fe51e1a0f132401c5fe8f07160d12
18181213170139fec71713121818120d16070171014808160d1218181312
18feef01111813121818130c1608>PBAAAA+CourierNewPSMT AddT42Char 
PBAAAA+CourierNewPSMT /CharStrings get begin
/space 3 def
/I 44 def
/L 47 def
/d 71 def
/e 72 def
/n 81 def
/x 91 def
end
PBAAAA+CourierNewPSMT /Encoding get
dup 32 /space put
dup 73 /I put
dup 76 /L put
dup 100 /d put
dup 101 /e put
dup 110 /n put
dup 120 /x put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/NSVAKV+CourierNewPSMT*1 
[32{/.notdef}rp /space 40{/.notdef}rp /I 2{/.notdef}rp /L 6{/.notdef}rp /S 
13{/.notdef}rp /a 2{/.notdef}rp /d /e 3{/.notdef}rp /i 2{/.notdef}rp 
/l /m /n 3{/.notdef}rp /r /.notdef /t 3{/.notdef}rp 
/x /y 134{/.notdef}rp]
NSVAKV+CourierNewPSMT nf
NSVAKV+CourierNewPSMT*1 [14 0 0 -14 0 0 ]msf
405.3 200.813 mo
(Layer Index)
[8.40009 8.40009 8.40009 8.40009 8.40009 8.40009 8.40009 8.40009 8.40009 8.40009 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/NSVAKV+CourierNewPSMT*1 uf
/NSVAKV+CourierNewPSMT uf
/PBAAAA+CourierNewPSMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
